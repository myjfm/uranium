// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uranium.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uranium.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uranium {
namespace api {

namespace {

const ::google::protobuf::Descriptor* Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Key_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVSetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVRemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVRemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVRemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVRemoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLPushRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLPushRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLPushResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLPushResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLPopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLPopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLPopResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLPopResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRPushRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRPushRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRPushResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRPushResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRPopRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRPopRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRPopResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRPopResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLPushXRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLPushXRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLPushXResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLPushXResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRPushXRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRPushXRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRPushXResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRPushXResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListIndexRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListIndexRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListIndexResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListIndexResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLengthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLengthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLengthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLengthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRemoveAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRemoveAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRemoveAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRemoveAllResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGetAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGetAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGetAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGetAllResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGetAllFieldsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGetAllFieldsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGetAllFieldsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGetAllFieldsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGetAllValuesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGetAllValuesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGetAllValuesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGetAllValuesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashLengthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashLengthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashLengthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashLengthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashSetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashSetXRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashSetXRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashSetXResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashSetXResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashRemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashRemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashRemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashRemoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashExistsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashExistsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashExistsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashExistsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashRemoveAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashRemoveAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashRemoveAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashRemoveAllResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAddRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAddRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAddResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAddResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLengthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLengthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLengthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLengthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetIsMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetIsMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetIsMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetIsMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGetAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGetAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGetAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGetAllResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRemoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRemoveAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRemoveAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRemoveAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRemoveAllResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_uranium_2eproto() {
  protobuf_AddDesc_uranium_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uranium.proto");
  GOOGLE_CHECK(file != NULL);
  Key_descriptor_ = file->message_type(0);
  static const int Key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, key_),
  };
  Key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Key_descriptor_,
      Key::default_instance_,
      Key_offsets_,
      -1,
      -1,
      -1,
      sizeof(Key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _is_default_instance_));
  Value_descriptor_ = file->message_type(1);
  static const int Value_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, value_),
  };
  Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      -1,
      -1,
      -1,
      sizeof(Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _is_default_instance_));
  KeyValue_descriptor_ = file->message_type(2);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _is_default_instance_));
  Field_descriptor_ = file->message_type(3);
  static const int Field_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, field_),
  };
  Field_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      -1,
      -1,
      -1,
      sizeof(Field),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _is_default_instance_));
  FieldValue_descriptor_ = file->message_type(4);
  static const int FieldValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, value_),
  };
  FieldValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldValue_descriptor_,
      FieldValue::default_instance_,
      FieldValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(FieldValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, _is_default_instance_));
  KVGetRequest_descriptor_ = file->message_type(5);
  static const int KVGetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVGetRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVGetRequest, keys_),
  };
  KVGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KVGetRequest_descriptor_,
      KVGetRequest::default_instance_,
      KVGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(KVGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVGetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVGetRequest, _is_default_instance_));
  KVGetResponse_descriptor_ = file->message_type(6);
  static const int KVGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVGetResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVGetResponse, kvs_),
  };
  KVGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KVGetResponse_descriptor_,
      KVGetResponse::default_instance_,
      KVGetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(KVGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVGetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVGetResponse, _is_default_instance_));
  KVSetRequest_descriptor_ = file->message_type(7);
  static const int KVSetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVSetRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVSetRequest, kvs_),
  };
  KVSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KVSetRequest_descriptor_,
      KVSetRequest::default_instance_,
      KVSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(KVSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVSetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVSetRequest, _is_default_instance_));
  KVSetResponse_descriptor_ = file->message_type(8);
  static const int KVSetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVSetResponse, status_),
  };
  KVSetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KVSetResponse_descriptor_,
      KVSetResponse::default_instance_,
      KVSetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(KVSetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVSetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVSetResponse, _is_default_instance_));
  KVRemoveRequest_descriptor_ = file->message_type(9);
  static const int KVRemoveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVRemoveRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVRemoveRequest, keys_),
  };
  KVRemoveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KVRemoveRequest_descriptor_,
      KVRemoveRequest::default_instance_,
      KVRemoveRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(KVRemoveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVRemoveRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVRemoveRequest, _is_default_instance_));
  KVRemoveResponse_descriptor_ = file->message_type(10);
  static const int KVRemoveResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVRemoveResponse, status_),
  };
  KVRemoveResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KVRemoveResponse_descriptor_,
      KVRemoveResponse::default_instance_,
      KVRemoveResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(KVRemoveResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVRemoveResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVRemoveResponse, _is_default_instance_));
  ListLPushRequest_descriptor_ = file->message_type(11);
  static const int ListLPushRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushRequest, values_),
  };
  ListLPushRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListLPushRequest_descriptor_,
      ListLPushRequest::default_instance_,
      ListLPushRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListLPushRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushRequest, _is_default_instance_));
  ListLPushResponse_descriptor_ = file->message_type(12);
  static const int ListLPushResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushResponse, status_),
  };
  ListLPushResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListLPushResponse_descriptor_,
      ListLPushResponse::default_instance_,
      ListLPushResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListLPushResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushResponse, _is_default_instance_));
  ListLPopRequest_descriptor_ = file->message_type(13);
  static const int ListLPopRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPopRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPopRequest, key_),
  };
  ListLPopRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListLPopRequest_descriptor_,
      ListLPopRequest::default_instance_,
      ListLPopRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListLPopRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPopRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPopRequest, _is_default_instance_));
  ListLPopResponse_descriptor_ = file->message_type(14);
  static const int ListLPopResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPopResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPopResponse, value_),
  };
  ListLPopResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListLPopResponse_descriptor_,
      ListLPopResponse::default_instance_,
      ListLPopResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListLPopResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPopResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPopResponse, _is_default_instance_));
  ListRPushRequest_descriptor_ = file->message_type(15);
  static const int ListRPushRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushRequest, values_),
  };
  ListRPushRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRPushRequest_descriptor_,
      ListRPushRequest::default_instance_,
      ListRPushRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRPushRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushRequest, _is_default_instance_));
  ListRPushResponse_descriptor_ = file->message_type(16);
  static const int ListRPushResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushResponse, status_),
  };
  ListRPushResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRPushResponse_descriptor_,
      ListRPushResponse::default_instance_,
      ListRPushResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRPushResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushResponse, _is_default_instance_));
  ListRPopRequest_descriptor_ = file->message_type(17);
  static const int ListRPopRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPopRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPopRequest, key_),
  };
  ListRPopRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRPopRequest_descriptor_,
      ListRPopRequest::default_instance_,
      ListRPopRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRPopRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPopRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPopRequest, _is_default_instance_));
  ListRPopResponse_descriptor_ = file->message_type(18);
  static const int ListRPopResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPopResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPopResponse, value_),
  };
  ListRPopResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRPopResponse_descriptor_,
      ListRPopResponse::default_instance_,
      ListRPopResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRPopResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPopResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPopResponse, _is_default_instance_));
  ListLPushXRequest_descriptor_ = file->message_type(19);
  static const int ListLPushXRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushXRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushXRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushXRequest, values_),
  };
  ListLPushXRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListLPushXRequest_descriptor_,
      ListLPushXRequest::default_instance_,
      ListLPushXRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListLPushXRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushXRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushXRequest, _is_default_instance_));
  ListLPushXResponse_descriptor_ = file->message_type(20);
  static const int ListLPushXResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushXResponse, status_),
  };
  ListLPushXResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListLPushXResponse_descriptor_,
      ListLPushXResponse::default_instance_,
      ListLPushXResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListLPushXResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushXResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLPushXResponse, _is_default_instance_));
  ListRPushXRequest_descriptor_ = file->message_type(21);
  static const int ListRPushXRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushXRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushXRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushXRequest, values_),
  };
  ListRPushXRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRPushXRequest_descriptor_,
      ListRPushXRequest::default_instance_,
      ListRPushXRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRPushXRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushXRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushXRequest, _is_default_instance_));
  ListRPushXResponse_descriptor_ = file->message_type(22);
  static const int ListRPushXResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushXResponse, status_),
  };
  ListRPushXResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRPushXResponse_descriptor_,
      ListRPushXResponse::default_instance_,
      ListRPushXResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRPushXResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushXResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRPushXResponse, _is_default_instance_));
  ListIndexRequest_descriptor_ = file->message_type(23);
  static const int ListIndexRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexRequest, index_),
  };
  ListIndexRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListIndexRequest_descriptor_,
      ListIndexRequest::default_instance_,
      ListIndexRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListIndexRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexRequest, _is_default_instance_));
  ListIndexResponse_descriptor_ = file->message_type(24);
  static const int ListIndexResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexResponse, value_),
  };
  ListIndexResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListIndexResponse_descriptor_,
      ListIndexResponse::default_instance_,
      ListIndexResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListIndexResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListIndexResponse, _is_default_instance_));
  ListSetRequest_descriptor_ = file->message_type(25);
  static const int ListSetRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetRequest, value_),
  };
  ListSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListSetRequest_descriptor_,
      ListSetRequest::default_instance_,
      ListSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetRequest, _is_default_instance_));
  ListSetResponse_descriptor_ = file->message_type(26);
  static const int ListSetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetResponse, status_),
  };
  ListSetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListSetResponse_descriptor_,
      ListSetResponse::default_instance_,
      ListSetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListSetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSetResponse, _is_default_instance_));
  ListRangeRequest_descriptor_ = file->message_type(27);
  static const int ListRangeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeRequest, end_),
  };
  ListRangeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRangeRequest_descriptor_,
      ListRangeRequest::default_instance_,
      ListRangeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRangeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeRequest, _is_default_instance_));
  ListRangeResponse_descriptor_ = file->message_type(28);
  static const int ListRangeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeResponse, values_),
  };
  ListRangeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRangeResponse_descriptor_,
      ListRangeResponse::default_instance_,
      ListRangeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRangeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRangeResponse, _is_default_instance_));
  ListLengthRequest_descriptor_ = file->message_type(29);
  static const int ListLengthRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLengthRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLengthRequest, key_),
  };
  ListLengthRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListLengthRequest_descriptor_,
      ListLengthRequest::default_instance_,
      ListLengthRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListLengthRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLengthRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLengthRequest, _is_default_instance_));
  ListLengthResponse_descriptor_ = file->message_type(30);
  static const int ListLengthResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLengthResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLengthResponse, length_),
  };
  ListLengthResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListLengthResponse_descriptor_,
      ListLengthResponse::default_instance_,
      ListLengthResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListLengthResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLengthResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLengthResponse, _is_default_instance_));
  ListRemoveAllRequest_descriptor_ = file->message_type(31);
  static const int ListRemoveAllRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRemoveAllRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRemoveAllRequest, key_),
  };
  ListRemoveAllRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRemoveAllRequest_descriptor_,
      ListRemoveAllRequest::default_instance_,
      ListRemoveAllRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRemoveAllRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRemoveAllRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRemoveAllRequest, _is_default_instance_));
  ListRemoveAllResponse_descriptor_ = file->message_type(32);
  static const int ListRemoveAllResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRemoveAllResponse, status_),
  };
  ListRemoveAllResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListRemoveAllResponse_descriptor_,
      ListRemoveAllResponse::default_instance_,
      ListRemoveAllResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListRemoveAllResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRemoveAllResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRemoveAllResponse, _is_default_instance_));
  HashGetRequest_descriptor_ = file->message_type(33);
  static const int HashGetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetRequest, fields_),
  };
  HashGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGetRequest_descriptor_,
      HashGetRequest::default_instance_,
      HashGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetRequest, _is_default_instance_));
  HashGetResponse_descriptor_ = file->message_type(34);
  static const int HashGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetResponse, fvs_),
  };
  HashGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGetResponse_descriptor_,
      HashGetResponse::default_instance_,
      HashGetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetResponse, _is_default_instance_));
  HashGetAllRequest_descriptor_ = file->message_type(35);
  static const int HashGetAllRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllRequest, key_),
  };
  HashGetAllRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGetAllRequest_descriptor_,
      HashGetAllRequest::default_instance_,
      HashGetAllRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashGetAllRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllRequest, _is_default_instance_));
  HashGetAllResponse_descriptor_ = file->message_type(36);
  static const int HashGetAllResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllResponse, fvs_),
  };
  HashGetAllResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGetAllResponse_descriptor_,
      HashGetAllResponse::default_instance_,
      HashGetAllResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashGetAllResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllResponse, _is_default_instance_));
  HashGetAllFieldsRequest_descriptor_ = file->message_type(37);
  static const int HashGetAllFieldsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllFieldsRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllFieldsRequest, key_),
  };
  HashGetAllFieldsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGetAllFieldsRequest_descriptor_,
      HashGetAllFieldsRequest::default_instance_,
      HashGetAllFieldsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashGetAllFieldsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllFieldsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllFieldsRequest, _is_default_instance_));
  HashGetAllFieldsResponse_descriptor_ = file->message_type(38);
  static const int HashGetAllFieldsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllFieldsResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllFieldsResponse, fields_),
  };
  HashGetAllFieldsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGetAllFieldsResponse_descriptor_,
      HashGetAllFieldsResponse::default_instance_,
      HashGetAllFieldsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashGetAllFieldsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllFieldsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllFieldsResponse, _is_default_instance_));
  HashGetAllValuesRequest_descriptor_ = file->message_type(39);
  static const int HashGetAllValuesRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllValuesRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllValuesRequest, key_),
  };
  HashGetAllValuesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGetAllValuesRequest_descriptor_,
      HashGetAllValuesRequest::default_instance_,
      HashGetAllValuesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashGetAllValuesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllValuesRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllValuesRequest, _is_default_instance_));
  HashGetAllValuesResponse_descriptor_ = file->message_type(40);
  static const int HashGetAllValuesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllValuesResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllValuesResponse, values_),
  };
  HashGetAllValuesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGetAllValuesResponse_descriptor_,
      HashGetAllValuesResponse::default_instance_,
      HashGetAllValuesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashGetAllValuesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllValuesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGetAllValuesResponse, _is_default_instance_));
  HashLengthRequest_descriptor_ = file->message_type(41);
  static const int HashLengthRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashLengthRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashLengthRequest, key_),
  };
  HashLengthRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashLengthRequest_descriptor_,
      HashLengthRequest::default_instance_,
      HashLengthRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashLengthRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashLengthRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashLengthRequest, _is_default_instance_));
  HashLengthResponse_descriptor_ = file->message_type(42);
  static const int HashLengthResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashLengthResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashLengthResponse, length_),
  };
  HashLengthResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashLengthResponse_descriptor_,
      HashLengthResponse::default_instance_,
      HashLengthResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashLengthResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashLengthResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashLengthResponse, _is_default_instance_));
  HashSetRequest_descriptor_ = file->message_type(43);
  static const int HashSetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetRequest, fvs_),
  };
  HashSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashSetRequest_descriptor_,
      HashSetRequest::default_instance_,
      HashSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetRequest, _is_default_instance_));
  HashSetResponse_descriptor_ = file->message_type(44);
  static const int HashSetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetResponse, status_),
  };
  HashSetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashSetResponse_descriptor_,
      HashSetResponse::default_instance_,
      HashSetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashSetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetResponse, _is_default_instance_));
  HashSetXRequest_descriptor_ = file->message_type(45);
  static const int HashSetXRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetXRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetXRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetXRequest, fv_),
  };
  HashSetXRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashSetXRequest_descriptor_,
      HashSetXRequest::default_instance_,
      HashSetXRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashSetXRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetXRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetXRequest, _is_default_instance_));
  HashSetXResponse_descriptor_ = file->message_type(46);
  static const int HashSetXResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetXResponse, status_),
  };
  HashSetXResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashSetXResponse_descriptor_,
      HashSetXResponse::default_instance_,
      HashSetXResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashSetXResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetXResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashSetXResponse, _is_default_instance_));
  HashRemoveRequest_descriptor_ = file->message_type(47);
  static const int HashRemoveRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveRequest, fields_),
  };
  HashRemoveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashRemoveRequest_descriptor_,
      HashRemoveRequest::default_instance_,
      HashRemoveRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashRemoveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveRequest, _is_default_instance_));
  HashRemoveResponse_descriptor_ = file->message_type(48);
  static const int HashRemoveResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveResponse, status_),
  };
  HashRemoveResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashRemoveResponse_descriptor_,
      HashRemoveResponse::default_instance_,
      HashRemoveResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashRemoveResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveResponse, _is_default_instance_));
  HashExistsRequest_descriptor_ = file->message_type(49);
  static const int HashExistsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsRequest, field_),
  };
  HashExistsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashExistsRequest_descriptor_,
      HashExistsRequest::default_instance_,
      HashExistsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashExistsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsRequest, _is_default_instance_));
  HashExistsResponse_descriptor_ = file->message_type(50);
  static const int HashExistsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsResponse, exists_),
  };
  HashExistsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashExistsResponse_descriptor_,
      HashExistsResponse::default_instance_,
      HashExistsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashExistsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashExistsResponse, _is_default_instance_));
  HashRemoveAllRequest_descriptor_ = file->message_type(51);
  static const int HashRemoveAllRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveAllRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveAllRequest, key_),
  };
  HashRemoveAllRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashRemoveAllRequest_descriptor_,
      HashRemoveAllRequest::default_instance_,
      HashRemoveAllRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashRemoveAllRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveAllRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveAllRequest, _is_default_instance_));
  HashRemoveAllResponse_descriptor_ = file->message_type(52);
  static const int HashRemoveAllResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveAllResponse, status_),
  };
  HashRemoveAllResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashRemoveAllResponse_descriptor_,
      HashRemoveAllResponse::default_instance_,
      HashRemoveAllResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HashRemoveAllResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveAllResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashRemoveAllResponse, _is_default_instance_));
  SetAddRequest_descriptor_ = file->message_type(53);
  static const int SetAddRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddRequest, values_),
  };
  SetAddRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetAddRequest_descriptor_,
      SetAddRequest::default_instance_,
      SetAddRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetAddRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddRequest, _is_default_instance_));
  SetAddResponse_descriptor_ = file->message_type(54);
  static const int SetAddResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddResponse, status_),
  };
  SetAddResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetAddResponse_descriptor_,
      SetAddResponse::default_instance_,
      SetAddResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetAddResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAddResponse, _is_default_instance_));
  SetLengthRequest_descriptor_ = file->message_type(55);
  static const int SetLengthRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthRequest, key_),
  };
  SetLengthRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetLengthRequest_descriptor_,
      SetLengthRequest::default_instance_,
      SetLengthRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetLengthRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthRequest, _is_default_instance_));
  SetLengthResponse_descriptor_ = file->message_type(56);
  static const int SetLengthResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthResponse, length_),
  };
  SetLengthResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetLengthResponse_descriptor_,
      SetLengthResponse::default_instance_,
      SetLengthResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetLengthResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthResponse, _is_default_instance_));
  SetIsMemberRequest_descriptor_ = file->message_type(57);
  static const int SetIsMemberRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberRequest, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberRequest, value_),
  };
  SetIsMemberRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetIsMemberRequest_descriptor_,
      SetIsMemberRequest::default_instance_,
      SetIsMemberRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetIsMemberRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberRequest, _is_default_instance_));
  SetIsMemberResponse_descriptor_ = file->message_type(58);
  static const int SetIsMemberResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberResponse, yes_),
  };
  SetIsMemberResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetIsMemberResponse_descriptor_,
      SetIsMemberResponse::default_instance_,
      SetIsMemberResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetIsMemberResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIsMemberResponse, _is_default_instance_));
  SetGetAllRequest_descriptor_ = file->message_type(59);
  static const int SetGetAllRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGetAllRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGetAllRequest, key_),
  };
  SetGetAllRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetGetAllRequest_descriptor_,
      SetGetAllRequest::default_instance_,
      SetGetAllRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetGetAllRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGetAllRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGetAllRequest, _is_default_instance_));
  SetGetAllResponse_descriptor_ = file->message_type(60);
  static const int SetGetAllResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGetAllResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGetAllResponse, values_),
  };
  SetGetAllResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetGetAllResponse_descriptor_,
      SetGetAllResponse::default_instance_,
      SetGetAllResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetGetAllResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGetAllResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGetAllResponse, _is_default_instance_));
  SetRemoveRequest_descriptor_ = file->message_type(61);
  static const int SetRemoveRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveRequest, values_),
  };
  SetRemoveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetRemoveRequest_descriptor_,
      SetRemoveRequest::default_instance_,
      SetRemoveRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetRemoveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveRequest, _is_default_instance_));
  SetRemoveResponse_descriptor_ = file->message_type(62);
  static const int SetRemoveResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveResponse, status_),
  };
  SetRemoveResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetRemoveResponse_descriptor_,
      SetRemoveResponse::default_instance_,
      SetRemoveResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetRemoveResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveResponse, _is_default_instance_));
  SetRemoveAllRequest_descriptor_ = file->message_type(63);
  static const int SetRemoveAllRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveAllRequest, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveAllRequest, key_),
  };
  SetRemoveAllRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetRemoveAllRequest_descriptor_,
      SetRemoveAllRequest::default_instance_,
      SetRemoveAllRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetRemoveAllRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveAllRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveAllRequest, _is_default_instance_));
  SetRemoveAllResponse_descriptor_ = file->message_type(64);
  static const int SetRemoveAllResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveAllResponse, status_),
  };
  SetRemoveAllResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetRemoveAllResponse_descriptor_,
      SetRemoveAllResponse::default_instance_,
      SetRemoveAllResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetRemoveAllResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveAllResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveAllResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uranium_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Key_descriptor_, &Key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldValue_descriptor_, &FieldValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KVGetRequest_descriptor_, &KVGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KVGetResponse_descriptor_, &KVGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KVSetRequest_descriptor_, &KVSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KVSetResponse_descriptor_, &KVSetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KVRemoveRequest_descriptor_, &KVRemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KVRemoveResponse_descriptor_, &KVRemoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListLPushRequest_descriptor_, &ListLPushRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListLPushResponse_descriptor_, &ListLPushResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListLPopRequest_descriptor_, &ListLPopRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListLPopResponse_descriptor_, &ListLPopResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRPushRequest_descriptor_, &ListRPushRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRPushResponse_descriptor_, &ListRPushResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRPopRequest_descriptor_, &ListRPopRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRPopResponse_descriptor_, &ListRPopResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListLPushXRequest_descriptor_, &ListLPushXRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListLPushXResponse_descriptor_, &ListLPushXResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRPushXRequest_descriptor_, &ListRPushXRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRPushXResponse_descriptor_, &ListRPushXResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListIndexRequest_descriptor_, &ListIndexRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListIndexResponse_descriptor_, &ListIndexResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListSetRequest_descriptor_, &ListSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListSetResponse_descriptor_, &ListSetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRangeRequest_descriptor_, &ListRangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRangeResponse_descriptor_, &ListRangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListLengthRequest_descriptor_, &ListLengthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListLengthResponse_descriptor_, &ListLengthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRemoveAllRequest_descriptor_, &ListRemoveAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListRemoveAllResponse_descriptor_, &ListRemoveAllResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGetRequest_descriptor_, &HashGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGetResponse_descriptor_, &HashGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGetAllRequest_descriptor_, &HashGetAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGetAllResponse_descriptor_, &HashGetAllResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGetAllFieldsRequest_descriptor_, &HashGetAllFieldsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGetAllFieldsResponse_descriptor_, &HashGetAllFieldsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGetAllValuesRequest_descriptor_, &HashGetAllValuesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGetAllValuesResponse_descriptor_, &HashGetAllValuesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashLengthRequest_descriptor_, &HashLengthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashLengthResponse_descriptor_, &HashLengthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashSetRequest_descriptor_, &HashSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashSetResponse_descriptor_, &HashSetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashSetXRequest_descriptor_, &HashSetXRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashSetXResponse_descriptor_, &HashSetXResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashRemoveRequest_descriptor_, &HashRemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashRemoveResponse_descriptor_, &HashRemoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashExistsRequest_descriptor_, &HashExistsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashExistsResponse_descriptor_, &HashExistsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashRemoveAllRequest_descriptor_, &HashRemoveAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashRemoveAllResponse_descriptor_, &HashRemoveAllResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetAddRequest_descriptor_, &SetAddRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetAddResponse_descriptor_, &SetAddResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetLengthRequest_descriptor_, &SetLengthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetLengthResponse_descriptor_, &SetLengthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetIsMemberRequest_descriptor_, &SetIsMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetIsMemberResponse_descriptor_, &SetIsMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetGetAllRequest_descriptor_, &SetGetAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetGetAllResponse_descriptor_, &SetGetAllResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetRemoveRequest_descriptor_, &SetRemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetRemoveResponse_descriptor_, &SetRemoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetRemoveAllRequest_descriptor_, &SetRemoveAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetRemoveAllResponse_descriptor_, &SetRemoveAllResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uranium_2eproto() {
  delete Key::default_instance_;
  delete Key_reflection_;
  delete Value::default_instance_;
  delete Value_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete FieldValue::default_instance_;
  delete FieldValue_reflection_;
  delete KVGetRequest::default_instance_;
  delete KVGetRequest_reflection_;
  delete KVGetResponse::default_instance_;
  delete KVGetResponse_reflection_;
  delete KVSetRequest::default_instance_;
  delete KVSetRequest_reflection_;
  delete KVSetResponse::default_instance_;
  delete KVSetResponse_reflection_;
  delete KVRemoveRequest::default_instance_;
  delete KVRemoveRequest_reflection_;
  delete KVRemoveResponse::default_instance_;
  delete KVRemoveResponse_reflection_;
  delete ListLPushRequest::default_instance_;
  delete ListLPushRequest_reflection_;
  delete ListLPushResponse::default_instance_;
  delete ListLPushResponse_reflection_;
  delete ListLPopRequest::default_instance_;
  delete ListLPopRequest_reflection_;
  delete ListLPopResponse::default_instance_;
  delete ListLPopResponse_reflection_;
  delete ListRPushRequest::default_instance_;
  delete ListRPushRequest_reflection_;
  delete ListRPushResponse::default_instance_;
  delete ListRPushResponse_reflection_;
  delete ListRPopRequest::default_instance_;
  delete ListRPopRequest_reflection_;
  delete ListRPopResponse::default_instance_;
  delete ListRPopResponse_reflection_;
  delete ListLPushXRequest::default_instance_;
  delete ListLPushXRequest_reflection_;
  delete ListLPushXResponse::default_instance_;
  delete ListLPushXResponse_reflection_;
  delete ListRPushXRequest::default_instance_;
  delete ListRPushXRequest_reflection_;
  delete ListRPushXResponse::default_instance_;
  delete ListRPushXResponse_reflection_;
  delete ListIndexRequest::default_instance_;
  delete ListIndexRequest_reflection_;
  delete ListIndexResponse::default_instance_;
  delete ListIndexResponse_reflection_;
  delete ListSetRequest::default_instance_;
  delete ListSetRequest_reflection_;
  delete ListSetResponse::default_instance_;
  delete ListSetResponse_reflection_;
  delete ListRangeRequest::default_instance_;
  delete ListRangeRequest_reflection_;
  delete ListRangeResponse::default_instance_;
  delete ListRangeResponse_reflection_;
  delete ListLengthRequest::default_instance_;
  delete ListLengthRequest_reflection_;
  delete ListLengthResponse::default_instance_;
  delete ListLengthResponse_reflection_;
  delete ListRemoveAllRequest::default_instance_;
  delete ListRemoveAllRequest_reflection_;
  delete ListRemoveAllResponse::default_instance_;
  delete ListRemoveAllResponse_reflection_;
  delete HashGetRequest::default_instance_;
  delete HashGetRequest_reflection_;
  delete HashGetResponse::default_instance_;
  delete HashGetResponse_reflection_;
  delete HashGetAllRequest::default_instance_;
  delete HashGetAllRequest_reflection_;
  delete HashGetAllResponse::default_instance_;
  delete HashGetAllResponse_reflection_;
  delete HashGetAllFieldsRequest::default_instance_;
  delete HashGetAllFieldsRequest_reflection_;
  delete HashGetAllFieldsResponse::default_instance_;
  delete HashGetAllFieldsResponse_reflection_;
  delete HashGetAllValuesRequest::default_instance_;
  delete HashGetAllValuesRequest_reflection_;
  delete HashGetAllValuesResponse::default_instance_;
  delete HashGetAllValuesResponse_reflection_;
  delete HashLengthRequest::default_instance_;
  delete HashLengthRequest_reflection_;
  delete HashLengthResponse::default_instance_;
  delete HashLengthResponse_reflection_;
  delete HashSetRequest::default_instance_;
  delete HashSetRequest_reflection_;
  delete HashSetResponse::default_instance_;
  delete HashSetResponse_reflection_;
  delete HashSetXRequest::default_instance_;
  delete HashSetXRequest_reflection_;
  delete HashSetXResponse::default_instance_;
  delete HashSetXResponse_reflection_;
  delete HashRemoveRequest::default_instance_;
  delete HashRemoveRequest_reflection_;
  delete HashRemoveResponse::default_instance_;
  delete HashRemoveResponse_reflection_;
  delete HashExistsRequest::default_instance_;
  delete HashExistsRequest_reflection_;
  delete HashExistsResponse::default_instance_;
  delete HashExistsResponse_reflection_;
  delete HashRemoveAllRequest::default_instance_;
  delete HashRemoveAllRequest_reflection_;
  delete HashRemoveAllResponse::default_instance_;
  delete HashRemoveAllResponse_reflection_;
  delete SetAddRequest::default_instance_;
  delete SetAddRequest_reflection_;
  delete SetAddResponse::default_instance_;
  delete SetAddResponse_reflection_;
  delete SetLengthRequest::default_instance_;
  delete SetLengthRequest_reflection_;
  delete SetLengthResponse::default_instance_;
  delete SetLengthResponse_reflection_;
  delete SetIsMemberRequest::default_instance_;
  delete SetIsMemberRequest_reflection_;
  delete SetIsMemberResponse::default_instance_;
  delete SetIsMemberResponse_reflection_;
  delete SetGetAllRequest::default_instance_;
  delete SetGetAllRequest_reflection_;
  delete SetGetAllResponse::default_instance_;
  delete SetGetAllResponse_reflection_;
  delete SetRemoveRequest::default_instance_;
  delete SetRemoveRequest_reflection_;
  delete SetRemoveResponse::default_instance_;
  delete SetRemoveResponse_reflection_;
  delete SetRemoveAllRequest::default_instance_;
  delete SetRemoveAllRequest_reflection_;
  delete SetRemoveAllResponse::default_instance_;
  delete SetRemoveAllResponse_reflection_;
}

void protobuf_AddDesc_uranium_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::uranium::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ruranium.proto\022\013uranium.api\032\014common.pro"
    "to\"\022\n\003Key\022\013\n\003key\030\001 \001(\014\"\026\n\005Value\022\r\n\005value"
    "\030\001 \001(\014\"L\n\010KeyValue\022\035\n\003key\030\001 \001(\0132\020.uraniu"
    "m.api.Key\022!\n\005value\030\002 \001(\0132\022.uranium.api.V"
    "alue\"\026\n\005Field\022\r\n\005field\030\001 \001(\014\"P\n\nFieldVal"
    "ue\022\037\n\003key\030\001 \001(\0132\022.uranium.api.Field\022!\n\005v"
    "alue\030\002 \001(\0132\022.uranium.api.Value\"]\n\014KVGetR"
    "equest\022-\n\ntable_name\030\001 \001(\0132\031.uranium.com"
    "mon.TableName\022\036\n\004keys\030\002 \003(\0132\020.uranium.ap"
    "i.Key\"[\n\rKVGetResponse\022&\n\006status\030\001 \001(\0162\026"
    ".uranium.common.Status\022\"\n\003kvs\030\002 \003(\0132\025.ur"
    "anium.api.KeyValue\"a\n\014KVSetRequest\022-\n\nta"
    "ble_name\030\001 \001(\0132\031.uranium.common.TableNam"
    "e\022\"\n\003kvs\030\002 \003(\0132\025.uranium.api.KeyValue\"7\n"
    "\rKVSetResponse\022&\n\006status\030\001 \001(\0162\026.uranium"
    ".common.Status\"`\n\017KVRemoveRequest\022-\n\ntab"
    "le_name\030\001 \001(\0132\031.uranium.common.TableName"
    "\022\036\n\004keys\030\002 \003(\0132\020.uranium.api.Key\":\n\020KVRe"
    "moveResponse\022&\n\006status\030\001 \001(\0162\026.uranium.c"
    "ommon.Status\"\204\001\n\020ListLPushRequest\022-\n\ntab"
    "le_name\030\001 \001(\0132\031.uranium.common.TableName"
    "\022\035\n\003key\030\002 \001(\0132\020.uranium.api.Key\022\"\n\006value"
    "s\030\003 \003(\0132\022.uranium.api.Value\";\n\021ListLPush"
    "Response\022&\n\006status\030\001 \001(\0162\026.uranium.commo"
    "n.Status\"_\n\017ListLPopRequest\022-\n\ntable_nam"
    "e\030\001 \001(\0132\031.uranium.common.TableName\022\035\n\003ke"
    "y\030\002 \001(\0132\020.uranium.api.Key\"]\n\020ListLPopRes"
    "ponse\022&\n\006status\030\001 \001(\0162\026.uranium.common.S"
    "tatus\022!\n\005value\030\002 \001(\0132\022.uranium.api.Value"
    "\"\204\001\n\020ListRPushRequest\022-\n\ntable_name\030\001 \001("
    "\0132\031.uranium.common.TableName\022\035\n\003key\030\002 \001("
    "\0132\020.uranium.api.Key\022\"\n\006values\030\003 \003(\0132\022.ur"
    "anium.api.Value\";\n\021ListRPushResponse\022&\n\006"
    "status\030\001 \001(\0162\026.uranium.common.Status\"_\n\017"
    "ListRPopRequest\022-\n\ntable_name\030\001 \001(\0132\031.ur"
    "anium.common.TableName\022\035\n\003key\030\002 \001(\0132\020.ur"
    "anium.api.Key\"]\n\020ListRPopResponse\022&\n\006sta"
    "tus\030\001 \001(\0162\026.uranium.common.Status\022!\n\005val"
    "ue\030\002 \001(\0132\022.uranium.api.Value\"\205\001\n\021ListLPu"
    "shXRequest\022-\n\ntable_name\030\001 \001(\0132\031.uranium"
    ".common.TableName\022\035\n\003key\030\002 \001(\0132\020.uranium"
    ".api.Key\022\"\n\006values\030\003 \003(\0132\022.uranium.api.V"
    "alue\"<\n\022ListLPushXResponse\022&\n\006status\030\001 \001"
    "(\0162\026.uranium.common.Status\"\205\001\n\021ListRPush"
    "XRequest\022-\n\ntable_name\030\001 \001(\0132\031.uranium.c"
    "ommon.TableName\022\035\n\003key\030\002 \001(\0132\020.uranium.a"
    "pi.Key\022\"\n\006values\030\003 \003(\0132\022.uranium.api.Val"
    "ue\"<\n\022ListRPushXResponse\022&\n\006status\030\001 \001(\016"
    "2\026.uranium.common.Status\"o\n\020ListIndexReq"
    "uest\022-\n\ntable_name\030\001 \001(\0132\031.uranium.commo"
    "n.TableName\022\035\n\003key\030\002 \001(\0132\020.uranium.api.K"
    "ey\022\r\n\005index\030\003 \001(\003\"^\n\021ListIndexResponse\022&"
    "\n\006status\030\001 \001(\0162\026.uranium.common.Status\022!"
    "\n\005value\030\002 \001(\0132\022.uranium.api.Value\"\220\001\n\016Li"
    "stSetRequest\022-\n\ntable_name\030\001 \001(\0132\031.urani"
    "um.common.TableName\022\035\n\003key\030\002 \001(\0132\020.urani"
    "um.api.Key\022\r\n\005index\030\003 \001(\003\022!\n\005value\030\004 \001(\013"
    "2\022.uranium.api.Value\"9\n\017ListSetResponse\022"
    "&\n\006status\030\001 \001(\0162\026.uranium.common.Status\""
    "|\n\020ListRangeRequest\022-\n\ntable_name\030\001 \001(\0132"
    "\031.uranium.common.TableName\022\035\n\003key\030\002 \001(\0132"
    "\020.uranium.api.Key\022\r\n\005start\030\003 \001(\003\022\013\n\003end\030"
    "\004 \001(\003\"_\n\021ListRangeResponse\022&\n\006status\030\001 \001"
    "(\0162\026.uranium.common.Status\022\"\n\006values\030\002 \003"
    "(\0132\022.uranium.api.Value\"a\n\021ListLengthRequ"
    "est\022-\n\ntable_name\030\001 \001(\0132\031.uranium.common"
    ".TableName\022\035\n\003key\030\002 \001(\0132\020.uranium.api.Ke"
    "y\"L\n\022ListLengthResponse\022&\n\006status\030\001 \001(\0162"
    "\026.uranium.common.Status\022\016\n\006length\030\002 \001(\003\""
    "d\n\024ListRemoveAllRequest\022-\n\ntable_name\030\001 "
    "\001(\0132\031.uranium.common.TableName\022\035\n\003key\030\002 "
    "\001(\0132\020.uranium.api.Key\"\?\n\025ListRemoveAllRe"
    "sponse\022&\n\006status\030\001 \001(\0162\026.uranium.common."
    "Status\"\202\001\n\016HashGetRequest\022-\n\ntable_name\030"
    "\001 \001(\0132\031.uranium.common.TableName\022\035\n\003key\030"
    "\002 \001(\0132\020.uranium.api.Key\022\"\n\006fields\030\003 \003(\0132"
    "\022.uranium.api.Field\"_\n\017HashGetResponse\022&"
    "\n\006status\030\001 \001(\0162\026.uranium.common.Status\022$"
    "\n\003fvs\030\002 \003(\0132\027.uranium.api.FieldValue\"a\n\021"
    "HashGetAllRequest\022-\n\ntable_name\030\001 \001(\0132\031."
    "uranium.common.TableName\022\035\n\003key\030\002 \001(\0132\020."
    "uranium.api.Key\"b\n\022HashGetAllResponse\022&\n"
    "\006status\030\001 \001(\0162\026.uranium.common.Status\022$\n"
    "\003fvs\030\002 \003(\0132\027.uranium.api.FieldValue\"g\n\027H"
    "ashGetAllFieldsRequest\022-\n\ntable_name\030\001 \001"
    "(\0132\031.uranium.common.TableName\022\035\n\003key\030\002 \001"
    "(\0132\020.uranium.api.Key\"f\n\030HashGetAllFields"
    "Response\022&\n\006status\030\001 \001(\0162\026.uranium.commo"
    "n.Status\022\"\n\006fields\030\002 \003(\0132\022.uranium.api.F"
    "ield\"g\n\027HashGetAllValuesRequest\022-\n\ntable"
    "_name\030\001 \001(\0132\031.uranium.common.TableName\022\035"
    "\n\003key\030\002 \001(\0132\020.uranium.api.Key\"f\n\030HashGet"
    "AllValuesResponse\022&\n\006status\030\001 \001(\0162\026.uran"
    "ium.common.Status\022\"\n\006values\030\002 \003(\0132\022.uran"
    "ium.api.Value\"a\n\021HashLengthRequest\022-\n\nta"
    "ble_name\030\001 \001(\0132\031.uranium.common.TableNam"
    "e\022\035\n\003key\030\002 \001(\0132\020.uranium.api.Key\"L\n\022Hash"
    "LengthResponse\022&\n\006status\030\001 \001(\0162\026.uranium"
    ".common.Status\022\016\n\006length\030\002 \001(\003\"\204\001\n\016HashS"
    "etRequest\022-\n\ntable_name\030\001 \001(\0132\031.uranium."
    "common.TableName\022\035\n\003key\030\002 \001(\0132\020.uranium."
    "api.Key\022$\n\003fvs\030\003 \003(\0132\027.uranium.api.Field"
    "Value\"9\n\017HashSetResponse\022&\n\006status\030\001 \001(\016"
    "2\026.uranium.common.Status\"\204\001\n\017HashSetXReq"
    "uest\022-\n\ntable_name\030\001 \001(\0132\031.uranium.commo"
    "n.TableName\022\035\n\003key\030\002 \001(\0132\020.uranium.api.K"
    "ey\022#\n\002fv\030\003 \001(\0132\027.uranium.api.FieldValue\""
    ":\n\020HashSetXResponse\022&\n\006status\030\001 \001(\0162\026.ur"
    "anium.common.Status\"\205\001\n\021HashRemoveReques"
    "t\022-\n\ntable_name\030\001 \001(\0132\031.uranium.common.T"
    "ableName\022\035\n\003key\030\002 \001(\0132\020.uranium.api.Key\022"
    "\"\n\006fields\030\003 \003(\0132\022.uranium.api.Field\"<\n\022H"
    "ashRemoveResponse\022&\n\006status\030\001 \001(\0162\026.uran"
    "ium.common.Status\"\204\001\n\021HashExistsRequest\022"
    "-\n\ntable_name\030\001 \001(\0132\031.uranium.common.Tab"
    "leName\022\035\n\003key\030\002 \001(\0132\020.uranium.api.Key\022!\n"
    "\005field\030\003 \001(\0132\022.uranium.api.Field\"L\n\022Hash"
    "ExistsResponse\022&\n\006status\030\001 \001(\0162\026.uranium"
    ".common.Status\022\016\n\006exists\030\002 \001(\010\"d\n\024HashRe"
    "moveAllRequest\022-\n\ntable_name\030\001 \001(\0132\031.ura"
    "nium.common.TableName\022\035\n\003key\030\002 \001(\0132\020.ura"
    "nium.api.Key\"\?\n\025HashRemoveAllResponse\022&\n"
    "\006status\030\001 \001(\0162\026.uranium.common.Status\"\201\001"
    "\n\rSetAddRequest\022-\n\ntable_name\030\001 \001(\0132\031.ur"
    "anium.common.TableName\022\035\n\003key\030\002 \001(\0132\020.ur"
    "anium.api.Key\022\"\n\006values\030\003 \003(\0132\022.uranium."
    "api.Value\"8\n\016SetAddResponse\022&\n\006status\030\001 "
    "\001(\0162\026.uranium.common.Status\"`\n\020SetLength"
    "Request\022-\n\ntable_name\030\001 \001(\0132\031.uranium.co"
    "mmon.TableName\022\035\n\003key\030\002 \001(\0132\020.uranium.ap"
    "i.Key\"K\n\021SetLengthResponse\022&\n\006status\030\001 \001"
    "(\0162\026.uranium.common.Status\022\016\n\006length\030\002 \001"
    "(\003\"~\n\022SetIsMemberRequest\022&\n\006status\030\001 \001(\016"
    "2\026.uranium.common.Status\022\035\n\003key\030\002 \001(\0132\020."
    "uranium.api.Key\022!\n\005value\030\003 \001(\0132\022.uranium"
    ".api.Value\"J\n\023SetIsMemberResponse\022&\n\006sta"
    "tus\030\001 \001(\0162\026.uranium.common.Status\022\013\n\003yes"
    "\030\002 \001(\010\"`\n\020SetGetAllRequest\022-\n\ntable_name"
    "\030\001 \001(\0132\031.uranium.common.TableName\022\035\n\003key"
    "\030\002 \001(\0132\020.uranium.api.Key\"_\n\021SetGetAllRes"
    "ponse\022&\n\006status\030\001 \001(\0162\026.uranium.common.S"
    "tatus\022\"\n\006values\030\002 \003(\0132\022.uranium.api.Valu"
    "e\"\204\001\n\020SetRemoveRequest\022-\n\ntable_name\030\001 \001"
    "(\0132\031.uranium.common.TableName\022\035\n\003key\030\002 \001"
    "(\0132\020.uranium.api.Key\022\"\n\006values\030\003 \003(\0132\022.u"
    "ranium.api.Value\";\n\021SetRemoveResponse\022&\n"
    "\006status\030\001 \001(\0162\026.uranium.common.Status\"c\n"
    "\023SetRemoveAllRequest\022-\n\ntable_name\030\001 \001(\013"
    "2\031.uranium.common.TableName\022\035\n\003key\030\002 \001(\013"
    "2\020.uranium.api.Key\">\n\024SetRemoveAllRespon"
    "se\022&\n\006status\030\001 \001(\0162\026.uranium.common.Stat"
    "us2\345\022\n\030UraniumSchemalessService\022@\n\005KVGet"
    "\022\031.uranium.api.KVGetRequest\032\032.uranium.ap"
    "i.KVGetResponse\"\000\022@\n\005KVSet\022\031.uranium.api"
    ".KVSetRequest\032\032.uranium.api.KVSetRespons"
    "e\"\000\022I\n\010KVRemove\022\034.uranium.api.KVRemoveRe"
    "quest\032\035.uranium.api.KVRemoveResponse\"\000\022L"
    "\n\tListLPush\022\035.uranium.api.ListLPushReque"
    "st\032\036.uranium.api.ListLPushResponse\"\000\022I\n\010"
    "ListLPop\022\034.uranium.api.ListLPopRequest\032\035"
    ".uranium.api.ListLPopResponse\"\000\022L\n\tListR"
    "Push\022\035.uranium.api.ListRPushRequest\032\036.ur"
    "anium.api.ListRPushResponse\"\000\022I\n\010ListRPo"
    "p\022\034.uranium.api.ListRPopRequest\032\035.uraniu"
    "m.api.ListRPopResponse\"\000\022O\n\nListLPushX\022\036"
    ".uranium.api.ListLPushXRequest\032\037.uranium"
    ".api.ListLPushXResponse\"\000\022O\n\nListRPushX\022"
    "\036.uranium.api.ListRPushXRequest\032\037.uraniu"
    "m.api.ListRPushXResponse\"\000\022L\n\tListIndex\022"
    "\035.uranium.api.ListIndexRequest\032\036.uranium"
    ".api.ListIndexResponse\"\000\022F\n\007ListSet\022\033.ur"
    "anium.api.ListSetRequest\032\034.uranium.api.L"
    "istSetResponse\"\000\022L\n\tListRange\022\035.uranium."
    "api.ListRangeRequest\032\036.uranium.api.ListR"
    "angeResponse\"\000\022O\n\nListLength\022\036.uranium.a"
    "pi.ListLengthRequest\032\037.uranium.api.ListL"
    "engthResponse\"\000\022X\n\rListRemoveAll\022!.urani"
    "um.api.ListRemoveAllRequest\032\".uranium.ap"
    "i.ListRemoveAllResponse\"\000\022F\n\007HashGet\022\033.u"
    "ranium.api.HashGetRequest\032\034.uranium.api."
    "HashGetResponse\"\000\022O\n\nHashGetAll\022\036.uraniu"
    "m.api.HashGetAllRequest\032\037.uranium.api.Ha"
    "shGetAllResponse\"\000\022a\n\020HashGetAllFields\022$"
    ".uranium.api.HashGetAllFieldsRequest\032%.u"
    "ranium.api.HashGetAllFieldsResponse\"\000\022a\n"
    "\020HashGetAllValues\022$.uranium.api.HashGetA"
    "llValuesRequest\032%.uranium.api.HashGetAll"
    "ValuesResponse\"\000\022O\n\nHashLength\022\036.uranium"
    ".api.HashLengthRequest\032\037.uranium.api.Has"
    "hLengthResponse\"\000\022F\n\007HashSet\022\033.uranium.a"
    "pi.HashSetRequest\032\034.uranium.api.HashSetR"
    "esponse\"\000\022I\n\010HashSetX\022\034.uranium.api.Hash"
    "SetXRequest\032\035.uranium.api.HashSetXRespon"
    "se\"\000\022O\n\nHashRemove\022\036.uranium.api.HashRem"
    "oveRequest\032\037.uranium.api.HashRemoveRespo"
    "nse\"\000\022O\n\nHashExists\022\036.uranium.api.HashEx"
    "istsRequest\032\037.uranium.api.HashExistsResp"
    "onse\"\000\022X\n\rHashRemoveAll\022!.uranium.api.Ha"
    "shRemoveAllRequest\032\".uranium.api.HashRem"
    "oveAllResponse\"\000\022C\n\006SetAdd\022\032.uranium.api"
    ".SetAddRequest\032\033.uranium.api.SetAddRespo"
    "nse\"\000\022L\n\tSetLength\022\035.uranium.api.SetLeng"
    "thRequest\032\036.uranium.api.SetLengthRespons"
    "e\"\000\022R\n\013SetIsMember\022\037.uranium.api.SetIsMe"
    "mberRequest\032 .uranium.api.SetIsMemberRes"
    "ponse\"\000\022L\n\tSetGetAll\022\035.uranium.api.SetGe"
    "tAllRequest\032\036.uranium.api.SetGetAllRespo"
    "nse\"\000\022L\n\tSetRemove\022\035.uranium.api.SetRemo"
    "veRequest\032\036.uranium.api.SetRemoveRespons"
    "e\"\000\022U\n\014SetRemoveAll\022 .uranium.api.SetRem"
    "oveAllRequest\032!.uranium.api.SetRemoveAll"
    "Response\"\0002\026\n\024UraniumSchemaServiceb\006prot"
    "o3", 8482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uranium.proto", &protobuf_RegisterTypes);
  Key::default_instance_ = new Key();
  Value::default_instance_ = new Value();
  KeyValue::default_instance_ = new KeyValue();
  Field::default_instance_ = new Field();
  FieldValue::default_instance_ = new FieldValue();
  KVGetRequest::default_instance_ = new KVGetRequest();
  KVGetResponse::default_instance_ = new KVGetResponse();
  KVSetRequest::default_instance_ = new KVSetRequest();
  KVSetResponse::default_instance_ = new KVSetResponse();
  KVRemoveRequest::default_instance_ = new KVRemoveRequest();
  KVRemoveResponse::default_instance_ = new KVRemoveResponse();
  ListLPushRequest::default_instance_ = new ListLPushRequest();
  ListLPushResponse::default_instance_ = new ListLPushResponse();
  ListLPopRequest::default_instance_ = new ListLPopRequest();
  ListLPopResponse::default_instance_ = new ListLPopResponse();
  ListRPushRequest::default_instance_ = new ListRPushRequest();
  ListRPushResponse::default_instance_ = new ListRPushResponse();
  ListRPopRequest::default_instance_ = new ListRPopRequest();
  ListRPopResponse::default_instance_ = new ListRPopResponse();
  ListLPushXRequest::default_instance_ = new ListLPushXRequest();
  ListLPushXResponse::default_instance_ = new ListLPushXResponse();
  ListRPushXRequest::default_instance_ = new ListRPushXRequest();
  ListRPushXResponse::default_instance_ = new ListRPushXResponse();
  ListIndexRequest::default_instance_ = new ListIndexRequest();
  ListIndexResponse::default_instance_ = new ListIndexResponse();
  ListSetRequest::default_instance_ = new ListSetRequest();
  ListSetResponse::default_instance_ = new ListSetResponse();
  ListRangeRequest::default_instance_ = new ListRangeRequest();
  ListRangeResponse::default_instance_ = new ListRangeResponse();
  ListLengthRequest::default_instance_ = new ListLengthRequest();
  ListLengthResponse::default_instance_ = new ListLengthResponse();
  ListRemoveAllRequest::default_instance_ = new ListRemoveAllRequest();
  ListRemoveAllResponse::default_instance_ = new ListRemoveAllResponse();
  HashGetRequest::default_instance_ = new HashGetRequest();
  HashGetResponse::default_instance_ = new HashGetResponse();
  HashGetAllRequest::default_instance_ = new HashGetAllRequest();
  HashGetAllResponse::default_instance_ = new HashGetAllResponse();
  HashGetAllFieldsRequest::default_instance_ = new HashGetAllFieldsRequest();
  HashGetAllFieldsResponse::default_instance_ = new HashGetAllFieldsResponse();
  HashGetAllValuesRequest::default_instance_ = new HashGetAllValuesRequest();
  HashGetAllValuesResponse::default_instance_ = new HashGetAllValuesResponse();
  HashLengthRequest::default_instance_ = new HashLengthRequest();
  HashLengthResponse::default_instance_ = new HashLengthResponse();
  HashSetRequest::default_instance_ = new HashSetRequest();
  HashSetResponse::default_instance_ = new HashSetResponse();
  HashSetXRequest::default_instance_ = new HashSetXRequest();
  HashSetXResponse::default_instance_ = new HashSetXResponse();
  HashRemoveRequest::default_instance_ = new HashRemoveRequest();
  HashRemoveResponse::default_instance_ = new HashRemoveResponse();
  HashExistsRequest::default_instance_ = new HashExistsRequest();
  HashExistsResponse::default_instance_ = new HashExistsResponse();
  HashRemoveAllRequest::default_instance_ = new HashRemoveAllRequest();
  HashRemoveAllResponse::default_instance_ = new HashRemoveAllResponse();
  SetAddRequest::default_instance_ = new SetAddRequest();
  SetAddResponse::default_instance_ = new SetAddResponse();
  SetLengthRequest::default_instance_ = new SetLengthRequest();
  SetLengthResponse::default_instance_ = new SetLengthResponse();
  SetIsMemberRequest::default_instance_ = new SetIsMemberRequest();
  SetIsMemberResponse::default_instance_ = new SetIsMemberResponse();
  SetGetAllRequest::default_instance_ = new SetGetAllRequest();
  SetGetAllResponse::default_instance_ = new SetGetAllResponse();
  SetRemoveRequest::default_instance_ = new SetRemoveRequest();
  SetRemoveResponse::default_instance_ = new SetRemoveResponse();
  SetRemoveAllRequest::default_instance_ = new SetRemoveAllRequest();
  SetRemoveAllResponse::default_instance_ = new SetRemoveAllResponse();
  Key::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  FieldValue::default_instance_->InitAsDefaultInstance();
  KVGetRequest::default_instance_->InitAsDefaultInstance();
  KVGetResponse::default_instance_->InitAsDefaultInstance();
  KVSetRequest::default_instance_->InitAsDefaultInstance();
  KVSetResponse::default_instance_->InitAsDefaultInstance();
  KVRemoveRequest::default_instance_->InitAsDefaultInstance();
  KVRemoveResponse::default_instance_->InitAsDefaultInstance();
  ListLPushRequest::default_instance_->InitAsDefaultInstance();
  ListLPushResponse::default_instance_->InitAsDefaultInstance();
  ListLPopRequest::default_instance_->InitAsDefaultInstance();
  ListLPopResponse::default_instance_->InitAsDefaultInstance();
  ListRPushRequest::default_instance_->InitAsDefaultInstance();
  ListRPushResponse::default_instance_->InitAsDefaultInstance();
  ListRPopRequest::default_instance_->InitAsDefaultInstance();
  ListRPopResponse::default_instance_->InitAsDefaultInstance();
  ListLPushXRequest::default_instance_->InitAsDefaultInstance();
  ListLPushXResponse::default_instance_->InitAsDefaultInstance();
  ListRPushXRequest::default_instance_->InitAsDefaultInstance();
  ListRPushXResponse::default_instance_->InitAsDefaultInstance();
  ListIndexRequest::default_instance_->InitAsDefaultInstance();
  ListIndexResponse::default_instance_->InitAsDefaultInstance();
  ListSetRequest::default_instance_->InitAsDefaultInstance();
  ListSetResponse::default_instance_->InitAsDefaultInstance();
  ListRangeRequest::default_instance_->InitAsDefaultInstance();
  ListRangeResponse::default_instance_->InitAsDefaultInstance();
  ListLengthRequest::default_instance_->InitAsDefaultInstance();
  ListLengthResponse::default_instance_->InitAsDefaultInstance();
  ListRemoveAllRequest::default_instance_->InitAsDefaultInstance();
  ListRemoveAllResponse::default_instance_->InitAsDefaultInstance();
  HashGetRequest::default_instance_->InitAsDefaultInstance();
  HashGetResponse::default_instance_->InitAsDefaultInstance();
  HashGetAllRequest::default_instance_->InitAsDefaultInstance();
  HashGetAllResponse::default_instance_->InitAsDefaultInstance();
  HashGetAllFieldsRequest::default_instance_->InitAsDefaultInstance();
  HashGetAllFieldsResponse::default_instance_->InitAsDefaultInstance();
  HashGetAllValuesRequest::default_instance_->InitAsDefaultInstance();
  HashGetAllValuesResponse::default_instance_->InitAsDefaultInstance();
  HashLengthRequest::default_instance_->InitAsDefaultInstance();
  HashLengthResponse::default_instance_->InitAsDefaultInstance();
  HashSetRequest::default_instance_->InitAsDefaultInstance();
  HashSetResponse::default_instance_->InitAsDefaultInstance();
  HashSetXRequest::default_instance_->InitAsDefaultInstance();
  HashSetXResponse::default_instance_->InitAsDefaultInstance();
  HashRemoveRequest::default_instance_->InitAsDefaultInstance();
  HashRemoveResponse::default_instance_->InitAsDefaultInstance();
  HashExistsRequest::default_instance_->InitAsDefaultInstance();
  HashExistsResponse::default_instance_->InitAsDefaultInstance();
  HashRemoveAllRequest::default_instance_->InitAsDefaultInstance();
  HashRemoveAllResponse::default_instance_->InitAsDefaultInstance();
  SetAddRequest::default_instance_->InitAsDefaultInstance();
  SetAddResponse::default_instance_->InitAsDefaultInstance();
  SetLengthRequest::default_instance_->InitAsDefaultInstance();
  SetLengthResponse::default_instance_->InitAsDefaultInstance();
  SetIsMemberRequest::default_instance_->InitAsDefaultInstance();
  SetIsMemberResponse::default_instance_->InitAsDefaultInstance();
  SetGetAllRequest::default_instance_->InitAsDefaultInstance();
  SetGetAllResponse::default_instance_->InitAsDefaultInstance();
  SetRemoveRequest::default_instance_->InitAsDefaultInstance();
  SetRemoveResponse::default_instance_->InitAsDefaultInstance();
  SetRemoveAllRequest::default_instance_->InitAsDefaultInstance();
  SetRemoveAllResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uranium_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uranium_2eproto {
  StaticDescriptorInitializer_uranium_2eproto() {
    protobuf_AddDesc_uranium_2eproto();
  }
} static_descriptor_initializer_uranium_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key::Key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.Key)
}

void Key::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Key::Key(const Key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.Key)
}

void Key::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:uranium.api.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Key_descriptor_;
}

const Key& Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

Key* Key::default_instance_ = NULL;

Key* Key::New(::google::protobuf::Arena* arena) const {
  Key* n = new Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.Key)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.Key)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.Key)
}

::google::protobuf::uint8* Key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.Key)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.Key)
  return target;
}

int Key::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.Key)
  int total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Key* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {

  return true;
}

void Key::Swap(Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key::InternalSwap(Key* other) {
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Key_descriptor_;
  metadata.reflection = Key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// optional bytes key = 1;
void Key::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Key::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.Key.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Key::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.api.Key.key)
}
 void Key::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.api.Key.key)
}
 void Key::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.api.Key.key)
}
 ::std::string* Key::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:uranium.api.Key.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Key::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.Key.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Key::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:uranium.api.Key.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.Value)
}

void Value::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Value::Value(const Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.Value)
}

void Value::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:uranium.api.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.Value)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.Value)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.Value)
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.Value)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.Value)
  return target;
}

int Value::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.Value)
  int total_size = 0;

  // optional bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.Value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.Value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {

  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// optional bytes value = 1;
void Value::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:uranium.api.Value.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.api.Value.value)
}
 void Value::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.api.Value.value)
}
 void Value::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.api.Value.value)
}
 ::std::string* Value::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:uranium.api.Value.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:uranium.api.Value.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:uranium.api.Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
  value_ = const_cast< ::uranium::api::Value*>(&::uranium::api::Value::default_instance());
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.KeyValue)
}

void KeyValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_ = NULL;
  value_ = NULL;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:uranium.api.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete value_;
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.KeyValue)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.api.Key key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .uranium.api.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.KeyValue)
  // optional .uranium.api.Key key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.KeyValue)
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.KeyValue)
  // optional .uranium.api.Key key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->key_, target);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.KeyValue)
  return target;
}

int KeyValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.KeyValue)
  int total_size = 0;

  // optional .uranium.api.Key key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.KeyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.KeyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
  if (from.has_value()) {
    mutable_value()->::uranium::api::Value::MergeFrom(from.value());
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// optional .uranium.api.Key key = 1;
bool KeyValue::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void KeyValue::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.KeyValue.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* KeyValue::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.KeyValue.key)
  return key_;
}
::uranium::api::Key* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.KeyValue.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void KeyValue::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.KeyValue.key)
}

// optional .uranium.api.Value value = 2;
bool KeyValue::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void KeyValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::uranium::api::Value& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:uranium.api.KeyValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::uranium::api::Value* KeyValue::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::uranium::api::Value;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.KeyValue.value)
  return value_;
}
::uranium::api::Value* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:uranium.api.KeyValue.value)
  
  ::uranium::api::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void KeyValue::set_allocated_value(::uranium::api::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.KeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Field::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Field::Field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.Field)
}

void Field::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Field::Field(const Field& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.Field)
}

void Field::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:uranium.api.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New(::google::protobuf::Arena* arena) const {
  Field* n = new Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.Field)
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes field = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.Field)
  // optional bytes field = 1;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->field(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.Field)
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.Field)
  // optional bytes field = 1;
  if (this->field().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->field(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.Field)
  return target;
}

int Field::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.Field)
  int total_size = 0;

  // optional bytes field = 1;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->field());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.Field)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Field* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.Field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.Field)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  return true;
}

void Field::Swap(Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Field::InternalSwap(Field* other) {
  field_.Swap(&other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Field

// optional bytes field = 1;
void Field::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Field::field() const {
  // @@protoc_insertion_point(field_get:uranium.api.Field.field)
  return field_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.api.Field.field)
}
 void Field::set_field(const char* value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.api.Field.field)
}
 void Field::set_field(const void* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.api.Field.field)
}
 ::std::string* Field::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:uranium.api.Field.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Field::release_field() {
  // @@protoc_insertion_point(field_release:uranium.api.Field.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:uranium.api.Field.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldValue::kKeyFieldNumber;
const int FieldValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldValue::FieldValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.FieldValue)
}

void FieldValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::uranium::api::Field*>(&::uranium::api::Field::default_instance());
  value_ = const_cast< ::uranium::api::Value*>(&::uranium::api::Value::default_instance());
}

FieldValue::FieldValue(const FieldValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.FieldValue)
}

void FieldValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_ = NULL;
  value_ = NULL;
}

FieldValue::~FieldValue() {
  // @@protoc_insertion_point(destructor:uranium.api.FieldValue)
  SharedDtor();
}

void FieldValue::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete value_;
  }
}

void FieldValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldValue_descriptor_;
}

const FieldValue& FieldValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

FieldValue* FieldValue::default_instance_ = NULL;

FieldValue* FieldValue::New(::google::protobuf::Arena* arena) const {
  FieldValue* n = new FieldValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldValue::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.FieldValue)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool FieldValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.FieldValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.api.Field key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .uranium.api.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.FieldValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.FieldValue)
  return false;
#undef DO_
}

void FieldValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.FieldValue)
  // optional .uranium.api.Field key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.FieldValue)
}

::google::protobuf::uint8* FieldValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.FieldValue)
  // optional .uranium.api.Field key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->key_, target);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.FieldValue)
  return target;
}

int FieldValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.FieldValue)
  int total_size = 0;

  // optional .uranium.api.Field key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.FieldValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FieldValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.FieldValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.FieldValue)
    MergeFrom(*source);
  }
}

void FieldValue::MergeFrom(const FieldValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.FieldValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_key()) {
    mutable_key()->::uranium::api::Field::MergeFrom(from.key());
  }
  if (from.has_value()) {
    mutable_value()->::uranium::api::Value::MergeFrom(from.value());
  }
}

void FieldValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.FieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldValue::CopyFrom(const FieldValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.FieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldValue::IsInitialized() const {

  return true;
}

void FieldValue::Swap(FieldValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldValue::InternalSwap(FieldValue* other) {
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldValue_descriptor_;
  metadata.reflection = FieldValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldValue

// optional .uranium.api.Field key = 1;
bool FieldValue::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void FieldValue::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Field& FieldValue::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.FieldValue.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Field* FieldValue::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Field;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.FieldValue.key)
  return key_;
}
::uranium::api::Field* FieldValue::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.FieldValue.key)
  
  ::uranium::api::Field* temp = key_;
  key_ = NULL;
  return temp;
}
void FieldValue::set_allocated_key(::uranium::api::Field* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.FieldValue.key)
}

// optional .uranium.api.Value value = 2;
bool FieldValue::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void FieldValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::uranium::api::Value& FieldValue::value() const {
  // @@protoc_insertion_point(field_get:uranium.api.FieldValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::uranium::api::Value* FieldValue::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::uranium::api::Value;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.FieldValue.value)
  return value_;
}
::uranium::api::Value* FieldValue::release_value() {
  // @@protoc_insertion_point(field_release:uranium.api.FieldValue.value)
  
  ::uranium::api::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void FieldValue::set_allocated_value(::uranium::api::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.FieldValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVGetRequest::kTableNameFieldNumber;
const int KVGetRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVGetRequest::KVGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.KVGetRequest)
}

void KVGetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
}

KVGetRequest::KVGetRequest(const KVGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.KVGetRequest)
}

void KVGetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
}

KVGetRequest::~KVGetRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.KVGetRequest)
  SharedDtor();
}

void KVGetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void KVGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVGetRequest_descriptor_;
}

const KVGetRequest& KVGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

KVGetRequest* KVGetRequest::default_instance_ = NULL;

KVGetRequest* KVGetRequest::New(::google::protobuf::Arena* arena) const {
  KVGetRequest* n = new KVGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.KVGetRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  keys_.Clear();
}

bool KVGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.KVGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated .uranium.api.Key keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.KVGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.KVGetRequest)
  return false;
#undef DO_
}

void KVGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.KVGetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // repeated .uranium.api.Key keys = 2;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.KVGetRequest)
}

::google::protobuf::uint8* KVGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.KVGetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // repeated .uranium.api.Key keys = 2;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->keys(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.KVGetRequest)
  return target;
}

int KVGetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.KVGetRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // repeated .uranium.api.Key keys = 2;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.KVGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KVGetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KVGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.KVGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.KVGetRequest)
    MergeFrom(*source);
  }
}

void KVGetRequest::MergeFrom(const KVGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.KVGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
}

void KVGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.KVGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVGetRequest::CopyFrom(const KVGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.KVGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVGetRequest::IsInitialized() const {

  return true;
}

void KVGetRequest::Swap(KVGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVGetRequest::InternalSwap(KVGetRequest* other) {
  std::swap(table_name_, other->table_name_);
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVGetRequest_descriptor_;
  metadata.reflection = KVGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVGetRequest

// optional .uranium.common.TableName table_name = 1;
bool KVGetRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void KVGetRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& KVGetRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.KVGetRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* KVGetRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.KVGetRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* KVGetRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.KVGetRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void KVGetRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.KVGetRequest.table_name)
}

// repeated .uranium.api.Key keys = 2;
int KVGetRequest::keys_size() const {
  return keys_.size();
}
void KVGetRequest::clear_keys() {
  keys_.Clear();
}
const ::uranium::api::Key& KVGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.KVGetRequest.keys)
  return keys_.Get(index);
}
::uranium::api::Key* KVGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.KVGetRequest.keys)
  return keys_.Mutable(index);
}
::uranium::api::Key* KVGetRequest::add_keys() {
  // @@protoc_insertion_point(field_add:uranium.api.KVGetRequest.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Key >*
KVGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.KVGetRequest.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Key >&
KVGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:uranium.api.KVGetRequest.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVGetResponse::kStatusFieldNumber;
const int KVGetResponse::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVGetResponse::KVGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.KVGetResponse)
}

void KVGetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KVGetResponse::KVGetResponse(const KVGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.KVGetResponse)
}

void KVGetResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

KVGetResponse::~KVGetResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.KVGetResponse)
  SharedDtor();
}

void KVGetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KVGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVGetResponse_descriptor_;
}

const KVGetResponse& KVGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

KVGetResponse* KVGetResponse::default_instance_ = NULL;

KVGetResponse* KVGetResponse::New(::google::protobuf::Arena* arena) const {
  KVGetResponse* n = new KVGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.KVGetResponse)
  status_ = 0;
  kvs_.Clear();
}

bool KVGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.KVGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        break;
      }

      // repeated .uranium.api.KeyValue kvs = 2;
      case 2: {
        if (tag == 18) {
         parse_kvs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_kvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.KVGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.KVGetResponse)
  return false;
#undef DO_
}

void KVGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.KVGetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .uranium.api.KeyValue kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.KVGetResponse)
}

::google::protobuf::uint8* KVGetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.KVGetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .uranium.api.KeyValue kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kvs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.KVGetResponse)
  return target;
}

int KVGetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.KVGetResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated .uranium.api.KeyValue kvs = 2;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.KVGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KVGetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KVGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.KVGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.KVGetResponse)
    MergeFrom(*source);
  }
}

void KVGetResponse::MergeFrom(const KVGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.KVGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  kvs_.MergeFrom(from.kvs_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void KVGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.KVGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVGetResponse::CopyFrom(const KVGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.KVGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVGetResponse::IsInitialized() const {

  return true;
}

void KVGetResponse::Swap(KVGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVGetResponse::InternalSwap(KVGetResponse* other) {
  std::swap(status_, other->status_);
  kvs_.UnsafeArenaSwap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVGetResponse_descriptor_;
  metadata.reflection = KVGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVGetResponse

// optional .uranium.common.Status status = 1;
void KVGetResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status KVGetResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.KVGetResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void KVGetResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.KVGetResponse.status)
}

// repeated .uranium.api.KeyValue kvs = 2;
int KVGetResponse::kvs_size() const {
  return kvs_.size();
}
void KVGetResponse::clear_kvs() {
  kvs_.Clear();
}
const ::uranium::api::KeyValue& KVGetResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.KVGetResponse.kvs)
  return kvs_.Get(index);
}
::uranium::api::KeyValue* KVGetResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.KVGetResponse.kvs)
  return kvs_.Mutable(index);
}
::uranium::api::KeyValue* KVGetResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:uranium.api.KVGetResponse.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::KeyValue >*
KVGetResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.KVGetResponse.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::KeyValue >&
KVGetResponse::kvs() const {
  // @@protoc_insertion_point(field_list:uranium.api.KVGetResponse.kvs)
  return kvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVSetRequest::kTableNameFieldNumber;
const int KVSetRequest::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVSetRequest::KVSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.KVSetRequest)
}

void KVSetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
}

KVSetRequest::KVSetRequest(const KVSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.KVSetRequest)
}

void KVSetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
}

KVSetRequest::~KVSetRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.KVSetRequest)
  SharedDtor();
}

void KVSetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void KVSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVSetRequest_descriptor_;
}

const KVSetRequest& KVSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

KVSetRequest* KVSetRequest::default_instance_ = NULL;

KVSetRequest* KVSetRequest::New(::google::protobuf::Arena* arena) const {
  KVSetRequest* n = new KVSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.KVSetRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  kvs_.Clear();
}

bool KVSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.KVSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        break;
      }

      // repeated .uranium.api.KeyValue kvs = 2;
      case 2: {
        if (tag == 18) {
         parse_kvs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_kvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.KVSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.KVSetRequest)
  return false;
#undef DO_
}

void KVSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.KVSetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // repeated .uranium.api.KeyValue kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.KVSetRequest)
}

::google::protobuf::uint8* KVSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.KVSetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // repeated .uranium.api.KeyValue kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kvs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.KVSetRequest)
  return target;
}

int KVSetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.KVSetRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // repeated .uranium.api.KeyValue kvs = 2;
  total_size += 1 * this->kvs_size();
  for (int i = 0; i < this->kvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.KVSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KVSetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KVSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.KVSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.KVSetRequest)
    MergeFrom(*source);
  }
}

void KVSetRequest::MergeFrom(const KVSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.KVSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  kvs_.MergeFrom(from.kvs_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
}

void KVSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.KVSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVSetRequest::CopyFrom(const KVSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.KVSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVSetRequest::IsInitialized() const {

  return true;
}

void KVSetRequest::Swap(KVSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVSetRequest::InternalSwap(KVSetRequest* other) {
  std::swap(table_name_, other->table_name_);
  kvs_.UnsafeArenaSwap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVSetRequest_descriptor_;
  metadata.reflection = KVSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVSetRequest

// optional .uranium.common.TableName table_name = 1;
bool KVSetRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void KVSetRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& KVSetRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.KVSetRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* KVSetRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.KVSetRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* KVSetRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.KVSetRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void KVSetRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.KVSetRequest.table_name)
}

// repeated .uranium.api.KeyValue kvs = 2;
int KVSetRequest::kvs_size() const {
  return kvs_.size();
}
void KVSetRequest::clear_kvs() {
  kvs_.Clear();
}
const ::uranium::api::KeyValue& KVSetRequest::kvs(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.KVSetRequest.kvs)
  return kvs_.Get(index);
}
::uranium::api::KeyValue* KVSetRequest::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.KVSetRequest.kvs)
  return kvs_.Mutable(index);
}
::uranium::api::KeyValue* KVSetRequest::add_kvs() {
  // @@protoc_insertion_point(field_add:uranium.api.KVSetRequest.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::KeyValue >*
KVSetRequest::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.KVSetRequest.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::KeyValue >&
KVSetRequest::kvs() const {
  // @@protoc_insertion_point(field_list:uranium.api.KVSetRequest.kvs)
  return kvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVSetResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVSetResponse::KVSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.KVSetResponse)
}

void KVSetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KVSetResponse::KVSetResponse(const KVSetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.KVSetResponse)
}

void KVSetResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

KVSetResponse::~KVSetResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.KVSetResponse)
  SharedDtor();
}

void KVSetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KVSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVSetResponse_descriptor_;
}

const KVSetResponse& KVSetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

KVSetResponse* KVSetResponse::default_instance_ = NULL;

KVSetResponse* KVSetResponse::New(::google::protobuf::Arena* arena) const {
  KVSetResponse* n = new KVSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.KVSetResponse)
  status_ = 0;
}

bool KVSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.KVSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.KVSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.KVSetResponse)
  return false;
#undef DO_
}

void KVSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.KVSetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.KVSetResponse)
}

::google::protobuf::uint8* KVSetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.KVSetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.KVSetResponse)
  return target;
}

int KVSetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.KVSetResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.KVSetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KVSetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KVSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.KVSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.KVSetResponse)
    MergeFrom(*source);
  }
}

void KVSetResponse::MergeFrom(const KVSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.KVSetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void KVSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.KVSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVSetResponse::CopyFrom(const KVSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.KVSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVSetResponse::IsInitialized() const {

  return true;
}

void KVSetResponse::Swap(KVSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVSetResponse::InternalSwap(KVSetResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVSetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVSetResponse_descriptor_;
  metadata.reflection = KVSetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVSetResponse

// optional .uranium.common.Status status = 1;
void KVSetResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status KVSetResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.KVSetResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void KVSetResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.KVSetResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVRemoveRequest::kTableNameFieldNumber;
const int KVRemoveRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVRemoveRequest::KVRemoveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.KVRemoveRequest)
}

void KVRemoveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
}

KVRemoveRequest::KVRemoveRequest(const KVRemoveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.KVRemoveRequest)
}

void KVRemoveRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
}

KVRemoveRequest::~KVRemoveRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.KVRemoveRequest)
  SharedDtor();
}

void KVRemoveRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
  }
}

void KVRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVRemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVRemoveRequest_descriptor_;
}

const KVRemoveRequest& KVRemoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

KVRemoveRequest* KVRemoveRequest::default_instance_ = NULL;

KVRemoveRequest* KVRemoveRequest::New(::google::protobuf::Arena* arena) const {
  KVRemoveRequest* n = new KVRemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVRemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.KVRemoveRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  keys_.Clear();
}

bool KVRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.KVRemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated .uranium.api.Key keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.KVRemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.KVRemoveRequest)
  return false;
#undef DO_
}

void KVRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.KVRemoveRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // repeated .uranium.api.Key keys = 2;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.KVRemoveRequest)
}

::google::protobuf::uint8* KVRemoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.KVRemoveRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // repeated .uranium.api.Key keys = 2;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->keys(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.KVRemoveRequest)
  return target;
}

int KVRemoveRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.KVRemoveRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // repeated .uranium.api.Key keys = 2;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.KVRemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KVRemoveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KVRemoveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.KVRemoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.KVRemoveRequest)
    MergeFrom(*source);
  }
}

void KVRemoveRequest::MergeFrom(const KVRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.KVRemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
}

void KVRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.KVRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVRemoveRequest::CopyFrom(const KVRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.KVRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRemoveRequest::IsInitialized() const {

  return true;
}

void KVRemoveRequest::Swap(KVRemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVRemoveRequest::InternalSwap(KVRemoveRequest* other) {
  std::swap(table_name_, other->table_name_);
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVRemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVRemoveRequest_descriptor_;
  metadata.reflection = KVRemoveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVRemoveRequest

// optional .uranium.common.TableName table_name = 1;
bool KVRemoveRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void KVRemoveRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& KVRemoveRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.KVRemoveRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* KVRemoveRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.KVRemoveRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* KVRemoveRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.KVRemoveRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void KVRemoveRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.KVRemoveRequest.table_name)
}

// repeated .uranium.api.Key keys = 2;
int KVRemoveRequest::keys_size() const {
  return keys_.size();
}
void KVRemoveRequest::clear_keys() {
  keys_.Clear();
}
const ::uranium::api::Key& KVRemoveRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.KVRemoveRequest.keys)
  return keys_.Get(index);
}
::uranium::api::Key* KVRemoveRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.KVRemoveRequest.keys)
  return keys_.Mutable(index);
}
::uranium::api::Key* KVRemoveRequest::add_keys() {
  // @@protoc_insertion_point(field_add:uranium.api.KVRemoveRequest.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Key >*
KVRemoveRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.KVRemoveRequest.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Key >&
KVRemoveRequest::keys() const {
  // @@protoc_insertion_point(field_list:uranium.api.KVRemoveRequest.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVRemoveResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVRemoveResponse::KVRemoveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.KVRemoveResponse)
}

void KVRemoveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KVRemoveResponse::KVRemoveResponse(const KVRemoveResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.KVRemoveResponse)
}

void KVRemoveResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

KVRemoveResponse::~KVRemoveResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.KVRemoveResponse)
  SharedDtor();
}

void KVRemoveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KVRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVRemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVRemoveResponse_descriptor_;
}

const KVRemoveResponse& KVRemoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

KVRemoveResponse* KVRemoveResponse::default_instance_ = NULL;

KVRemoveResponse* KVRemoveResponse::New(::google::protobuf::Arena* arena) const {
  KVRemoveResponse* n = new KVRemoveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVRemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.KVRemoveResponse)
  status_ = 0;
}

bool KVRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.KVRemoveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.KVRemoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.KVRemoveResponse)
  return false;
#undef DO_
}

void KVRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.KVRemoveResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.KVRemoveResponse)
}

::google::protobuf::uint8* KVRemoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.KVRemoveResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.KVRemoveResponse)
  return target;
}

int KVRemoveResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.KVRemoveResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.KVRemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KVRemoveResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KVRemoveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.KVRemoveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.KVRemoveResponse)
    MergeFrom(*source);
  }
}

void KVRemoveResponse::MergeFrom(const KVRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.KVRemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void KVRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.KVRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVRemoveResponse::CopyFrom(const KVRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.KVRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVRemoveResponse::IsInitialized() const {

  return true;
}

void KVRemoveResponse::Swap(KVRemoveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVRemoveResponse::InternalSwap(KVRemoveResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVRemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVRemoveResponse_descriptor_;
  metadata.reflection = KVRemoveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVRemoveResponse

// optional .uranium.common.Status status = 1;
void KVRemoveResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status KVRemoveResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.KVRemoveResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void KVRemoveResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.KVRemoveResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLPushRequest::kTableNameFieldNumber;
const int ListLPushRequest::kKeyFieldNumber;
const int ListLPushRequest::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLPushRequest::ListLPushRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListLPushRequest)
}

void ListLPushRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListLPushRequest::ListLPushRequest(const ListLPushRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListLPushRequest)
}

void ListLPushRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

ListLPushRequest::~ListLPushRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListLPushRequest)
  SharedDtor();
}

void ListLPushRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListLPushRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLPushRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLPushRequest_descriptor_;
}

const ListLPushRequest& ListLPushRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListLPushRequest* ListLPushRequest::default_instance_ = NULL;

ListLPushRequest* ListLPushRequest::New(::google::protobuf::Arena* arena) const {
  ListLPushRequest* n = new ListLPushRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListLPushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListLPushRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  values_.Clear();
}

bool ListLPushRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListLPushRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 3;
      case 3: {
        if (tag == 26) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListLPushRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListLPushRequest)
  return false;
#undef DO_
}

void ListLPushRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListLPushRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListLPushRequest)
}

::google::protobuf::uint8* ListLPushRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListLPushRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListLPushRequest)
  return target;
}

int ListLPushRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListLPushRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.Value values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLPushRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListLPushRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListLPushRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLPushRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListLPushRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListLPushRequest)
    MergeFrom(*source);
  }
}

void ListLPushRequest::MergeFrom(const ListLPushRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListLPushRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void ListLPushRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListLPushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLPushRequest::CopyFrom(const ListLPushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListLPushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLPushRequest::IsInitialized() const {

  return true;
}

void ListLPushRequest::Swap(ListLPushRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLPushRequest::InternalSwap(ListLPushRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListLPushRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLPushRequest_descriptor_;
  metadata.reflection = ListLPushRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListLPushRequest

// optional .uranium.common.TableName table_name = 1;
bool ListLPushRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListLPushRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListLPushRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPushRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListLPushRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPushRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListLPushRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLPushRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListLPushRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLPushRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListLPushRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListLPushRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListLPushRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPushRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListLPushRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPushRequest.key)
  return key_;
}
::uranium::api::Key* ListLPushRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLPushRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListLPushRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLPushRequest.key)
}

// repeated .uranium.api.Value values = 3;
int ListLPushRequest::values_size() const {
  return values_.size();
}
void ListLPushRequest::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& ListLPushRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPushRequest.values)
  return values_.Get(index);
}
::uranium::api::Value* ListLPushRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPushRequest.values)
  return values_.Mutable(index);
}
::uranium::api::Value* ListLPushRequest::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.ListLPushRequest.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
ListLPushRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.ListLPushRequest.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
ListLPushRequest::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.ListLPushRequest.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLPushResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLPushResponse::ListLPushResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListLPushResponse)
}

void ListLPushResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListLPushResponse::ListLPushResponse(const ListLPushResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListLPushResponse)
}

void ListLPushResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

ListLPushResponse::~ListLPushResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListLPushResponse)
  SharedDtor();
}

void ListLPushResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListLPushResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLPushResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLPushResponse_descriptor_;
}

const ListLPushResponse& ListLPushResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListLPushResponse* ListLPushResponse::default_instance_ = NULL;

ListLPushResponse* ListLPushResponse::New(::google::protobuf::Arena* arena) const {
  ListLPushResponse* n = new ListLPushResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListLPushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListLPushResponse)
  status_ = 0;
}

bool ListLPushResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListLPushResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListLPushResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListLPushResponse)
  return false;
#undef DO_
}

void ListLPushResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListLPushResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListLPushResponse)
}

::google::protobuf::uint8* ListLPushResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListLPushResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListLPushResponse)
  return target;
}

int ListLPushResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListLPushResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLPushResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListLPushResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListLPushResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLPushResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListLPushResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListLPushResponse)
    MergeFrom(*source);
  }
}

void ListLPushResponse::MergeFrom(const ListLPushResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListLPushResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ListLPushResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListLPushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLPushResponse::CopyFrom(const ListLPushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListLPushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLPushResponse::IsInitialized() const {

  return true;
}

void ListLPushResponse::Swap(ListLPushResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLPushResponse::InternalSwap(ListLPushResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListLPushResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLPushResponse_descriptor_;
  metadata.reflection = ListLPushResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListLPushResponse

// optional .uranium.common.Status status = 1;
void ListLPushResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListLPushResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPushResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListLPushResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListLPushResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLPopRequest::kTableNameFieldNumber;
const int ListLPopRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLPopRequest::ListLPopRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListLPopRequest)
}

void ListLPopRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListLPopRequest::ListLPopRequest(const ListLPopRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListLPopRequest)
}

void ListLPopRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

ListLPopRequest::~ListLPopRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListLPopRequest)
  SharedDtor();
}

void ListLPopRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListLPopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLPopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLPopRequest_descriptor_;
}

const ListLPopRequest& ListLPopRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListLPopRequest* ListLPopRequest::default_instance_ = NULL;

ListLPopRequest* ListLPopRequest::New(::google::protobuf::Arena* arena) const {
  ListLPopRequest* n = new ListLPopRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListLPopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListLPopRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool ListLPopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListLPopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListLPopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListLPopRequest)
  return false;
#undef DO_
}

void ListLPopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListLPopRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListLPopRequest)
}

::google::protobuf::uint8* ListLPopRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListLPopRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListLPopRequest)
  return target;
}

int ListLPopRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListLPopRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLPopRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListLPopRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListLPopRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLPopRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListLPopRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListLPopRequest)
    MergeFrom(*source);
  }
}

void ListLPopRequest::MergeFrom(const ListLPopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListLPopRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void ListLPopRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListLPopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLPopRequest::CopyFrom(const ListLPopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListLPopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLPopRequest::IsInitialized() const {

  return true;
}

void ListLPopRequest::Swap(ListLPopRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLPopRequest::InternalSwap(ListLPopRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListLPopRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLPopRequest_descriptor_;
  metadata.reflection = ListLPopRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListLPopRequest

// optional .uranium.common.TableName table_name = 1;
bool ListLPopRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListLPopRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListLPopRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPopRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListLPopRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPopRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListLPopRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLPopRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListLPopRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLPopRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListLPopRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListLPopRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListLPopRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPopRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListLPopRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPopRequest.key)
  return key_;
}
::uranium::api::Key* ListLPopRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLPopRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListLPopRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLPopRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLPopResponse::kStatusFieldNumber;
const int ListLPopResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLPopResponse::ListLPopResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListLPopResponse)
}

void ListLPopResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  value_ = const_cast< ::uranium::api::Value*>(&::uranium::api::Value::default_instance());
}

ListLPopResponse::ListLPopResponse(const ListLPopResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListLPopResponse)
}

void ListLPopResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  value_ = NULL;
}

ListLPopResponse::~ListLPopResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListLPopResponse)
  SharedDtor();
}

void ListLPopResponse::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void ListLPopResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLPopResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLPopResponse_descriptor_;
}

const ListLPopResponse& ListLPopResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListLPopResponse* ListLPopResponse::default_instance_ = NULL;

ListLPopResponse* ListLPopResponse::New(::google::protobuf::Arena* arena) const {
  ListLPopResponse* n = new ListLPopResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListLPopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListLPopResponse)
  status_ = 0;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool ListLPopResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListLPopResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .uranium.api.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListLPopResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListLPopResponse)
  return false;
#undef DO_
}

void ListLPopResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListLPopResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListLPopResponse)
}

::google::protobuf::uint8* ListLPopResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListLPopResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListLPopResponse)
  return target;
}

int ListLPopResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListLPopResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLPopResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListLPopResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListLPopResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLPopResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListLPopResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListLPopResponse)
    MergeFrom(*source);
  }
}

void ListLPopResponse::MergeFrom(const ListLPopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListLPopResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_value()) {
    mutable_value()->::uranium::api::Value::MergeFrom(from.value());
  }
}

void ListLPopResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListLPopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLPopResponse::CopyFrom(const ListLPopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListLPopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLPopResponse::IsInitialized() const {

  return true;
}

void ListLPopResponse::Swap(ListLPopResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLPopResponse::InternalSwap(ListLPopResponse* other) {
  std::swap(status_, other->status_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListLPopResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLPopResponse_descriptor_;
  metadata.reflection = ListLPopResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListLPopResponse

// optional .uranium.common.Status status = 1;
void ListLPopResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListLPopResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPopResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListLPopResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListLPopResponse.status)
}

// optional .uranium.api.Value value = 2;
bool ListLPopResponse::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void ListLPopResponse::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::uranium::api::Value& ListLPopResponse::value() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPopResponse.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::uranium::api::Value* ListLPopResponse::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::uranium::api::Value;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPopResponse.value)
  return value_;
}
::uranium::api::Value* ListLPopResponse::release_value() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLPopResponse.value)
  
  ::uranium::api::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void ListLPopResponse::set_allocated_value(::uranium::api::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLPopResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRPushRequest::kTableNameFieldNumber;
const int ListRPushRequest::kKeyFieldNumber;
const int ListRPushRequest::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRPushRequest::ListRPushRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRPushRequest)
}

void ListRPushRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListRPushRequest::ListRPushRequest(const ListRPushRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRPushRequest)
}

void ListRPushRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

ListRPushRequest::~ListRPushRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRPushRequest)
  SharedDtor();
}

void ListRPushRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListRPushRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRPushRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRPushRequest_descriptor_;
}

const ListRPushRequest& ListRPushRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRPushRequest* ListRPushRequest::default_instance_ = NULL;

ListRPushRequest* ListRPushRequest::New(::google::protobuf::Arena* arena) const {
  ListRPushRequest* n = new ListRPushRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRPushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRPushRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  values_.Clear();
}

bool ListRPushRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRPushRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 3;
      case 3: {
        if (tag == 26) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRPushRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRPushRequest)
  return false;
#undef DO_
}

void ListRPushRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRPushRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRPushRequest)
}

::google::protobuf::uint8* ListRPushRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRPushRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRPushRequest)
  return target;
}

int ListRPushRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRPushRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.Value values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRPushRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRPushRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRPushRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRPushRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRPushRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRPushRequest)
    MergeFrom(*source);
  }
}

void ListRPushRequest::MergeFrom(const ListRPushRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRPushRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void ListRPushRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRPushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRPushRequest::CopyFrom(const ListRPushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRPushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRPushRequest::IsInitialized() const {

  return true;
}

void ListRPushRequest::Swap(ListRPushRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRPushRequest::InternalSwap(ListRPushRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRPushRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRPushRequest_descriptor_;
  metadata.reflection = ListRPushRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRPushRequest

// optional .uranium.common.TableName table_name = 1;
bool ListRPushRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListRPushRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListRPushRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPushRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListRPushRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPushRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListRPushRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRPushRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListRPushRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRPushRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListRPushRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListRPushRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListRPushRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPushRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListRPushRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPushRequest.key)
  return key_;
}
::uranium::api::Key* ListRPushRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRPushRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListRPushRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRPushRequest.key)
}

// repeated .uranium.api.Value values = 3;
int ListRPushRequest::values_size() const {
  return values_.size();
}
void ListRPushRequest::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& ListRPushRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPushRequest.values)
  return values_.Get(index);
}
::uranium::api::Value* ListRPushRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPushRequest.values)
  return values_.Mutable(index);
}
::uranium::api::Value* ListRPushRequest::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.ListRPushRequest.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
ListRPushRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.ListRPushRequest.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
ListRPushRequest::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.ListRPushRequest.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRPushResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRPushResponse::ListRPushResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRPushResponse)
}

void ListRPushResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListRPushResponse::ListRPushResponse(const ListRPushResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRPushResponse)
}

void ListRPushResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

ListRPushResponse::~ListRPushResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRPushResponse)
  SharedDtor();
}

void ListRPushResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRPushResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRPushResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRPushResponse_descriptor_;
}

const ListRPushResponse& ListRPushResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRPushResponse* ListRPushResponse::default_instance_ = NULL;

ListRPushResponse* ListRPushResponse::New(::google::protobuf::Arena* arena) const {
  ListRPushResponse* n = new ListRPushResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRPushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRPushResponse)
  status_ = 0;
}

bool ListRPushResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRPushResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRPushResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRPushResponse)
  return false;
#undef DO_
}

void ListRPushResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRPushResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRPushResponse)
}

::google::protobuf::uint8* ListRPushResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRPushResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRPushResponse)
  return target;
}

int ListRPushResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRPushResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRPushResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRPushResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRPushResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRPushResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRPushResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRPushResponse)
    MergeFrom(*source);
  }
}

void ListRPushResponse::MergeFrom(const ListRPushResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRPushResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ListRPushResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRPushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRPushResponse::CopyFrom(const ListRPushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRPushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRPushResponse::IsInitialized() const {

  return true;
}

void ListRPushResponse::Swap(ListRPushResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRPushResponse::InternalSwap(ListRPushResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRPushResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRPushResponse_descriptor_;
  metadata.reflection = ListRPushResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRPushResponse

// optional .uranium.common.Status status = 1;
void ListRPushResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListRPushResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPushResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListRPushResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListRPushResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRPopRequest::kTableNameFieldNumber;
const int ListRPopRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRPopRequest::ListRPopRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRPopRequest)
}

void ListRPopRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListRPopRequest::ListRPopRequest(const ListRPopRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRPopRequest)
}

void ListRPopRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

ListRPopRequest::~ListRPopRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRPopRequest)
  SharedDtor();
}

void ListRPopRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListRPopRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRPopRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRPopRequest_descriptor_;
}

const ListRPopRequest& ListRPopRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRPopRequest* ListRPopRequest::default_instance_ = NULL;

ListRPopRequest* ListRPopRequest::New(::google::protobuf::Arena* arena) const {
  ListRPopRequest* n = new ListRPopRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRPopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRPopRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool ListRPopRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRPopRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRPopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRPopRequest)
  return false;
#undef DO_
}

void ListRPopRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRPopRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRPopRequest)
}

::google::protobuf::uint8* ListRPopRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRPopRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRPopRequest)
  return target;
}

int ListRPopRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRPopRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRPopRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRPopRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRPopRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRPopRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRPopRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRPopRequest)
    MergeFrom(*source);
  }
}

void ListRPopRequest::MergeFrom(const ListRPopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRPopRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void ListRPopRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRPopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRPopRequest::CopyFrom(const ListRPopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRPopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRPopRequest::IsInitialized() const {

  return true;
}

void ListRPopRequest::Swap(ListRPopRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRPopRequest::InternalSwap(ListRPopRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRPopRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRPopRequest_descriptor_;
  metadata.reflection = ListRPopRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRPopRequest

// optional .uranium.common.TableName table_name = 1;
bool ListRPopRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListRPopRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListRPopRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPopRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListRPopRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPopRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListRPopRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRPopRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListRPopRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRPopRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListRPopRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListRPopRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListRPopRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPopRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListRPopRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPopRequest.key)
  return key_;
}
::uranium::api::Key* ListRPopRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRPopRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListRPopRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRPopRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRPopResponse::kStatusFieldNumber;
const int ListRPopResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRPopResponse::ListRPopResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRPopResponse)
}

void ListRPopResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  value_ = const_cast< ::uranium::api::Value*>(&::uranium::api::Value::default_instance());
}

ListRPopResponse::ListRPopResponse(const ListRPopResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRPopResponse)
}

void ListRPopResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  value_ = NULL;
}

ListRPopResponse::~ListRPopResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRPopResponse)
  SharedDtor();
}

void ListRPopResponse::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void ListRPopResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRPopResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRPopResponse_descriptor_;
}

const ListRPopResponse& ListRPopResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRPopResponse* ListRPopResponse::default_instance_ = NULL;

ListRPopResponse* ListRPopResponse::New(::google::protobuf::Arena* arena) const {
  ListRPopResponse* n = new ListRPopResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRPopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRPopResponse)
  status_ = 0;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool ListRPopResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRPopResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .uranium.api.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRPopResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRPopResponse)
  return false;
#undef DO_
}

void ListRPopResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRPopResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRPopResponse)
}

::google::protobuf::uint8* ListRPopResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRPopResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRPopResponse)
  return target;
}

int ListRPopResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRPopResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRPopResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRPopResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRPopResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRPopResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRPopResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRPopResponse)
    MergeFrom(*source);
  }
}

void ListRPopResponse::MergeFrom(const ListRPopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRPopResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_value()) {
    mutable_value()->::uranium::api::Value::MergeFrom(from.value());
  }
}

void ListRPopResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRPopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRPopResponse::CopyFrom(const ListRPopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRPopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRPopResponse::IsInitialized() const {

  return true;
}

void ListRPopResponse::Swap(ListRPopResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRPopResponse::InternalSwap(ListRPopResponse* other) {
  std::swap(status_, other->status_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRPopResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRPopResponse_descriptor_;
  metadata.reflection = ListRPopResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRPopResponse

// optional .uranium.common.Status status = 1;
void ListRPopResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListRPopResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPopResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListRPopResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListRPopResponse.status)
}

// optional .uranium.api.Value value = 2;
bool ListRPopResponse::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void ListRPopResponse::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::uranium::api::Value& ListRPopResponse::value() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPopResponse.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::uranium::api::Value* ListRPopResponse::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::uranium::api::Value;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPopResponse.value)
  return value_;
}
::uranium::api::Value* ListRPopResponse::release_value() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRPopResponse.value)
  
  ::uranium::api::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void ListRPopResponse::set_allocated_value(::uranium::api::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRPopResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLPushXRequest::kTableNameFieldNumber;
const int ListLPushXRequest::kKeyFieldNumber;
const int ListLPushXRequest::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLPushXRequest::ListLPushXRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListLPushXRequest)
}

void ListLPushXRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListLPushXRequest::ListLPushXRequest(const ListLPushXRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListLPushXRequest)
}

void ListLPushXRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

ListLPushXRequest::~ListLPushXRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListLPushXRequest)
  SharedDtor();
}

void ListLPushXRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListLPushXRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLPushXRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLPushXRequest_descriptor_;
}

const ListLPushXRequest& ListLPushXRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListLPushXRequest* ListLPushXRequest::default_instance_ = NULL;

ListLPushXRequest* ListLPushXRequest::New(::google::protobuf::Arena* arena) const {
  ListLPushXRequest* n = new ListLPushXRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListLPushXRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListLPushXRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  values_.Clear();
}

bool ListLPushXRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListLPushXRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 3;
      case 3: {
        if (tag == 26) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListLPushXRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListLPushXRequest)
  return false;
#undef DO_
}

void ListLPushXRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListLPushXRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListLPushXRequest)
}

::google::protobuf::uint8* ListLPushXRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListLPushXRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListLPushXRequest)
  return target;
}

int ListLPushXRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListLPushXRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.Value values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLPushXRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListLPushXRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListLPushXRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLPushXRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListLPushXRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListLPushXRequest)
    MergeFrom(*source);
  }
}

void ListLPushXRequest::MergeFrom(const ListLPushXRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListLPushXRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void ListLPushXRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListLPushXRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLPushXRequest::CopyFrom(const ListLPushXRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListLPushXRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLPushXRequest::IsInitialized() const {

  return true;
}

void ListLPushXRequest::Swap(ListLPushXRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLPushXRequest::InternalSwap(ListLPushXRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListLPushXRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLPushXRequest_descriptor_;
  metadata.reflection = ListLPushXRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListLPushXRequest

// optional .uranium.common.TableName table_name = 1;
bool ListLPushXRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListLPushXRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListLPushXRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPushXRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListLPushXRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPushXRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListLPushXRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLPushXRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListLPushXRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLPushXRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListLPushXRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListLPushXRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListLPushXRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPushXRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListLPushXRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPushXRequest.key)
  return key_;
}
::uranium::api::Key* ListLPushXRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLPushXRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListLPushXRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLPushXRequest.key)
}

// repeated .uranium.api.Value values = 3;
int ListLPushXRequest::values_size() const {
  return values_.size();
}
void ListLPushXRequest::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& ListLPushXRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPushXRequest.values)
  return values_.Get(index);
}
::uranium::api::Value* ListLPushXRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLPushXRequest.values)
  return values_.Mutable(index);
}
::uranium::api::Value* ListLPushXRequest::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.ListLPushXRequest.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
ListLPushXRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.ListLPushXRequest.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
ListLPushXRequest::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.ListLPushXRequest.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLPushXResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLPushXResponse::ListLPushXResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListLPushXResponse)
}

void ListLPushXResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListLPushXResponse::ListLPushXResponse(const ListLPushXResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListLPushXResponse)
}

void ListLPushXResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

ListLPushXResponse::~ListLPushXResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListLPushXResponse)
  SharedDtor();
}

void ListLPushXResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListLPushXResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLPushXResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLPushXResponse_descriptor_;
}

const ListLPushXResponse& ListLPushXResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListLPushXResponse* ListLPushXResponse::default_instance_ = NULL;

ListLPushXResponse* ListLPushXResponse::New(::google::protobuf::Arena* arena) const {
  ListLPushXResponse* n = new ListLPushXResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListLPushXResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListLPushXResponse)
  status_ = 0;
}

bool ListLPushXResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListLPushXResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListLPushXResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListLPushXResponse)
  return false;
#undef DO_
}

void ListLPushXResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListLPushXResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListLPushXResponse)
}

::google::protobuf::uint8* ListLPushXResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListLPushXResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListLPushXResponse)
  return target;
}

int ListLPushXResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListLPushXResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLPushXResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListLPushXResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListLPushXResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLPushXResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListLPushXResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListLPushXResponse)
    MergeFrom(*source);
  }
}

void ListLPushXResponse::MergeFrom(const ListLPushXResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListLPushXResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ListLPushXResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListLPushXResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLPushXResponse::CopyFrom(const ListLPushXResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListLPushXResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLPushXResponse::IsInitialized() const {

  return true;
}

void ListLPushXResponse::Swap(ListLPushXResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLPushXResponse::InternalSwap(ListLPushXResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListLPushXResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLPushXResponse_descriptor_;
  metadata.reflection = ListLPushXResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListLPushXResponse

// optional .uranium.common.Status status = 1;
void ListLPushXResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListLPushXResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLPushXResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListLPushXResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListLPushXResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRPushXRequest::kTableNameFieldNumber;
const int ListRPushXRequest::kKeyFieldNumber;
const int ListRPushXRequest::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRPushXRequest::ListRPushXRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRPushXRequest)
}

void ListRPushXRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListRPushXRequest::ListRPushXRequest(const ListRPushXRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRPushXRequest)
}

void ListRPushXRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

ListRPushXRequest::~ListRPushXRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRPushXRequest)
  SharedDtor();
}

void ListRPushXRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListRPushXRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRPushXRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRPushXRequest_descriptor_;
}

const ListRPushXRequest& ListRPushXRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRPushXRequest* ListRPushXRequest::default_instance_ = NULL;

ListRPushXRequest* ListRPushXRequest::New(::google::protobuf::Arena* arena) const {
  ListRPushXRequest* n = new ListRPushXRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRPushXRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRPushXRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  values_.Clear();
}

bool ListRPushXRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRPushXRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 3;
      case 3: {
        if (tag == 26) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRPushXRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRPushXRequest)
  return false;
#undef DO_
}

void ListRPushXRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRPushXRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRPushXRequest)
}

::google::protobuf::uint8* ListRPushXRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRPushXRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRPushXRequest)
  return target;
}

int ListRPushXRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRPushXRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.Value values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRPushXRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRPushXRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRPushXRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRPushXRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRPushXRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRPushXRequest)
    MergeFrom(*source);
  }
}

void ListRPushXRequest::MergeFrom(const ListRPushXRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRPushXRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void ListRPushXRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRPushXRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRPushXRequest::CopyFrom(const ListRPushXRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRPushXRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRPushXRequest::IsInitialized() const {

  return true;
}

void ListRPushXRequest::Swap(ListRPushXRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRPushXRequest::InternalSwap(ListRPushXRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRPushXRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRPushXRequest_descriptor_;
  metadata.reflection = ListRPushXRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRPushXRequest

// optional .uranium.common.TableName table_name = 1;
bool ListRPushXRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListRPushXRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListRPushXRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPushXRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListRPushXRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPushXRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListRPushXRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRPushXRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListRPushXRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRPushXRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListRPushXRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListRPushXRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListRPushXRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPushXRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListRPushXRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPushXRequest.key)
  return key_;
}
::uranium::api::Key* ListRPushXRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRPushXRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListRPushXRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRPushXRequest.key)
}

// repeated .uranium.api.Value values = 3;
int ListRPushXRequest::values_size() const {
  return values_.size();
}
void ListRPushXRequest::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& ListRPushXRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPushXRequest.values)
  return values_.Get(index);
}
::uranium::api::Value* ListRPushXRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRPushXRequest.values)
  return values_.Mutable(index);
}
::uranium::api::Value* ListRPushXRequest::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.ListRPushXRequest.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
ListRPushXRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.ListRPushXRequest.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
ListRPushXRequest::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.ListRPushXRequest.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRPushXResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRPushXResponse::ListRPushXResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRPushXResponse)
}

void ListRPushXResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListRPushXResponse::ListRPushXResponse(const ListRPushXResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRPushXResponse)
}

void ListRPushXResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

ListRPushXResponse::~ListRPushXResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRPushXResponse)
  SharedDtor();
}

void ListRPushXResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRPushXResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRPushXResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRPushXResponse_descriptor_;
}

const ListRPushXResponse& ListRPushXResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRPushXResponse* ListRPushXResponse::default_instance_ = NULL;

ListRPushXResponse* ListRPushXResponse::New(::google::protobuf::Arena* arena) const {
  ListRPushXResponse* n = new ListRPushXResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRPushXResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRPushXResponse)
  status_ = 0;
}

bool ListRPushXResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRPushXResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRPushXResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRPushXResponse)
  return false;
#undef DO_
}

void ListRPushXResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRPushXResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRPushXResponse)
}

::google::protobuf::uint8* ListRPushXResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRPushXResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRPushXResponse)
  return target;
}

int ListRPushXResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRPushXResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRPushXResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRPushXResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRPushXResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRPushXResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRPushXResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRPushXResponse)
    MergeFrom(*source);
  }
}

void ListRPushXResponse::MergeFrom(const ListRPushXResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRPushXResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ListRPushXResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRPushXResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRPushXResponse::CopyFrom(const ListRPushXResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRPushXResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRPushXResponse::IsInitialized() const {

  return true;
}

void ListRPushXResponse::Swap(ListRPushXResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRPushXResponse::InternalSwap(ListRPushXResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRPushXResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRPushXResponse_descriptor_;
  metadata.reflection = ListRPushXResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRPushXResponse

// optional .uranium.common.Status status = 1;
void ListRPushXResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListRPushXResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRPushXResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListRPushXResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListRPushXResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListIndexRequest::kTableNameFieldNumber;
const int ListIndexRequest::kKeyFieldNumber;
const int ListIndexRequest::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListIndexRequest::ListIndexRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListIndexRequest)
}

void ListIndexRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListIndexRequest::ListIndexRequest(const ListIndexRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListIndexRequest)
}

void ListIndexRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
  index_ = GOOGLE_LONGLONG(0);
}

ListIndexRequest::~ListIndexRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListIndexRequest)
  SharedDtor();
}

void ListIndexRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListIndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListIndexRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListIndexRequest_descriptor_;
}

const ListIndexRequest& ListIndexRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListIndexRequest* ListIndexRequest::default_instance_ = NULL;

ListIndexRequest* ListIndexRequest::New(::google::protobuf::Arena* arena) const {
  ListIndexRequest* n = new ListIndexRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListIndexRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  index_ = GOOGLE_LONGLONG(0);
}

bool ListIndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListIndexRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int64 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListIndexRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListIndexRequest)
  return false;
#undef DO_
}

void ListIndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListIndexRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // optional int64 index = 3;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->index(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListIndexRequest)
}

::google::protobuf::uint8* ListIndexRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListIndexRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // optional int64 index = 3;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListIndexRequest)
  return target;
}

int ListIndexRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListIndexRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional int64 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListIndexRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListIndexRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListIndexRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListIndexRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListIndexRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListIndexRequest)
    MergeFrom(*source);
  }
}

void ListIndexRequest::MergeFrom(const ListIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListIndexRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void ListIndexRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListIndexRequest::CopyFrom(const ListIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndexRequest::IsInitialized() const {

  return true;
}

void ListIndexRequest::Swap(ListIndexRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListIndexRequest::InternalSwap(ListIndexRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  std::swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListIndexRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListIndexRequest_descriptor_;
  metadata.reflection = ListIndexRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListIndexRequest

// optional .uranium.common.TableName table_name = 1;
bool ListIndexRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListIndexRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListIndexRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListIndexRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListIndexRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListIndexRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListIndexRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListIndexRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListIndexRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListIndexRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListIndexRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListIndexRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListIndexRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListIndexRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListIndexRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListIndexRequest.key)
  return key_;
}
::uranium::api::Key* ListIndexRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListIndexRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListIndexRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListIndexRequest.key)
}

// optional int64 index = 3;
void ListIndexRequest::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ListIndexRequest::index() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListIndexRequest.index)
  return index_;
}
 void ListIndexRequest::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListIndexRequest.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListIndexResponse::kStatusFieldNumber;
const int ListIndexResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListIndexResponse::ListIndexResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListIndexResponse)
}

void ListIndexResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  value_ = const_cast< ::uranium::api::Value*>(&::uranium::api::Value::default_instance());
}

ListIndexResponse::ListIndexResponse(const ListIndexResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListIndexResponse)
}

void ListIndexResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  value_ = NULL;
}

ListIndexResponse::~ListIndexResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListIndexResponse)
  SharedDtor();
}

void ListIndexResponse::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void ListIndexResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListIndexResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListIndexResponse_descriptor_;
}

const ListIndexResponse& ListIndexResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListIndexResponse* ListIndexResponse::default_instance_ = NULL;

ListIndexResponse* ListIndexResponse::New(::google::protobuf::Arena* arena) const {
  ListIndexResponse* n = new ListIndexResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListIndexResponse)
  status_ = 0;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool ListIndexResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListIndexResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .uranium.api.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListIndexResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListIndexResponse)
  return false;
#undef DO_
}

void ListIndexResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListIndexResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListIndexResponse)
}

::google::protobuf::uint8* ListIndexResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListIndexResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListIndexResponse)
  return target;
}

int ListIndexResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListIndexResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .uranium.api.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListIndexResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListIndexResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListIndexResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListIndexResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListIndexResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListIndexResponse)
    MergeFrom(*source);
  }
}

void ListIndexResponse::MergeFrom(const ListIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListIndexResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_value()) {
    mutable_value()->::uranium::api::Value::MergeFrom(from.value());
  }
}

void ListIndexResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListIndexResponse::CopyFrom(const ListIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndexResponse::IsInitialized() const {

  return true;
}

void ListIndexResponse::Swap(ListIndexResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListIndexResponse::InternalSwap(ListIndexResponse* other) {
  std::swap(status_, other->status_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListIndexResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListIndexResponse_descriptor_;
  metadata.reflection = ListIndexResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListIndexResponse

// optional .uranium.common.Status status = 1;
void ListIndexResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListIndexResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListIndexResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListIndexResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListIndexResponse.status)
}

// optional .uranium.api.Value value = 2;
bool ListIndexResponse::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void ListIndexResponse::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::uranium::api::Value& ListIndexResponse::value() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListIndexResponse.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::uranium::api::Value* ListIndexResponse::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::uranium::api::Value;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListIndexResponse.value)
  return value_;
}
::uranium::api::Value* ListIndexResponse::release_value() {
  // @@protoc_insertion_point(field_release:uranium.api.ListIndexResponse.value)
  
  ::uranium::api::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void ListIndexResponse::set_allocated_value(::uranium::api::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListIndexResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSetRequest::kTableNameFieldNumber;
const int ListSetRequest::kKeyFieldNumber;
const int ListSetRequest::kIndexFieldNumber;
const int ListSetRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSetRequest::ListSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListSetRequest)
}

void ListSetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
  value_ = const_cast< ::uranium::api::Value*>(&::uranium::api::Value::default_instance());
}

ListSetRequest::ListSetRequest(const ListSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListSetRequest)
}

void ListSetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
  index_ = GOOGLE_LONGLONG(0);
  value_ = NULL;
}

ListSetRequest::~ListSetRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListSetRequest)
  SharedDtor();
}

void ListSetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
    delete value_;
  }
}

void ListSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSetRequest_descriptor_;
}

const ListSetRequest& ListSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListSetRequest* ListSetRequest::default_instance_ = NULL;

ListSetRequest* ListSetRequest::New(::google::protobuf::Arena* arena) const {
  ListSetRequest* n = new ListSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListSetRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  index_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool ListSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int64 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional .uranium.api.Value value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListSetRequest)
  return false;
#undef DO_
}

void ListSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListSetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // optional int64 index = 3;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->index(), output);
  }

  // optional .uranium.api.Value value = 4;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListSetRequest)
}

::google::protobuf::uint8* ListSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListSetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // optional int64 index = 3;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->index(), target);
  }

  // optional .uranium.api.Value value = 4;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListSetRequest)
  return target;
}

int ListSetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListSetRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional int64 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // optional .uranium.api.Value value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListSetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListSetRequest)
    MergeFrom(*source);
  }
}

void ListSetRequest::MergeFrom(const ListSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.has_value()) {
    mutable_value()->::uranium::api::Value::MergeFrom(from.value());
  }
}

void ListSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSetRequest::CopyFrom(const ListSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSetRequest::IsInitialized() const {

  return true;
}

void ListSetRequest::Swap(ListSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListSetRequest::InternalSwap(ListSetRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  std::swap(index_, other->index_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSetRequest_descriptor_;
  metadata.reflection = ListSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListSetRequest

// optional .uranium.common.TableName table_name = 1;
bool ListSetRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListSetRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListSetRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListSetRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListSetRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListSetRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListSetRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListSetRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListSetRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListSetRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListSetRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListSetRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListSetRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListSetRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListSetRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListSetRequest.key)
  return key_;
}
::uranium::api::Key* ListSetRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListSetRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListSetRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListSetRequest.key)
}

// optional int64 index = 3;
void ListSetRequest::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ListSetRequest::index() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListSetRequest.index)
  return index_;
}
 void ListSetRequest::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListSetRequest.index)
}

// optional .uranium.api.Value value = 4;
bool ListSetRequest::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void ListSetRequest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::uranium::api::Value& ListSetRequest::value() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListSetRequest.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::uranium::api::Value* ListSetRequest::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::uranium::api::Value;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListSetRequest.value)
  return value_;
}
::uranium::api::Value* ListSetRequest::release_value() {
  // @@protoc_insertion_point(field_release:uranium.api.ListSetRequest.value)
  
  ::uranium::api::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void ListSetRequest::set_allocated_value(::uranium::api::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListSetRequest.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSetResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSetResponse::ListSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListSetResponse)
}

void ListSetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListSetResponse::ListSetResponse(const ListSetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListSetResponse)
}

void ListSetResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

ListSetResponse::~ListSetResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListSetResponse)
  SharedDtor();
}

void ListSetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSetResponse_descriptor_;
}

const ListSetResponse& ListSetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListSetResponse* ListSetResponse::default_instance_ = NULL;

ListSetResponse* ListSetResponse::New(::google::protobuf::Arena* arena) const {
  ListSetResponse* n = new ListSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListSetResponse)
  status_ = 0;
}

bool ListSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListSetResponse)
  return false;
#undef DO_
}

void ListSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListSetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListSetResponse)
}

::google::protobuf::uint8* ListSetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListSetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListSetResponse)
  return target;
}

int ListSetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListSetResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListSetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListSetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListSetResponse)
    MergeFrom(*source);
  }
}

void ListSetResponse::MergeFrom(const ListSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListSetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ListSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSetResponse::CopyFrom(const ListSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSetResponse::IsInitialized() const {

  return true;
}

void ListSetResponse::Swap(ListSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListSetResponse::InternalSwap(ListSetResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSetResponse_descriptor_;
  metadata.reflection = ListSetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListSetResponse

// optional .uranium.common.Status status = 1;
void ListSetResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListSetResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListSetResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListSetResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListSetResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRangeRequest::kTableNameFieldNumber;
const int ListRangeRequest::kKeyFieldNumber;
const int ListRangeRequest::kStartFieldNumber;
const int ListRangeRequest::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRangeRequest::ListRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRangeRequest)
}

void ListRangeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListRangeRequest::ListRangeRequest(const ListRangeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRangeRequest)
}

void ListRangeRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
  start_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
}

ListRangeRequest::~ListRangeRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRangeRequest)
  SharedDtor();
}

void ListRangeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRangeRequest_descriptor_;
}

const ListRangeRequest& ListRangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRangeRequest* ListRangeRequest::default_instance_ = NULL;

ListRangeRequest* ListRangeRequest::New(::google::protobuf::Arena* arena) const {
  ListRangeRequest* n = new ListRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRangeRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ListRangeRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ListRangeRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_, end_);
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ListRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start;
        break;
      }

      // optional int64 start = 3;
      case 3: {
        if (tag == 24) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }

      // optional int64 end = 4;
      case 4: {
        if (tag == 32) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRangeRequest)
  return false;
#undef DO_
}

void ListRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRangeRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // optional int64 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start(), output);
  }

  // optional int64 end = 4;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRangeRequest)
}

::google::protobuf::uint8* ListRangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRangeRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // optional int64 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start(), target);
  }

  // optional int64 end = 4;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRangeRequest)
  return target;
}

int ListRangeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRangeRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional int64 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // optional int64 end = 4;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRangeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRangeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRangeRequest)
    MergeFrom(*source);
  }
}

void ListRangeRequest::MergeFrom(const ListRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRangeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void ListRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRangeRequest::CopyFrom(const ListRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRangeRequest::IsInitialized() const {

  return true;
}

void ListRangeRequest::Swap(ListRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRangeRequest::InternalSwap(ListRangeRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRangeRequest_descriptor_;
  metadata.reflection = ListRangeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRangeRequest

// optional .uranium.common.TableName table_name = 1;
bool ListRangeRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListRangeRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListRangeRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRangeRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListRangeRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRangeRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListRangeRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRangeRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListRangeRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRangeRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListRangeRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListRangeRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListRangeRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRangeRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListRangeRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRangeRequest.key)
  return key_;
}
::uranium::api::Key* ListRangeRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRangeRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListRangeRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRangeRequest.key)
}

// optional int64 start = 3;
void ListRangeRequest::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ListRangeRequest::start() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRangeRequest.start)
  return start_;
}
 void ListRangeRequest::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListRangeRequest.start)
}

// optional int64 end = 4;
void ListRangeRequest::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ListRangeRequest::end() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRangeRequest.end)
  return end_;
}
 void ListRangeRequest::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListRangeRequest.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRangeResponse::kStatusFieldNumber;
const int ListRangeResponse::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRangeResponse::ListRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRangeResponse)
}

void ListRangeResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListRangeResponse::ListRangeResponse(const ListRangeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRangeResponse)
}

void ListRangeResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

ListRangeResponse::~ListRangeResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRangeResponse)
  SharedDtor();
}

void ListRangeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRangeResponse_descriptor_;
}

const ListRangeResponse& ListRangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRangeResponse* ListRangeResponse::default_instance_ = NULL;

ListRangeResponse* ListRangeResponse::New(::google::protobuf::Arena* arena) const {
  ListRangeResponse* n = new ListRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRangeResponse)
  status_ = 0;
  values_.Clear();
}

bool ListRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRangeResponse)
  return false;
#undef DO_
}

void ListRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRangeResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .uranium.api.Value values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRangeResponse)
}

::google::protobuf::uint8* ListRangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRangeResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .uranium.api.Value values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRangeResponse)
  return target;
}

int ListRangeResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRangeResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated .uranium.api.Value values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRangeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRangeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRangeResponse)
    MergeFrom(*source);
  }
}

void ListRangeResponse::MergeFrom(const ListRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRangeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ListRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRangeResponse::CopyFrom(const ListRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRangeResponse::IsInitialized() const {

  return true;
}

void ListRangeResponse::Swap(ListRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRangeResponse::InternalSwap(ListRangeResponse* other) {
  std::swap(status_, other->status_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRangeResponse_descriptor_;
  metadata.reflection = ListRangeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRangeResponse

// optional .uranium.common.Status status = 1;
void ListRangeResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListRangeResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRangeResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListRangeResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListRangeResponse.status)
}

// repeated .uranium.api.Value values = 2;
int ListRangeResponse::values_size() const {
  return values_.size();
}
void ListRangeResponse::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& ListRangeResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRangeResponse.values)
  return values_.Get(index);
}
::uranium::api::Value* ListRangeResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRangeResponse.values)
  return values_.Mutable(index);
}
::uranium::api::Value* ListRangeResponse::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.ListRangeResponse.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
ListRangeResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.ListRangeResponse.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
ListRangeResponse::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.ListRangeResponse.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLengthRequest::kTableNameFieldNumber;
const int ListLengthRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLengthRequest::ListLengthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListLengthRequest)
}

void ListLengthRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListLengthRequest::ListLengthRequest(const ListLengthRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListLengthRequest)
}

void ListLengthRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

ListLengthRequest::~ListLengthRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListLengthRequest)
  SharedDtor();
}

void ListLengthRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListLengthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLengthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLengthRequest_descriptor_;
}

const ListLengthRequest& ListLengthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListLengthRequest* ListLengthRequest::default_instance_ = NULL;

ListLengthRequest* ListLengthRequest::New(::google::protobuf::Arena* arena) const {
  ListLengthRequest* n = new ListLengthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListLengthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListLengthRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool ListLengthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListLengthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListLengthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListLengthRequest)
  return false;
#undef DO_
}

void ListLengthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListLengthRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListLengthRequest)
}

::google::protobuf::uint8* ListLengthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListLengthRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListLengthRequest)
  return target;
}

int ListLengthRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListLengthRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLengthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListLengthRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListLengthRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLengthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListLengthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListLengthRequest)
    MergeFrom(*source);
  }
}

void ListLengthRequest::MergeFrom(const ListLengthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListLengthRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void ListLengthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListLengthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLengthRequest::CopyFrom(const ListLengthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListLengthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLengthRequest::IsInitialized() const {

  return true;
}

void ListLengthRequest::Swap(ListLengthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLengthRequest::InternalSwap(ListLengthRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListLengthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLengthRequest_descriptor_;
  metadata.reflection = ListLengthRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListLengthRequest

// optional .uranium.common.TableName table_name = 1;
bool ListLengthRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListLengthRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListLengthRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLengthRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListLengthRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLengthRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListLengthRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLengthRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListLengthRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLengthRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListLengthRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListLengthRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListLengthRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLengthRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListLengthRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListLengthRequest.key)
  return key_;
}
::uranium::api::Key* ListLengthRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListLengthRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListLengthRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListLengthRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListLengthResponse::kStatusFieldNumber;
const int ListLengthResponse::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListLengthResponse::ListLengthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListLengthResponse)
}

void ListLengthResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListLengthResponse::ListLengthResponse(const ListLengthResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListLengthResponse)
}

void ListLengthResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  length_ = GOOGLE_LONGLONG(0);
}

ListLengthResponse::~ListLengthResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListLengthResponse)
  SharedDtor();
}

void ListLengthResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListLengthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLengthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLengthResponse_descriptor_;
}

const ListLengthResponse& ListLengthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListLengthResponse* ListLengthResponse::default_instance_ = NULL;

ListLengthResponse* ListLengthResponse::New(::google::protobuf::Arena* arena) const {
  ListLengthResponse* n = new ListLengthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListLengthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListLengthResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ListLengthResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ListLengthResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool ListLengthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListLengthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int64 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListLengthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListLengthResponse)
  return false;
#undef DO_
}

void ListLengthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListLengthResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListLengthResponse)
}

::google::protobuf::uint8* ListLengthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListLengthResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListLengthResponse)
  return target;
}

int ListLengthResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListLengthResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLengthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListLengthResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListLengthResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListLengthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListLengthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListLengthResponse)
    MergeFrom(*source);
  }
}

void ListLengthResponse::MergeFrom(const ListLengthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListLengthResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void ListLengthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListLengthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLengthResponse::CopyFrom(const ListLengthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListLengthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLengthResponse::IsInitialized() const {

  return true;
}

void ListLengthResponse::Swap(ListLengthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListLengthResponse::InternalSwap(ListLengthResponse* other) {
  std::swap(status_, other->status_);
  std::swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListLengthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLengthResponse_descriptor_;
  metadata.reflection = ListLengthResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListLengthResponse

// optional .uranium.common.Status status = 1;
void ListLengthResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListLengthResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLengthResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListLengthResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListLengthResponse.status)
}

// optional int64 length = 2;
void ListLengthResponse::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ListLengthResponse::length() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListLengthResponse.length)
  return length_;
}
 void ListLengthResponse::set_length(::google::protobuf::int64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListLengthResponse.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRemoveAllRequest::kTableNameFieldNumber;
const int ListRemoveAllRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRemoveAllRequest::ListRemoveAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRemoveAllRequest)
}

void ListRemoveAllRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

ListRemoveAllRequest::ListRemoveAllRequest(const ListRemoveAllRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRemoveAllRequest)
}

void ListRemoveAllRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

ListRemoveAllRequest::~ListRemoveAllRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRemoveAllRequest)
  SharedDtor();
}

void ListRemoveAllRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void ListRemoveAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRemoveAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRemoveAllRequest_descriptor_;
}

const ListRemoveAllRequest& ListRemoveAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRemoveAllRequest* ListRemoveAllRequest::default_instance_ = NULL;

ListRemoveAllRequest* ListRemoveAllRequest::New(::google::protobuf::Arena* arena) const {
  ListRemoveAllRequest* n = new ListRemoveAllRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRemoveAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRemoveAllRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool ListRemoveAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRemoveAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRemoveAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRemoveAllRequest)
  return false;
#undef DO_
}

void ListRemoveAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRemoveAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRemoveAllRequest)
}

::google::protobuf::uint8* ListRemoveAllRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRemoveAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRemoveAllRequest)
  return target;
}

int ListRemoveAllRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRemoveAllRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRemoveAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRemoveAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRemoveAllRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRemoveAllRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRemoveAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRemoveAllRequest)
    MergeFrom(*source);
  }
}

void ListRemoveAllRequest::MergeFrom(const ListRemoveAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRemoveAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void ListRemoveAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRemoveAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRemoveAllRequest::CopyFrom(const ListRemoveAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRemoveAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRemoveAllRequest::IsInitialized() const {

  return true;
}

void ListRemoveAllRequest::Swap(ListRemoveAllRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRemoveAllRequest::InternalSwap(ListRemoveAllRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRemoveAllRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRemoveAllRequest_descriptor_;
  metadata.reflection = ListRemoveAllRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRemoveAllRequest

// optional .uranium.common.TableName table_name = 1;
bool ListRemoveAllRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void ListRemoveAllRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& ListRemoveAllRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRemoveAllRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* ListRemoveAllRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRemoveAllRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* ListRemoveAllRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRemoveAllRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void ListRemoveAllRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRemoveAllRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool ListRemoveAllRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void ListRemoveAllRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& ListRemoveAllRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRemoveAllRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* ListRemoveAllRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.ListRemoveAllRequest.key)
  return key_;
}
::uranium::api::Key* ListRemoveAllRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.ListRemoveAllRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void ListRemoveAllRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.ListRemoveAllRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRemoveAllResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRemoveAllResponse::ListRemoveAllResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.ListRemoveAllResponse)
}

void ListRemoveAllResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListRemoveAllResponse::ListRemoveAllResponse(const ListRemoveAllResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.ListRemoveAllResponse)
}

void ListRemoveAllResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

ListRemoveAllResponse::~ListRemoveAllResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.ListRemoveAllResponse)
  SharedDtor();
}

void ListRemoveAllResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRemoveAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRemoveAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRemoveAllResponse_descriptor_;
}

const ListRemoveAllResponse& ListRemoveAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

ListRemoveAllResponse* ListRemoveAllResponse::default_instance_ = NULL;

ListRemoveAllResponse* ListRemoveAllResponse::New(::google::protobuf::Arena* arena) const {
  ListRemoveAllResponse* n = new ListRemoveAllResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRemoveAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.ListRemoveAllResponse)
  status_ = 0;
}

bool ListRemoveAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.ListRemoveAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.ListRemoveAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.ListRemoveAllResponse)
  return false;
#undef DO_
}

void ListRemoveAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.ListRemoveAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.ListRemoveAllResponse)
}

::google::protobuf::uint8* ListRemoveAllResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.ListRemoveAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.ListRemoveAllResponse)
  return target;
}

int ListRemoveAllResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.ListRemoveAllResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRemoveAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.ListRemoveAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListRemoveAllResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRemoveAllResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.ListRemoveAllResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.ListRemoveAllResponse)
    MergeFrom(*source);
  }
}

void ListRemoveAllResponse::MergeFrom(const ListRemoveAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.ListRemoveAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ListRemoveAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.ListRemoveAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRemoveAllResponse::CopyFrom(const ListRemoveAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.ListRemoveAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRemoveAllResponse::IsInitialized() const {

  return true;
}

void ListRemoveAllResponse::Swap(ListRemoveAllResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRemoveAllResponse::InternalSwap(ListRemoveAllResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRemoveAllResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRemoveAllResponse_descriptor_;
  metadata.reflection = ListRemoveAllResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRemoveAllResponse

// optional .uranium.common.Status status = 1;
void ListRemoveAllResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status ListRemoveAllResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.ListRemoveAllResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void ListRemoveAllResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.ListRemoveAllResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGetRequest::kTableNameFieldNumber;
const int HashGetRequest::kKeyFieldNumber;
const int HashGetRequest::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGetRequest::HashGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashGetRequest)
}

void HashGetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

HashGetRequest::HashGetRequest(const HashGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashGetRequest)
}

void HashGetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

HashGetRequest::~HashGetRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashGetRequest)
  SharedDtor();
}

void HashGetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void HashGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGetRequest_descriptor_;
}

const HashGetRequest& HashGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashGetRequest* HashGetRequest::default_instance_ = NULL;

HashGetRequest* HashGetRequest::New(::google::protobuf::Arena* arena) const {
  HashGetRequest* n = new HashGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashGetRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  fields_.Clear();
}

bool HashGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        break;
      }

      // repeated .uranium.api.Field fields = 3;
      case 3: {
        if (tag == 26) {
         parse_fields:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fields;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashGetRequest)
  return false;
#undef DO_
}

void HashGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashGetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.Field fields = 3;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fields(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashGetRequest)
}

::google::protobuf::uint8* HashGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashGetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.Field fields = 3;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fields(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashGetRequest)
  return target;
}

int HashGetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashGetRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.Field fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashGetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashGetRequest)
    MergeFrom(*source);
  }
}

void HashGetRequest::MergeFrom(const HashGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fields_.MergeFrom(from.fields_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void HashGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGetRequest::CopyFrom(const HashGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGetRequest::IsInitialized() const {

  return true;
}

void HashGetRequest::Swap(HashGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGetRequest::InternalSwap(HashGetRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  fields_.UnsafeArenaSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGetRequest_descriptor_;
  metadata.reflection = HashGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGetRequest

// optional .uranium.common.TableName table_name = 1;
bool HashGetRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashGetRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashGetRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashGetRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashGetRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashGetRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashGetRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashGetRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashGetRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashGetRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashGetRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashGetRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetRequest.key)
  return key_;
}
::uranium::api::Key* HashGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashGetRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashGetRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashGetRequest.key)
}

// repeated .uranium.api.Field fields = 3;
int HashGetRequest::fields_size() const {
  return fields_.size();
}
void HashGetRequest::clear_fields() {
  fields_.Clear();
}
const ::uranium::api::Field& HashGetRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetRequest.fields)
  return fields_.Get(index);
}
::uranium::api::Field* HashGetRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetRequest.fields)
  return fields_.Mutable(index);
}
::uranium::api::Field* HashGetRequest::add_fields() {
  // @@protoc_insertion_point(field_add:uranium.api.HashGetRequest.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Field >*
HashGetRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.HashGetRequest.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Field >&
HashGetRequest::fields() const {
  // @@protoc_insertion_point(field_list:uranium.api.HashGetRequest.fields)
  return fields_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGetResponse::kStatusFieldNumber;
const int HashGetResponse::kFvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGetResponse::HashGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashGetResponse)
}

void HashGetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashGetResponse::HashGetResponse(const HashGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashGetResponse)
}

void HashGetResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

HashGetResponse::~HashGetResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashGetResponse)
  SharedDtor();
}

void HashGetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGetResponse_descriptor_;
}

const HashGetResponse& HashGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashGetResponse* HashGetResponse::default_instance_ = NULL;

HashGetResponse* HashGetResponse::New(::google::protobuf::Arena* arena) const {
  HashGetResponse* n = new HashGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashGetResponse)
  status_ = 0;
  fvs_.Clear();
}

bool HashGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fvs;
        break;
      }

      // repeated .uranium.api.FieldValue fvs = 2;
      case 2: {
        if (tag == 18) {
         parse_fvs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_fvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashGetResponse)
  return false;
#undef DO_
}

void HashGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashGetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .uranium.api.FieldValue fvs = 2;
  for (unsigned int i = 0, n = this->fvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashGetResponse)
}

::google::protobuf::uint8* HashGetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashGetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .uranium.api.FieldValue fvs = 2;
  for (unsigned int i = 0, n = this->fvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fvs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashGetResponse)
  return target;
}

int HashGetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashGetResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated .uranium.api.FieldValue fvs = 2;
  total_size += 1 * this->fvs_size();
  for (int i = 0; i < this->fvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashGetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashGetResponse)
    MergeFrom(*source);
  }
}

void HashGetResponse::MergeFrom(const HashGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fvs_.MergeFrom(from.fvs_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HashGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGetResponse::CopyFrom(const HashGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGetResponse::IsInitialized() const {

  return true;
}

void HashGetResponse::Swap(HashGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGetResponse::InternalSwap(HashGetResponse* other) {
  std::swap(status_, other->status_);
  fvs_.UnsafeArenaSwap(&other->fvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGetResponse_descriptor_;
  metadata.reflection = HashGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGetResponse

// optional .uranium.common.Status status = 1;
void HashGetResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashGetResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashGetResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashGetResponse.status)
}

// repeated .uranium.api.FieldValue fvs = 2;
int HashGetResponse::fvs_size() const {
  return fvs_.size();
}
void HashGetResponse::clear_fvs() {
  fvs_.Clear();
}
const ::uranium::api::FieldValue& HashGetResponse::fvs(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetResponse.fvs)
  return fvs_.Get(index);
}
::uranium::api::FieldValue* HashGetResponse::mutable_fvs(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetResponse.fvs)
  return fvs_.Mutable(index);
}
::uranium::api::FieldValue* HashGetResponse::add_fvs() {
  // @@protoc_insertion_point(field_add:uranium.api.HashGetResponse.fvs)
  return fvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::FieldValue >*
HashGetResponse::mutable_fvs() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.HashGetResponse.fvs)
  return &fvs_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::FieldValue >&
HashGetResponse::fvs() const {
  // @@protoc_insertion_point(field_list:uranium.api.HashGetResponse.fvs)
  return fvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGetAllRequest::kTableNameFieldNumber;
const int HashGetAllRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGetAllRequest::HashGetAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashGetAllRequest)
}

void HashGetAllRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

HashGetAllRequest::HashGetAllRequest(const HashGetAllRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashGetAllRequest)
}

void HashGetAllRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

HashGetAllRequest::~HashGetAllRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashGetAllRequest)
  SharedDtor();
}

void HashGetAllRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void HashGetAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGetAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGetAllRequest_descriptor_;
}

const HashGetAllRequest& HashGetAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashGetAllRequest* HashGetAllRequest::default_instance_ = NULL;

HashGetAllRequest* HashGetAllRequest::New(::google::protobuf::Arena* arena) const {
  HashGetAllRequest* n = new HashGetAllRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGetAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashGetAllRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool HashGetAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashGetAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashGetAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashGetAllRequest)
  return false;
#undef DO_
}

void HashGetAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashGetAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashGetAllRequest)
}

::google::protobuf::uint8* HashGetAllRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashGetAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashGetAllRequest)
  return target;
}

int HashGetAllRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashGetAllRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGetAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashGetAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashGetAllRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGetAllRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashGetAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashGetAllRequest)
    MergeFrom(*source);
  }
}

void HashGetAllRequest::MergeFrom(const HashGetAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashGetAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void HashGetAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashGetAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGetAllRequest::CopyFrom(const HashGetAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashGetAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGetAllRequest::IsInitialized() const {

  return true;
}

void HashGetAllRequest::Swap(HashGetAllRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGetAllRequest::InternalSwap(HashGetAllRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGetAllRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGetAllRequest_descriptor_;
  metadata.reflection = HashGetAllRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGetAllRequest

// optional .uranium.common.TableName table_name = 1;
bool HashGetAllRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashGetAllRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashGetAllRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashGetAllRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashGetAllRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashGetAllRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashGetAllRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashGetAllRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashGetAllRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashGetAllRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashGetAllRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashGetAllRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllRequest.key)
  return key_;
}
::uranium::api::Key* HashGetAllRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashGetAllRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashGetAllRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashGetAllRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGetAllResponse::kStatusFieldNumber;
const int HashGetAllResponse::kFvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGetAllResponse::HashGetAllResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashGetAllResponse)
}

void HashGetAllResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashGetAllResponse::HashGetAllResponse(const HashGetAllResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashGetAllResponse)
}

void HashGetAllResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

HashGetAllResponse::~HashGetAllResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashGetAllResponse)
  SharedDtor();
}

void HashGetAllResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashGetAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGetAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGetAllResponse_descriptor_;
}

const HashGetAllResponse& HashGetAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashGetAllResponse* HashGetAllResponse::default_instance_ = NULL;

HashGetAllResponse* HashGetAllResponse::New(::google::protobuf::Arena* arena) const {
  HashGetAllResponse* n = new HashGetAllResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGetAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashGetAllResponse)
  status_ = 0;
  fvs_.Clear();
}

bool HashGetAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashGetAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fvs;
        break;
      }

      // repeated .uranium.api.FieldValue fvs = 2;
      case 2: {
        if (tag == 18) {
         parse_fvs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_fvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashGetAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashGetAllResponse)
  return false;
#undef DO_
}

void HashGetAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashGetAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .uranium.api.FieldValue fvs = 2;
  for (unsigned int i = 0, n = this->fvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashGetAllResponse)
}

::google::protobuf::uint8* HashGetAllResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashGetAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .uranium.api.FieldValue fvs = 2;
  for (unsigned int i = 0, n = this->fvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fvs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashGetAllResponse)
  return target;
}

int HashGetAllResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashGetAllResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated .uranium.api.FieldValue fvs = 2;
  total_size += 1 * this->fvs_size();
  for (int i = 0; i < this->fvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGetAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashGetAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashGetAllResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGetAllResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashGetAllResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashGetAllResponse)
    MergeFrom(*source);
  }
}

void HashGetAllResponse::MergeFrom(const HashGetAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashGetAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fvs_.MergeFrom(from.fvs_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HashGetAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashGetAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGetAllResponse::CopyFrom(const HashGetAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashGetAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGetAllResponse::IsInitialized() const {

  return true;
}

void HashGetAllResponse::Swap(HashGetAllResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGetAllResponse::InternalSwap(HashGetAllResponse* other) {
  std::swap(status_, other->status_);
  fvs_.UnsafeArenaSwap(&other->fvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGetAllResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGetAllResponse_descriptor_;
  metadata.reflection = HashGetAllResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGetAllResponse

// optional .uranium.common.Status status = 1;
void HashGetAllResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashGetAllResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashGetAllResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashGetAllResponse.status)
}

// repeated .uranium.api.FieldValue fvs = 2;
int HashGetAllResponse::fvs_size() const {
  return fvs_.size();
}
void HashGetAllResponse::clear_fvs() {
  fvs_.Clear();
}
const ::uranium::api::FieldValue& HashGetAllResponse::fvs(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllResponse.fvs)
  return fvs_.Get(index);
}
::uranium::api::FieldValue* HashGetAllResponse::mutable_fvs(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllResponse.fvs)
  return fvs_.Mutable(index);
}
::uranium::api::FieldValue* HashGetAllResponse::add_fvs() {
  // @@protoc_insertion_point(field_add:uranium.api.HashGetAllResponse.fvs)
  return fvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::FieldValue >*
HashGetAllResponse::mutable_fvs() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.HashGetAllResponse.fvs)
  return &fvs_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::FieldValue >&
HashGetAllResponse::fvs() const {
  // @@protoc_insertion_point(field_list:uranium.api.HashGetAllResponse.fvs)
  return fvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGetAllFieldsRequest::kTableNameFieldNumber;
const int HashGetAllFieldsRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGetAllFieldsRequest::HashGetAllFieldsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashGetAllFieldsRequest)
}

void HashGetAllFieldsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

HashGetAllFieldsRequest::HashGetAllFieldsRequest(const HashGetAllFieldsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashGetAllFieldsRequest)
}

void HashGetAllFieldsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

HashGetAllFieldsRequest::~HashGetAllFieldsRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashGetAllFieldsRequest)
  SharedDtor();
}

void HashGetAllFieldsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void HashGetAllFieldsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGetAllFieldsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGetAllFieldsRequest_descriptor_;
}

const HashGetAllFieldsRequest& HashGetAllFieldsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashGetAllFieldsRequest* HashGetAllFieldsRequest::default_instance_ = NULL;

HashGetAllFieldsRequest* HashGetAllFieldsRequest::New(::google::protobuf::Arena* arena) const {
  HashGetAllFieldsRequest* n = new HashGetAllFieldsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGetAllFieldsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashGetAllFieldsRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool HashGetAllFieldsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashGetAllFieldsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashGetAllFieldsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashGetAllFieldsRequest)
  return false;
#undef DO_
}

void HashGetAllFieldsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashGetAllFieldsRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashGetAllFieldsRequest)
}

::google::protobuf::uint8* HashGetAllFieldsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashGetAllFieldsRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashGetAllFieldsRequest)
  return target;
}

int HashGetAllFieldsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashGetAllFieldsRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGetAllFieldsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashGetAllFieldsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashGetAllFieldsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGetAllFieldsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashGetAllFieldsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashGetAllFieldsRequest)
    MergeFrom(*source);
  }
}

void HashGetAllFieldsRequest::MergeFrom(const HashGetAllFieldsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashGetAllFieldsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void HashGetAllFieldsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashGetAllFieldsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGetAllFieldsRequest::CopyFrom(const HashGetAllFieldsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashGetAllFieldsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGetAllFieldsRequest::IsInitialized() const {

  return true;
}

void HashGetAllFieldsRequest::Swap(HashGetAllFieldsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGetAllFieldsRequest::InternalSwap(HashGetAllFieldsRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGetAllFieldsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGetAllFieldsRequest_descriptor_;
  metadata.reflection = HashGetAllFieldsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGetAllFieldsRequest

// optional .uranium.common.TableName table_name = 1;
bool HashGetAllFieldsRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashGetAllFieldsRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashGetAllFieldsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllFieldsRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashGetAllFieldsRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllFieldsRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashGetAllFieldsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashGetAllFieldsRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashGetAllFieldsRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashGetAllFieldsRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashGetAllFieldsRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashGetAllFieldsRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashGetAllFieldsRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllFieldsRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashGetAllFieldsRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllFieldsRequest.key)
  return key_;
}
::uranium::api::Key* HashGetAllFieldsRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashGetAllFieldsRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashGetAllFieldsRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashGetAllFieldsRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGetAllFieldsResponse::kStatusFieldNumber;
const int HashGetAllFieldsResponse::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGetAllFieldsResponse::HashGetAllFieldsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashGetAllFieldsResponse)
}

void HashGetAllFieldsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashGetAllFieldsResponse::HashGetAllFieldsResponse(const HashGetAllFieldsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashGetAllFieldsResponse)
}

void HashGetAllFieldsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

HashGetAllFieldsResponse::~HashGetAllFieldsResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashGetAllFieldsResponse)
  SharedDtor();
}

void HashGetAllFieldsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashGetAllFieldsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGetAllFieldsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGetAllFieldsResponse_descriptor_;
}

const HashGetAllFieldsResponse& HashGetAllFieldsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashGetAllFieldsResponse* HashGetAllFieldsResponse::default_instance_ = NULL;

HashGetAllFieldsResponse* HashGetAllFieldsResponse::New(::google::protobuf::Arena* arena) const {
  HashGetAllFieldsResponse* n = new HashGetAllFieldsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGetAllFieldsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashGetAllFieldsResponse)
  status_ = 0;
  fields_.Clear();
}

bool HashGetAllFieldsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashGetAllFieldsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fields;
        break;
      }

      // repeated .uranium.api.Field fields = 2;
      case 2: {
        if (tag == 18) {
         parse_fields:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_fields;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashGetAllFieldsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashGetAllFieldsResponse)
  return false;
#undef DO_
}

void HashGetAllFieldsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashGetAllFieldsResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .uranium.api.Field fields = 2;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fields(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashGetAllFieldsResponse)
}

::google::protobuf::uint8* HashGetAllFieldsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashGetAllFieldsResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .uranium.api.Field fields = 2;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fields(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashGetAllFieldsResponse)
  return target;
}

int HashGetAllFieldsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashGetAllFieldsResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated .uranium.api.Field fields = 2;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGetAllFieldsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashGetAllFieldsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashGetAllFieldsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGetAllFieldsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashGetAllFieldsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashGetAllFieldsResponse)
    MergeFrom(*source);
  }
}

void HashGetAllFieldsResponse::MergeFrom(const HashGetAllFieldsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashGetAllFieldsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fields_.MergeFrom(from.fields_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HashGetAllFieldsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashGetAllFieldsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGetAllFieldsResponse::CopyFrom(const HashGetAllFieldsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashGetAllFieldsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGetAllFieldsResponse::IsInitialized() const {

  return true;
}

void HashGetAllFieldsResponse::Swap(HashGetAllFieldsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGetAllFieldsResponse::InternalSwap(HashGetAllFieldsResponse* other) {
  std::swap(status_, other->status_);
  fields_.UnsafeArenaSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGetAllFieldsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGetAllFieldsResponse_descriptor_;
  metadata.reflection = HashGetAllFieldsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGetAllFieldsResponse

// optional .uranium.common.Status status = 1;
void HashGetAllFieldsResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashGetAllFieldsResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllFieldsResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashGetAllFieldsResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashGetAllFieldsResponse.status)
}

// repeated .uranium.api.Field fields = 2;
int HashGetAllFieldsResponse::fields_size() const {
  return fields_.size();
}
void HashGetAllFieldsResponse::clear_fields() {
  fields_.Clear();
}
const ::uranium::api::Field& HashGetAllFieldsResponse::fields(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllFieldsResponse.fields)
  return fields_.Get(index);
}
::uranium::api::Field* HashGetAllFieldsResponse::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllFieldsResponse.fields)
  return fields_.Mutable(index);
}
::uranium::api::Field* HashGetAllFieldsResponse::add_fields() {
  // @@protoc_insertion_point(field_add:uranium.api.HashGetAllFieldsResponse.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Field >*
HashGetAllFieldsResponse::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.HashGetAllFieldsResponse.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Field >&
HashGetAllFieldsResponse::fields() const {
  // @@protoc_insertion_point(field_list:uranium.api.HashGetAllFieldsResponse.fields)
  return fields_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGetAllValuesRequest::kTableNameFieldNumber;
const int HashGetAllValuesRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGetAllValuesRequest::HashGetAllValuesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashGetAllValuesRequest)
}

void HashGetAllValuesRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

HashGetAllValuesRequest::HashGetAllValuesRequest(const HashGetAllValuesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashGetAllValuesRequest)
}

void HashGetAllValuesRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

HashGetAllValuesRequest::~HashGetAllValuesRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashGetAllValuesRequest)
  SharedDtor();
}

void HashGetAllValuesRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void HashGetAllValuesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGetAllValuesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGetAllValuesRequest_descriptor_;
}

const HashGetAllValuesRequest& HashGetAllValuesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashGetAllValuesRequest* HashGetAllValuesRequest::default_instance_ = NULL;

HashGetAllValuesRequest* HashGetAllValuesRequest::New(::google::protobuf::Arena* arena) const {
  HashGetAllValuesRequest* n = new HashGetAllValuesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGetAllValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashGetAllValuesRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool HashGetAllValuesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashGetAllValuesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashGetAllValuesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashGetAllValuesRequest)
  return false;
#undef DO_
}

void HashGetAllValuesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashGetAllValuesRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashGetAllValuesRequest)
}

::google::protobuf::uint8* HashGetAllValuesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashGetAllValuesRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashGetAllValuesRequest)
  return target;
}

int HashGetAllValuesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashGetAllValuesRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGetAllValuesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashGetAllValuesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashGetAllValuesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGetAllValuesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashGetAllValuesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashGetAllValuesRequest)
    MergeFrom(*source);
  }
}

void HashGetAllValuesRequest::MergeFrom(const HashGetAllValuesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashGetAllValuesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void HashGetAllValuesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashGetAllValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGetAllValuesRequest::CopyFrom(const HashGetAllValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashGetAllValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGetAllValuesRequest::IsInitialized() const {

  return true;
}

void HashGetAllValuesRequest::Swap(HashGetAllValuesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGetAllValuesRequest::InternalSwap(HashGetAllValuesRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGetAllValuesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGetAllValuesRequest_descriptor_;
  metadata.reflection = HashGetAllValuesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGetAllValuesRequest

// optional .uranium.common.TableName table_name = 1;
bool HashGetAllValuesRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashGetAllValuesRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashGetAllValuesRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllValuesRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashGetAllValuesRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllValuesRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashGetAllValuesRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashGetAllValuesRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashGetAllValuesRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashGetAllValuesRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashGetAllValuesRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashGetAllValuesRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashGetAllValuesRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllValuesRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashGetAllValuesRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllValuesRequest.key)
  return key_;
}
::uranium::api::Key* HashGetAllValuesRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashGetAllValuesRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashGetAllValuesRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashGetAllValuesRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGetAllValuesResponse::kStatusFieldNumber;
const int HashGetAllValuesResponse::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGetAllValuesResponse::HashGetAllValuesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashGetAllValuesResponse)
}

void HashGetAllValuesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashGetAllValuesResponse::HashGetAllValuesResponse(const HashGetAllValuesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashGetAllValuesResponse)
}

void HashGetAllValuesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

HashGetAllValuesResponse::~HashGetAllValuesResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashGetAllValuesResponse)
  SharedDtor();
}

void HashGetAllValuesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashGetAllValuesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGetAllValuesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGetAllValuesResponse_descriptor_;
}

const HashGetAllValuesResponse& HashGetAllValuesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashGetAllValuesResponse* HashGetAllValuesResponse::default_instance_ = NULL;

HashGetAllValuesResponse* HashGetAllValuesResponse::New(::google::protobuf::Arena* arena) const {
  HashGetAllValuesResponse* n = new HashGetAllValuesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGetAllValuesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashGetAllValuesResponse)
  status_ = 0;
  values_.Clear();
}

bool HashGetAllValuesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashGetAllValuesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashGetAllValuesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashGetAllValuesResponse)
  return false;
#undef DO_
}

void HashGetAllValuesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashGetAllValuesResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .uranium.api.Value values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashGetAllValuesResponse)
}

::google::protobuf::uint8* HashGetAllValuesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashGetAllValuesResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .uranium.api.Value values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashGetAllValuesResponse)
  return target;
}

int HashGetAllValuesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashGetAllValuesResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated .uranium.api.Value values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGetAllValuesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashGetAllValuesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashGetAllValuesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGetAllValuesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashGetAllValuesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashGetAllValuesResponse)
    MergeFrom(*source);
  }
}

void HashGetAllValuesResponse::MergeFrom(const HashGetAllValuesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashGetAllValuesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HashGetAllValuesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashGetAllValuesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGetAllValuesResponse::CopyFrom(const HashGetAllValuesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashGetAllValuesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGetAllValuesResponse::IsInitialized() const {

  return true;
}

void HashGetAllValuesResponse::Swap(HashGetAllValuesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGetAllValuesResponse::InternalSwap(HashGetAllValuesResponse* other) {
  std::swap(status_, other->status_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGetAllValuesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGetAllValuesResponse_descriptor_;
  metadata.reflection = HashGetAllValuesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGetAllValuesResponse

// optional .uranium.common.Status status = 1;
void HashGetAllValuesResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashGetAllValuesResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllValuesResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashGetAllValuesResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashGetAllValuesResponse.status)
}

// repeated .uranium.api.Value values = 2;
int HashGetAllValuesResponse::values_size() const {
  return values_.size();
}
void HashGetAllValuesResponse::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& HashGetAllValuesResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.HashGetAllValuesResponse.values)
  return values_.Get(index);
}
::uranium::api::Value* HashGetAllValuesResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.HashGetAllValuesResponse.values)
  return values_.Mutable(index);
}
::uranium::api::Value* HashGetAllValuesResponse::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.HashGetAllValuesResponse.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
HashGetAllValuesResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.HashGetAllValuesResponse.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
HashGetAllValuesResponse::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.HashGetAllValuesResponse.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashLengthRequest::kTableNameFieldNumber;
const int HashLengthRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashLengthRequest::HashLengthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashLengthRequest)
}

void HashLengthRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

HashLengthRequest::HashLengthRequest(const HashLengthRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashLengthRequest)
}

void HashLengthRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

HashLengthRequest::~HashLengthRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashLengthRequest)
  SharedDtor();
}

void HashLengthRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void HashLengthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashLengthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashLengthRequest_descriptor_;
}

const HashLengthRequest& HashLengthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashLengthRequest* HashLengthRequest::default_instance_ = NULL;

HashLengthRequest* HashLengthRequest::New(::google::protobuf::Arena* arena) const {
  HashLengthRequest* n = new HashLengthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashLengthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashLengthRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool HashLengthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashLengthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashLengthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashLengthRequest)
  return false;
#undef DO_
}

void HashLengthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashLengthRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashLengthRequest)
}

::google::protobuf::uint8* HashLengthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashLengthRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashLengthRequest)
  return target;
}

int HashLengthRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashLengthRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashLengthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashLengthRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashLengthRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashLengthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashLengthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashLengthRequest)
    MergeFrom(*source);
  }
}

void HashLengthRequest::MergeFrom(const HashLengthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashLengthRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void HashLengthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashLengthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashLengthRequest::CopyFrom(const HashLengthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashLengthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashLengthRequest::IsInitialized() const {

  return true;
}

void HashLengthRequest::Swap(HashLengthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashLengthRequest::InternalSwap(HashLengthRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashLengthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashLengthRequest_descriptor_;
  metadata.reflection = HashLengthRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashLengthRequest

// optional .uranium.common.TableName table_name = 1;
bool HashLengthRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashLengthRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashLengthRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashLengthRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashLengthRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashLengthRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashLengthRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashLengthRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashLengthRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashLengthRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashLengthRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashLengthRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashLengthRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashLengthRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashLengthRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashLengthRequest.key)
  return key_;
}
::uranium::api::Key* HashLengthRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashLengthRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashLengthRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashLengthRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashLengthResponse::kStatusFieldNumber;
const int HashLengthResponse::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashLengthResponse::HashLengthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashLengthResponse)
}

void HashLengthResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashLengthResponse::HashLengthResponse(const HashLengthResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashLengthResponse)
}

void HashLengthResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  length_ = GOOGLE_LONGLONG(0);
}

HashLengthResponse::~HashLengthResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashLengthResponse)
  SharedDtor();
}

void HashLengthResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashLengthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashLengthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashLengthResponse_descriptor_;
}

const HashLengthResponse& HashLengthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashLengthResponse* HashLengthResponse::default_instance_ = NULL;

HashLengthResponse* HashLengthResponse::New(::google::protobuf::Arena* arena) const {
  HashLengthResponse* n = new HashLengthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashLengthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashLengthResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HashLengthResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HashLengthResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool HashLengthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashLengthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int64 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashLengthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashLengthResponse)
  return false;
#undef DO_
}

void HashLengthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashLengthResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashLengthResponse)
}

::google::protobuf::uint8* HashLengthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashLengthResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashLengthResponse)
  return target;
}

int HashLengthResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashLengthResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashLengthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashLengthResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashLengthResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashLengthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashLengthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashLengthResponse)
    MergeFrom(*source);
  }
}

void HashLengthResponse::MergeFrom(const HashLengthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashLengthResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void HashLengthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashLengthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashLengthResponse::CopyFrom(const HashLengthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashLengthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashLengthResponse::IsInitialized() const {

  return true;
}

void HashLengthResponse::Swap(HashLengthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashLengthResponse::InternalSwap(HashLengthResponse* other) {
  std::swap(status_, other->status_);
  std::swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashLengthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashLengthResponse_descriptor_;
  metadata.reflection = HashLengthResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashLengthResponse

// optional .uranium.common.Status status = 1;
void HashLengthResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashLengthResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashLengthResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashLengthResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashLengthResponse.status)
}

// optional int64 length = 2;
void HashLengthResponse::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 HashLengthResponse::length() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashLengthResponse.length)
  return length_;
}
 void HashLengthResponse::set_length(::google::protobuf::int64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashLengthResponse.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashSetRequest::kTableNameFieldNumber;
const int HashSetRequest::kKeyFieldNumber;
const int HashSetRequest::kFvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashSetRequest::HashSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashSetRequest)
}

void HashSetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

HashSetRequest::HashSetRequest(const HashSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashSetRequest)
}

void HashSetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

HashSetRequest::~HashSetRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashSetRequest)
  SharedDtor();
}

void HashSetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void HashSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashSetRequest_descriptor_;
}

const HashSetRequest& HashSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashSetRequest* HashSetRequest::default_instance_ = NULL;

HashSetRequest* HashSetRequest::New(::google::protobuf::Arena* arena) const {
  HashSetRequest* n = new HashSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashSetRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  fvs_.Clear();
}

bool HashSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fvs;
        break;
      }

      // repeated .uranium.api.FieldValue fvs = 3;
      case 3: {
        if (tag == 26) {
         parse_fvs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashSetRequest)
  return false;
#undef DO_
}

void HashSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashSetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.FieldValue fvs = 3;
  for (unsigned int i = 0, n = this->fvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashSetRequest)
}

::google::protobuf::uint8* HashSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashSetRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.FieldValue fvs = 3;
  for (unsigned int i = 0, n = this->fvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fvs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashSetRequest)
  return target;
}

int HashSetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashSetRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.FieldValue fvs = 3;
  total_size += 1 * this->fvs_size();
  for (int i = 0; i < this->fvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fvs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashSetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashSetRequest)
    MergeFrom(*source);
  }
}

void HashSetRequest::MergeFrom(const HashSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fvs_.MergeFrom(from.fvs_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void HashSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashSetRequest::CopyFrom(const HashSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashSetRequest::IsInitialized() const {

  return true;
}

void HashSetRequest::Swap(HashSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashSetRequest::InternalSwap(HashSetRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  fvs_.UnsafeArenaSwap(&other->fvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashSetRequest_descriptor_;
  metadata.reflection = HashSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashSetRequest

// optional .uranium.common.TableName table_name = 1;
bool HashSetRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashSetRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashSetRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashSetRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashSetRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashSetRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashSetRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashSetRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashSetRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashSetRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashSetRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashSetRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashSetRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashSetRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashSetRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashSetRequest.key)
  return key_;
}
::uranium::api::Key* HashSetRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashSetRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashSetRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashSetRequest.key)
}

// repeated .uranium.api.FieldValue fvs = 3;
int HashSetRequest::fvs_size() const {
  return fvs_.size();
}
void HashSetRequest::clear_fvs() {
  fvs_.Clear();
}
const ::uranium::api::FieldValue& HashSetRequest::fvs(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.HashSetRequest.fvs)
  return fvs_.Get(index);
}
::uranium::api::FieldValue* HashSetRequest::mutable_fvs(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.HashSetRequest.fvs)
  return fvs_.Mutable(index);
}
::uranium::api::FieldValue* HashSetRequest::add_fvs() {
  // @@protoc_insertion_point(field_add:uranium.api.HashSetRequest.fvs)
  return fvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::FieldValue >*
HashSetRequest::mutable_fvs() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.HashSetRequest.fvs)
  return &fvs_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::FieldValue >&
HashSetRequest::fvs() const {
  // @@protoc_insertion_point(field_list:uranium.api.HashSetRequest.fvs)
  return fvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashSetResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashSetResponse::HashSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashSetResponse)
}

void HashSetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashSetResponse::HashSetResponse(const HashSetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashSetResponse)
}

void HashSetResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

HashSetResponse::~HashSetResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashSetResponse)
  SharedDtor();
}

void HashSetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashSetResponse_descriptor_;
}

const HashSetResponse& HashSetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashSetResponse* HashSetResponse::default_instance_ = NULL;

HashSetResponse* HashSetResponse::New(::google::protobuf::Arena* arena) const {
  HashSetResponse* n = new HashSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashSetResponse)
  status_ = 0;
}

bool HashSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashSetResponse)
  return false;
#undef DO_
}

void HashSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashSetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashSetResponse)
}

::google::protobuf::uint8* HashSetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashSetResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashSetResponse)
  return target;
}

int HashSetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashSetResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashSetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashSetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashSetResponse)
    MergeFrom(*source);
  }
}

void HashSetResponse::MergeFrom(const HashSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashSetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HashSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashSetResponse::CopyFrom(const HashSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashSetResponse::IsInitialized() const {

  return true;
}

void HashSetResponse::Swap(HashSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashSetResponse::InternalSwap(HashSetResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashSetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashSetResponse_descriptor_;
  metadata.reflection = HashSetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashSetResponse

// optional .uranium.common.Status status = 1;
void HashSetResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashSetResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashSetResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashSetResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashSetResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashSetXRequest::kTableNameFieldNumber;
const int HashSetXRequest::kKeyFieldNumber;
const int HashSetXRequest::kFvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashSetXRequest::HashSetXRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashSetXRequest)
}

void HashSetXRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
  fv_ = const_cast< ::uranium::api::FieldValue*>(&::uranium::api::FieldValue::default_instance());
}

HashSetXRequest::HashSetXRequest(const HashSetXRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashSetXRequest)
}

void HashSetXRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
  fv_ = NULL;
}

HashSetXRequest::~HashSetXRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashSetXRequest)
  SharedDtor();
}

void HashSetXRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
    delete fv_;
  }
}

void HashSetXRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashSetXRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashSetXRequest_descriptor_;
}

const HashSetXRequest& HashSetXRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashSetXRequest* HashSetXRequest::default_instance_ = NULL;

HashSetXRequest* HashSetXRequest::New(::google::protobuf::Arena* arena) const {
  HashSetXRequest* n = new HashSetXRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashSetXRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashSetXRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && fv_ != NULL) delete fv_;
  fv_ = NULL;
}

bool HashSetXRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashSetXRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fv;
        break;
      }

      // optional .uranium.api.FieldValue fv = 3;
      case 3: {
        if (tag == 26) {
         parse_fv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashSetXRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashSetXRequest)
  return false;
#undef DO_
}

void HashSetXRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashSetXRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // optional .uranium.api.FieldValue fv = 3;
  if (this->has_fv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fv_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashSetXRequest)
}

::google::protobuf::uint8* HashSetXRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashSetXRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // optional .uranium.api.FieldValue fv = 3;
  if (this->has_fv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->fv_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashSetXRequest)
  return target;
}

int HashSetXRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashSetXRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional .uranium.api.FieldValue fv = 3;
  if (this->has_fv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fv_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashSetXRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashSetXRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashSetXRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashSetXRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashSetXRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashSetXRequest)
    MergeFrom(*source);
  }
}

void HashSetXRequest::MergeFrom(const HashSetXRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashSetXRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
  if (from.has_fv()) {
    mutable_fv()->::uranium::api::FieldValue::MergeFrom(from.fv());
  }
}

void HashSetXRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashSetXRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashSetXRequest::CopyFrom(const HashSetXRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashSetXRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashSetXRequest::IsInitialized() const {

  return true;
}

void HashSetXRequest::Swap(HashSetXRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashSetXRequest::InternalSwap(HashSetXRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  std::swap(fv_, other->fv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashSetXRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashSetXRequest_descriptor_;
  metadata.reflection = HashSetXRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashSetXRequest

// optional .uranium.common.TableName table_name = 1;
bool HashSetXRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashSetXRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashSetXRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashSetXRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashSetXRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashSetXRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashSetXRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashSetXRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashSetXRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashSetXRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashSetXRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashSetXRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashSetXRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashSetXRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashSetXRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashSetXRequest.key)
  return key_;
}
::uranium::api::Key* HashSetXRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashSetXRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashSetXRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashSetXRequest.key)
}

// optional .uranium.api.FieldValue fv = 3;
bool HashSetXRequest::has_fv() const {
  return !_is_default_instance_ && fv_ != NULL;
}
void HashSetXRequest::clear_fv() {
  if (GetArenaNoVirtual() == NULL && fv_ != NULL) delete fv_;
  fv_ = NULL;
}
const ::uranium::api::FieldValue& HashSetXRequest::fv() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashSetXRequest.fv)
  return fv_ != NULL ? *fv_ : *default_instance_->fv_;
}
::uranium::api::FieldValue* HashSetXRequest::mutable_fv() {
  
  if (fv_ == NULL) {
    fv_ = new ::uranium::api::FieldValue;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashSetXRequest.fv)
  return fv_;
}
::uranium::api::FieldValue* HashSetXRequest::release_fv() {
  // @@protoc_insertion_point(field_release:uranium.api.HashSetXRequest.fv)
  
  ::uranium::api::FieldValue* temp = fv_;
  fv_ = NULL;
  return temp;
}
void HashSetXRequest::set_allocated_fv(::uranium::api::FieldValue* fv) {
  delete fv_;
  fv_ = fv;
  if (fv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashSetXRequest.fv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashSetXResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashSetXResponse::HashSetXResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashSetXResponse)
}

void HashSetXResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashSetXResponse::HashSetXResponse(const HashSetXResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashSetXResponse)
}

void HashSetXResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

HashSetXResponse::~HashSetXResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashSetXResponse)
  SharedDtor();
}

void HashSetXResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashSetXResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashSetXResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashSetXResponse_descriptor_;
}

const HashSetXResponse& HashSetXResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashSetXResponse* HashSetXResponse::default_instance_ = NULL;

HashSetXResponse* HashSetXResponse::New(::google::protobuf::Arena* arena) const {
  HashSetXResponse* n = new HashSetXResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashSetXResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashSetXResponse)
  status_ = 0;
}

bool HashSetXResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashSetXResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashSetXResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashSetXResponse)
  return false;
#undef DO_
}

void HashSetXResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashSetXResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashSetXResponse)
}

::google::protobuf::uint8* HashSetXResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashSetXResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashSetXResponse)
  return target;
}

int HashSetXResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashSetXResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashSetXResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashSetXResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashSetXResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashSetXResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashSetXResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashSetXResponse)
    MergeFrom(*source);
  }
}

void HashSetXResponse::MergeFrom(const HashSetXResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashSetXResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HashSetXResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashSetXResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashSetXResponse::CopyFrom(const HashSetXResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashSetXResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashSetXResponse::IsInitialized() const {

  return true;
}

void HashSetXResponse::Swap(HashSetXResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashSetXResponse::InternalSwap(HashSetXResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashSetXResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashSetXResponse_descriptor_;
  metadata.reflection = HashSetXResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashSetXResponse

// optional .uranium.common.Status status = 1;
void HashSetXResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashSetXResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashSetXResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashSetXResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashSetXResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashRemoveRequest::kTableNameFieldNumber;
const int HashRemoveRequest::kKeyFieldNumber;
const int HashRemoveRequest::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashRemoveRequest::HashRemoveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashRemoveRequest)
}

void HashRemoveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

HashRemoveRequest::HashRemoveRequest(const HashRemoveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashRemoveRequest)
}

void HashRemoveRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

HashRemoveRequest::~HashRemoveRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashRemoveRequest)
  SharedDtor();
}

void HashRemoveRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void HashRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashRemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashRemoveRequest_descriptor_;
}

const HashRemoveRequest& HashRemoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashRemoveRequest* HashRemoveRequest::default_instance_ = NULL;

HashRemoveRequest* HashRemoveRequest::New(::google::protobuf::Arena* arena) const {
  HashRemoveRequest* n = new HashRemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashRemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashRemoveRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  fields_.Clear();
}

bool HashRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashRemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        break;
      }

      // repeated .uranium.api.Field fields = 3;
      case 3: {
        if (tag == 26) {
         parse_fields:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fields;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashRemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashRemoveRequest)
  return false;
#undef DO_
}

void HashRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashRemoveRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.Field fields = 3;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fields(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashRemoveRequest)
}

::google::protobuf::uint8* HashRemoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashRemoveRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.Field fields = 3;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fields(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashRemoveRequest)
  return target;
}

int HashRemoveRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashRemoveRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.Field fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashRemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashRemoveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashRemoveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashRemoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashRemoveRequest)
    MergeFrom(*source);
  }
}

void HashRemoveRequest::MergeFrom(const HashRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashRemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fields_.MergeFrom(from.fields_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void HashRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRemoveRequest::CopyFrom(const HashRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRemoveRequest::IsInitialized() const {

  return true;
}

void HashRemoveRequest::Swap(HashRemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashRemoveRequest::InternalSwap(HashRemoveRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  fields_.UnsafeArenaSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashRemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashRemoveRequest_descriptor_;
  metadata.reflection = HashRemoveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashRemoveRequest

// optional .uranium.common.TableName table_name = 1;
bool HashRemoveRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashRemoveRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashRemoveRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashRemoveRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashRemoveRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashRemoveRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashRemoveRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashRemoveRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashRemoveRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashRemoveRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashRemoveRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashRemoveRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashRemoveRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashRemoveRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashRemoveRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashRemoveRequest.key)
  return key_;
}
::uranium::api::Key* HashRemoveRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashRemoveRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashRemoveRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashRemoveRequest.key)
}

// repeated .uranium.api.Field fields = 3;
int HashRemoveRequest::fields_size() const {
  return fields_.size();
}
void HashRemoveRequest::clear_fields() {
  fields_.Clear();
}
const ::uranium::api::Field& HashRemoveRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.HashRemoveRequest.fields)
  return fields_.Get(index);
}
::uranium::api::Field* HashRemoveRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.HashRemoveRequest.fields)
  return fields_.Mutable(index);
}
::uranium::api::Field* HashRemoveRequest::add_fields() {
  // @@protoc_insertion_point(field_add:uranium.api.HashRemoveRequest.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Field >*
HashRemoveRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.HashRemoveRequest.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Field >&
HashRemoveRequest::fields() const {
  // @@protoc_insertion_point(field_list:uranium.api.HashRemoveRequest.fields)
  return fields_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashRemoveResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashRemoveResponse::HashRemoveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashRemoveResponse)
}

void HashRemoveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashRemoveResponse::HashRemoveResponse(const HashRemoveResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashRemoveResponse)
}

void HashRemoveResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

HashRemoveResponse::~HashRemoveResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashRemoveResponse)
  SharedDtor();
}

void HashRemoveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashRemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashRemoveResponse_descriptor_;
}

const HashRemoveResponse& HashRemoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashRemoveResponse* HashRemoveResponse::default_instance_ = NULL;

HashRemoveResponse* HashRemoveResponse::New(::google::protobuf::Arena* arena) const {
  HashRemoveResponse* n = new HashRemoveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashRemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashRemoveResponse)
  status_ = 0;
}

bool HashRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashRemoveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashRemoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashRemoveResponse)
  return false;
#undef DO_
}

void HashRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashRemoveResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashRemoveResponse)
}

::google::protobuf::uint8* HashRemoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashRemoveResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashRemoveResponse)
  return target;
}

int HashRemoveResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashRemoveResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashRemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashRemoveResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashRemoveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashRemoveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashRemoveResponse)
    MergeFrom(*source);
  }
}

void HashRemoveResponse::MergeFrom(const HashRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashRemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HashRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRemoveResponse::CopyFrom(const HashRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRemoveResponse::IsInitialized() const {

  return true;
}

void HashRemoveResponse::Swap(HashRemoveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashRemoveResponse::InternalSwap(HashRemoveResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashRemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashRemoveResponse_descriptor_;
  metadata.reflection = HashRemoveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashRemoveResponse

// optional .uranium.common.Status status = 1;
void HashRemoveResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashRemoveResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashRemoveResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashRemoveResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashRemoveResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashExistsRequest::kTableNameFieldNumber;
const int HashExistsRequest::kKeyFieldNumber;
const int HashExistsRequest::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashExistsRequest::HashExistsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashExistsRequest)
}

void HashExistsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
  field_ = const_cast< ::uranium::api::Field*>(&::uranium::api::Field::default_instance());
}

HashExistsRequest::HashExistsRequest(const HashExistsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashExistsRequest)
}

void HashExistsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
  field_ = NULL;
}

HashExistsRequest::~HashExistsRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashExistsRequest)
  SharedDtor();
}

void HashExistsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
    delete field_;
  }
}

void HashExistsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashExistsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashExistsRequest_descriptor_;
}

const HashExistsRequest& HashExistsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashExistsRequest* HashExistsRequest::default_instance_ = NULL;

HashExistsRequest* HashExistsRequest::New(::google::protobuf::Arena* arena) const {
  HashExistsRequest* n = new HashExistsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashExistsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashExistsRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}

bool HashExistsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashExistsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_field;
        break;
      }

      // optional .uranium.api.Field field = 3;
      case 3: {
        if (tag == 26) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashExistsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashExistsRequest)
  return false;
#undef DO_
}

void HashExistsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashExistsRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // optional .uranium.api.Field field = 3;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->field_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashExistsRequest)
}

::google::protobuf::uint8* HashExistsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashExistsRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // optional .uranium.api.Field field = 3;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->field_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashExistsRequest)
  return target;
}

int HashExistsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashExistsRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional .uranium.api.Field field = 3;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashExistsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashExistsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashExistsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashExistsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashExistsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashExistsRequest)
    MergeFrom(*source);
  }
}

void HashExistsRequest::MergeFrom(const HashExistsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashExistsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
  if (from.has_field()) {
    mutable_field()->::uranium::api::Field::MergeFrom(from.field());
  }
}

void HashExistsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashExistsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashExistsRequest::CopyFrom(const HashExistsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashExistsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashExistsRequest::IsInitialized() const {

  return true;
}

void HashExistsRequest::Swap(HashExistsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashExistsRequest::InternalSwap(HashExistsRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  std::swap(field_, other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashExistsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashExistsRequest_descriptor_;
  metadata.reflection = HashExistsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashExistsRequest

// optional .uranium.common.TableName table_name = 1;
bool HashExistsRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashExistsRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashExistsRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashExistsRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashExistsRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashExistsRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashExistsRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashExistsRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashExistsRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashExistsRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashExistsRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashExistsRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashExistsRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashExistsRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashExistsRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashExistsRequest.key)
  return key_;
}
::uranium::api::Key* HashExistsRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashExistsRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashExistsRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashExistsRequest.key)
}

// optional .uranium.api.Field field = 3;
bool HashExistsRequest::has_field() const {
  return !_is_default_instance_ && field_ != NULL;
}
void HashExistsRequest::clear_field() {
  if (GetArenaNoVirtual() == NULL && field_ != NULL) delete field_;
  field_ = NULL;
}
const ::uranium::api::Field& HashExistsRequest::field() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashExistsRequest.field)
  return field_ != NULL ? *field_ : *default_instance_->field_;
}
::uranium::api::Field* HashExistsRequest::mutable_field() {
  
  if (field_ == NULL) {
    field_ = new ::uranium::api::Field;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashExistsRequest.field)
  return field_;
}
::uranium::api::Field* HashExistsRequest::release_field() {
  // @@protoc_insertion_point(field_release:uranium.api.HashExistsRequest.field)
  
  ::uranium::api::Field* temp = field_;
  field_ = NULL;
  return temp;
}
void HashExistsRequest::set_allocated_field(::uranium::api::Field* field) {
  delete field_;
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashExistsRequest.field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashExistsResponse::kStatusFieldNumber;
const int HashExistsResponse::kExistsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashExistsResponse::HashExistsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashExistsResponse)
}

void HashExistsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashExistsResponse::HashExistsResponse(const HashExistsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashExistsResponse)
}

void HashExistsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  exists_ = false;
}

HashExistsResponse::~HashExistsResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashExistsResponse)
  SharedDtor();
}

void HashExistsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashExistsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashExistsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashExistsResponse_descriptor_;
}

const HashExistsResponse& HashExistsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashExistsResponse* HashExistsResponse::default_instance_ = NULL;

HashExistsResponse* HashExistsResponse::New(::google::protobuf::Arena* arena) const {
  HashExistsResponse* n = new HashExistsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashExistsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashExistsResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HashExistsResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HashExistsResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, exists_);

#undef ZR_HELPER_
#undef ZR_

}

bool HashExistsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashExistsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exists;
        break;
      }

      // optional bool exists = 2;
      case 2: {
        if (tag == 16) {
         parse_exists:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashExistsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashExistsResponse)
  return false;
#undef DO_
}

void HashExistsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashExistsResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional bool exists = 2;
  if (this->exists() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exists(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashExistsResponse)
}

::google::protobuf::uint8* HashExistsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashExistsResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional bool exists = 2;
  if (this->exists() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->exists(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashExistsResponse)
  return target;
}

int HashExistsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashExistsResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional bool exists = 2;
  if (this->exists() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashExistsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashExistsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashExistsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashExistsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashExistsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashExistsResponse)
    MergeFrom(*source);
  }
}

void HashExistsResponse::MergeFrom(const HashExistsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashExistsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.exists() != 0) {
    set_exists(from.exists());
  }
}

void HashExistsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashExistsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashExistsResponse::CopyFrom(const HashExistsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashExistsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashExistsResponse::IsInitialized() const {

  return true;
}

void HashExistsResponse::Swap(HashExistsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashExistsResponse::InternalSwap(HashExistsResponse* other) {
  std::swap(status_, other->status_);
  std::swap(exists_, other->exists_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashExistsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashExistsResponse_descriptor_;
  metadata.reflection = HashExistsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashExistsResponse

// optional .uranium.common.Status status = 1;
void HashExistsResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashExistsResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashExistsResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashExistsResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashExistsResponse.status)
}

// optional bool exists = 2;
void HashExistsResponse::clear_exists() {
  exists_ = false;
}
 bool HashExistsResponse::exists() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashExistsResponse.exists)
  return exists_;
}
 void HashExistsResponse::set_exists(bool value) {
  
  exists_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashExistsResponse.exists)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashRemoveAllRequest::kTableNameFieldNumber;
const int HashRemoveAllRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashRemoveAllRequest::HashRemoveAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashRemoveAllRequest)
}

void HashRemoveAllRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

HashRemoveAllRequest::HashRemoveAllRequest(const HashRemoveAllRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashRemoveAllRequest)
}

void HashRemoveAllRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

HashRemoveAllRequest::~HashRemoveAllRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.HashRemoveAllRequest)
  SharedDtor();
}

void HashRemoveAllRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void HashRemoveAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashRemoveAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashRemoveAllRequest_descriptor_;
}

const HashRemoveAllRequest& HashRemoveAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashRemoveAllRequest* HashRemoveAllRequest::default_instance_ = NULL;

HashRemoveAllRequest* HashRemoveAllRequest::New(::google::protobuf::Arena* arena) const {
  HashRemoveAllRequest* n = new HashRemoveAllRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashRemoveAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashRemoveAllRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool HashRemoveAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashRemoveAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashRemoveAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashRemoveAllRequest)
  return false;
#undef DO_
}

void HashRemoveAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashRemoveAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashRemoveAllRequest)
}

::google::protobuf::uint8* HashRemoveAllRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashRemoveAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashRemoveAllRequest)
  return target;
}

int HashRemoveAllRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashRemoveAllRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashRemoveAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashRemoveAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashRemoveAllRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashRemoveAllRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashRemoveAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashRemoveAllRequest)
    MergeFrom(*source);
  }
}

void HashRemoveAllRequest::MergeFrom(const HashRemoveAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashRemoveAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void HashRemoveAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashRemoveAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRemoveAllRequest::CopyFrom(const HashRemoveAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashRemoveAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRemoveAllRequest::IsInitialized() const {

  return true;
}

void HashRemoveAllRequest::Swap(HashRemoveAllRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashRemoveAllRequest::InternalSwap(HashRemoveAllRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashRemoveAllRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashRemoveAllRequest_descriptor_;
  metadata.reflection = HashRemoveAllRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashRemoveAllRequest

// optional .uranium.common.TableName table_name = 1;
bool HashRemoveAllRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void HashRemoveAllRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& HashRemoveAllRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashRemoveAllRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* HashRemoveAllRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashRemoveAllRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* HashRemoveAllRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.HashRemoveAllRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void HashRemoveAllRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashRemoveAllRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool HashRemoveAllRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void HashRemoveAllRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& HashRemoveAllRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashRemoveAllRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* HashRemoveAllRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.HashRemoveAllRequest.key)
  return key_;
}
::uranium::api::Key* HashRemoveAllRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.HashRemoveAllRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void HashRemoveAllRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.HashRemoveAllRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashRemoveAllResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashRemoveAllResponse::HashRemoveAllResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.HashRemoveAllResponse)
}

void HashRemoveAllResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HashRemoveAllResponse::HashRemoveAllResponse(const HashRemoveAllResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.HashRemoveAllResponse)
}

void HashRemoveAllResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

HashRemoveAllResponse::~HashRemoveAllResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.HashRemoveAllResponse)
  SharedDtor();
}

void HashRemoveAllResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HashRemoveAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashRemoveAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashRemoveAllResponse_descriptor_;
}

const HashRemoveAllResponse& HashRemoveAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

HashRemoveAllResponse* HashRemoveAllResponse::default_instance_ = NULL;

HashRemoveAllResponse* HashRemoveAllResponse::New(::google::protobuf::Arena* arena) const {
  HashRemoveAllResponse* n = new HashRemoveAllResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashRemoveAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.HashRemoveAllResponse)
  status_ = 0;
}

bool HashRemoveAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.HashRemoveAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.HashRemoveAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.HashRemoveAllResponse)
  return false;
#undef DO_
}

void HashRemoveAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.HashRemoveAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.HashRemoveAllResponse)
}

::google::protobuf::uint8* HashRemoveAllResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.HashRemoveAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.HashRemoveAllResponse)
  return target;
}

int HashRemoveAllResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.HashRemoveAllResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashRemoveAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.HashRemoveAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HashRemoveAllResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashRemoveAllResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.HashRemoveAllResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.HashRemoveAllResponse)
    MergeFrom(*source);
  }
}

void HashRemoveAllResponse::MergeFrom(const HashRemoveAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.HashRemoveAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void HashRemoveAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.HashRemoveAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRemoveAllResponse::CopyFrom(const HashRemoveAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.HashRemoveAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRemoveAllResponse::IsInitialized() const {

  return true;
}

void HashRemoveAllResponse::Swap(HashRemoveAllResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashRemoveAllResponse::InternalSwap(HashRemoveAllResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashRemoveAllResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashRemoveAllResponse_descriptor_;
  metadata.reflection = HashRemoveAllResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashRemoveAllResponse

// optional .uranium.common.Status status = 1;
void HashRemoveAllResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status HashRemoveAllResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.HashRemoveAllResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void HashRemoveAllResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.HashRemoveAllResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAddRequest::kTableNameFieldNumber;
const int SetAddRequest::kKeyFieldNumber;
const int SetAddRequest::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAddRequest::SetAddRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetAddRequest)
}

void SetAddRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

SetAddRequest::SetAddRequest(const SetAddRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetAddRequest)
}

void SetAddRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

SetAddRequest::~SetAddRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.SetAddRequest)
  SharedDtor();
}

void SetAddRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void SetAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAddRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAddRequest_descriptor_;
}

const SetAddRequest& SetAddRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetAddRequest* SetAddRequest::default_instance_ = NULL;

SetAddRequest* SetAddRequest::New(::google::protobuf::Arena* arena) const {
  SetAddRequest* n = new SetAddRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetAddRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  values_.Clear();
}

bool SetAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetAddRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 3;
      case 3: {
        if (tag == 26) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetAddRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetAddRequest)
  return false;
#undef DO_
}

void SetAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetAddRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetAddRequest)
}

::google::protobuf::uint8* SetAddRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetAddRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetAddRequest)
  return target;
}

int SetAddRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetAddRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.Value values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetAddRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetAddRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetAddRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetAddRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetAddRequest)
    MergeFrom(*source);
  }
}

void SetAddRequest::MergeFrom(const SetAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetAddRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void SetAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAddRequest::CopyFrom(const SetAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAddRequest::IsInitialized() const {

  return true;
}

void SetAddRequest::Swap(SetAddRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAddRequest::InternalSwap(SetAddRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetAddRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAddRequest_descriptor_;
  metadata.reflection = SetAddRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetAddRequest

// optional .uranium.common.TableName table_name = 1;
bool SetAddRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void SetAddRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& SetAddRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetAddRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* SetAddRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetAddRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* SetAddRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.SetAddRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void SetAddRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetAddRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool SetAddRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SetAddRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& SetAddRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetAddRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* SetAddRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetAddRequest.key)
  return key_;
}
::uranium::api::Key* SetAddRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.SetAddRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void SetAddRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetAddRequest.key)
}

// repeated .uranium.api.Value values = 3;
int SetAddRequest::values_size() const {
  return values_.size();
}
void SetAddRequest::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& SetAddRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.SetAddRequest.values)
  return values_.Get(index);
}
::uranium::api::Value* SetAddRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.SetAddRequest.values)
  return values_.Mutable(index);
}
::uranium::api::Value* SetAddRequest::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.SetAddRequest.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
SetAddRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.SetAddRequest.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
SetAddRequest::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.SetAddRequest.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAddResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAddResponse::SetAddResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetAddResponse)
}

void SetAddResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetAddResponse::SetAddResponse(const SetAddResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetAddResponse)
}

void SetAddResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

SetAddResponse::~SetAddResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.SetAddResponse)
  SharedDtor();
}

void SetAddResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAddResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAddResponse_descriptor_;
}

const SetAddResponse& SetAddResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetAddResponse* SetAddResponse::default_instance_ = NULL;

SetAddResponse* SetAddResponse::New(::google::protobuf::Arena* arena) const {
  SetAddResponse* n = new SetAddResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetAddResponse)
  status_ = 0;
}

bool SetAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetAddResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetAddResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetAddResponse)
  return false;
#undef DO_
}

void SetAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetAddResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetAddResponse)
}

::google::protobuf::uint8* SetAddResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetAddResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetAddResponse)
  return target;
}

int SetAddResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetAddResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetAddResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetAddResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetAddResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetAddResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetAddResponse)
    MergeFrom(*source);
  }
}

void SetAddResponse::MergeFrom(const SetAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetAddResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void SetAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAddResponse::CopyFrom(const SetAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAddResponse::IsInitialized() const {

  return true;
}

void SetAddResponse::Swap(SetAddResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAddResponse::InternalSwap(SetAddResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetAddResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAddResponse_descriptor_;
  metadata.reflection = SetAddResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetAddResponse

// optional .uranium.common.Status status = 1;
void SetAddResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status SetAddResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetAddResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void SetAddResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetAddResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLengthRequest::kTableNameFieldNumber;
const int SetLengthRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLengthRequest::SetLengthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetLengthRequest)
}

void SetLengthRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

SetLengthRequest::SetLengthRequest(const SetLengthRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetLengthRequest)
}

void SetLengthRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

SetLengthRequest::~SetLengthRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.SetLengthRequest)
  SharedDtor();
}

void SetLengthRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void SetLengthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLengthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLengthRequest_descriptor_;
}

const SetLengthRequest& SetLengthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetLengthRequest* SetLengthRequest::default_instance_ = NULL;

SetLengthRequest* SetLengthRequest::New(::google::protobuf::Arena* arena) const {
  SetLengthRequest* n = new SetLengthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLengthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetLengthRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool SetLengthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetLengthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetLengthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetLengthRequest)
  return false;
#undef DO_
}

void SetLengthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetLengthRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetLengthRequest)
}

::google::protobuf::uint8* SetLengthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetLengthRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetLengthRequest)
  return target;
}

int SetLengthRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetLengthRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLengthRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetLengthRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetLengthRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLengthRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetLengthRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetLengthRequest)
    MergeFrom(*source);
  }
}

void SetLengthRequest::MergeFrom(const SetLengthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetLengthRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void SetLengthRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetLengthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLengthRequest::CopyFrom(const SetLengthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetLengthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLengthRequest::IsInitialized() const {

  return true;
}

void SetLengthRequest::Swap(SetLengthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLengthRequest::InternalSwap(SetLengthRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLengthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLengthRequest_descriptor_;
  metadata.reflection = SetLengthRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLengthRequest

// optional .uranium.common.TableName table_name = 1;
bool SetLengthRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void SetLengthRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& SetLengthRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetLengthRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* SetLengthRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetLengthRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* SetLengthRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.SetLengthRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void SetLengthRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetLengthRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool SetLengthRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SetLengthRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& SetLengthRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetLengthRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* SetLengthRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetLengthRequest.key)
  return key_;
}
::uranium::api::Key* SetLengthRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.SetLengthRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void SetLengthRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetLengthRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLengthResponse::kStatusFieldNumber;
const int SetLengthResponse::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLengthResponse::SetLengthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetLengthResponse)
}

void SetLengthResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetLengthResponse::SetLengthResponse(const SetLengthResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetLengthResponse)
}

void SetLengthResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  length_ = GOOGLE_LONGLONG(0);
}

SetLengthResponse::~SetLengthResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.SetLengthResponse)
  SharedDtor();
}

void SetLengthResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetLengthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLengthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLengthResponse_descriptor_;
}

const SetLengthResponse& SetLengthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetLengthResponse* SetLengthResponse::default_instance_ = NULL;

SetLengthResponse* SetLengthResponse::New(::google::protobuf::Arena* arena) const {
  SetLengthResponse* n = new SetLengthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLengthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetLengthResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SetLengthResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetLengthResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool SetLengthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetLengthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int64 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetLengthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetLengthResponse)
  return false;
#undef DO_
}

void SetLengthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetLengthResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetLengthResponse)
}

::google::protobuf::uint8* SetLengthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetLengthResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetLengthResponse)
  return target;
}

int SetLengthResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetLengthResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional int64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLengthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetLengthResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetLengthResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLengthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetLengthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetLengthResponse)
    MergeFrom(*source);
  }
}

void SetLengthResponse::MergeFrom(const SetLengthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetLengthResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void SetLengthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetLengthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLengthResponse::CopyFrom(const SetLengthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetLengthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLengthResponse::IsInitialized() const {

  return true;
}

void SetLengthResponse::Swap(SetLengthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLengthResponse::InternalSwap(SetLengthResponse* other) {
  std::swap(status_, other->status_);
  std::swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLengthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLengthResponse_descriptor_;
  metadata.reflection = SetLengthResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLengthResponse

// optional .uranium.common.Status status = 1;
void SetLengthResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status SetLengthResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetLengthResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void SetLengthResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetLengthResponse.status)
}

// optional int64 length = 2;
void SetLengthResponse::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SetLengthResponse::length() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetLengthResponse.length)
  return length_;
}
 void SetLengthResponse::set_length(::google::protobuf::int64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetLengthResponse.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetIsMemberRequest::kStatusFieldNumber;
const int SetIsMemberRequest::kKeyFieldNumber;
const int SetIsMemberRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetIsMemberRequest::SetIsMemberRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetIsMemberRequest)
}

void SetIsMemberRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
  value_ = const_cast< ::uranium::api::Value*>(&::uranium::api::Value::default_instance());
}

SetIsMemberRequest::SetIsMemberRequest(const SetIsMemberRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetIsMemberRequest)
}

void SetIsMemberRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  key_ = NULL;
  value_ = NULL;
}

SetIsMemberRequest::~SetIsMemberRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.SetIsMemberRequest)
  SharedDtor();
}

void SetIsMemberRequest::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete value_;
  }
}

void SetIsMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetIsMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetIsMemberRequest_descriptor_;
}

const SetIsMemberRequest& SetIsMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetIsMemberRequest* SetIsMemberRequest::default_instance_ = NULL;

SetIsMemberRequest* SetIsMemberRequest::New(::google::protobuf::Arena* arena) const {
  SetIsMemberRequest* n = new SetIsMemberRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetIsMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetIsMemberRequest)
  status_ = 0;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}

bool SetIsMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetIsMemberRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional .uranium.api.Value value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetIsMemberRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetIsMemberRequest)
  return false;
#undef DO_
}

void SetIsMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetIsMemberRequest)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // optional .uranium.api.Value value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetIsMemberRequest)
}

::google::protobuf::uint8* SetIsMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetIsMemberRequest)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // optional .uranium.api.Value value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetIsMemberRequest)
  return target;
}

int SetIsMemberRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetIsMemberRequest)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // optional .uranium.api.Value value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetIsMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetIsMemberRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetIsMemberRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetIsMemberRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetIsMemberRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetIsMemberRequest)
    MergeFrom(*source);
  }
}

void SetIsMemberRequest::MergeFrom(const SetIsMemberRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetIsMemberRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
  if (from.has_value()) {
    mutable_value()->::uranium::api::Value::MergeFrom(from.value());
  }
}

void SetIsMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetIsMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetIsMemberRequest::CopyFrom(const SetIsMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetIsMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIsMemberRequest::IsInitialized() const {

  return true;
}

void SetIsMemberRequest::Swap(SetIsMemberRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetIsMemberRequest::InternalSwap(SetIsMemberRequest* other) {
  std::swap(status_, other->status_);
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetIsMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetIsMemberRequest_descriptor_;
  metadata.reflection = SetIsMemberRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetIsMemberRequest

// optional .uranium.common.Status status = 1;
void SetIsMemberRequest::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status SetIsMemberRequest::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetIsMemberRequest.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void SetIsMemberRequest::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetIsMemberRequest.status)
}

// optional .uranium.api.Key key = 2;
bool SetIsMemberRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SetIsMemberRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& SetIsMemberRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetIsMemberRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* SetIsMemberRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetIsMemberRequest.key)
  return key_;
}
::uranium::api::Key* SetIsMemberRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.SetIsMemberRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void SetIsMemberRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetIsMemberRequest.key)
}

// optional .uranium.api.Value value = 3;
bool SetIsMemberRequest::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void SetIsMemberRequest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::uranium::api::Value& SetIsMemberRequest::value() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetIsMemberRequest.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::uranium::api::Value* SetIsMemberRequest::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::uranium::api::Value;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetIsMemberRequest.value)
  return value_;
}
::uranium::api::Value* SetIsMemberRequest::release_value() {
  // @@protoc_insertion_point(field_release:uranium.api.SetIsMemberRequest.value)
  
  ::uranium::api::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void SetIsMemberRequest::set_allocated_value(::uranium::api::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetIsMemberRequest.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetIsMemberResponse::kStatusFieldNumber;
const int SetIsMemberResponse::kYesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetIsMemberResponse::SetIsMemberResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetIsMemberResponse)
}

void SetIsMemberResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetIsMemberResponse::SetIsMemberResponse(const SetIsMemberResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetIsMemberResponse)
}

void SetIsMemberResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  yes_ = false;
}

SetIsMemberResponse::~SetIsMemberResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.SetIsMemberResponse)
  SharedDtor();
}

void SetIsMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetIsMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetIsMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetIsMemberResponse_descriptor_;
}

const SetIsMemberResponse& SetIsMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetIsMemberResponse* SetIsMemberResponse::default_instance_ = NULL;

SetIsMemberResponse* SetIsMemberResponse::New(::google::protobuf::Arena* arena) const {
  SetIsMemberResponse* n = new SetIsMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetIsMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetIsMemberResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SetIsMemberResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SetIsMemberResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, yes_);

#undef ZR_HELPER_
#undef ZR_

}

bool SetIsMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetIsMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_yes;
        break;
      }

      // optional bool yes = 2;
      case 2: {
        if (tag == 16) {
         parse_yes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetIsMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetIsMemberResponse)
  return false;
#undef DO_
}

void SetIsMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetIsMemberResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional bool yes = 2;
  if (this->yes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->yes(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetIsMemberResponse)
}

::google::protobuf::uint8* SetIsMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetIsMemberResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional bool yes = 2;
  if (this->yes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->yes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetIsMemberResponse)
  return target;
}

int SetIsMemberResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetIsMemberResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional bool yes = 2;
  if (this->yes() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetIsMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetIsMemberResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetIsMemberResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetIsMemberResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetIsMemberResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetIsMemberResponse)
    MergeFrom(*source);
  }
}

void SetIsMemberResponse::MergeFrom(const SetIsMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetIsMemberResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.yes() != 0) {
    set_yes(from.yes());
  }
}

void SetIsMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetIsMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetIsMemberResponse::CopyFrom(const SetIsMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetIsMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIsMemberResponse::IsInitialized() const {

  return true;
}

void SetIsMemberResponse::Swap(SetIsMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetIsMemberResponse::InternalSwap(SetIsMemberResponse* other) {
  std::swap(status_, other->status_);
  std::swap(yes_, other->yes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetIsMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetIsMemberResponse_descriptor_;
  metadata.reflection = SetIsMemberResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetIsMemberResponse

// optional .uranium.common.Status status = 1;
void SetIsMemberResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status SetIsMemberResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetIsMemberResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void SetIsMemberResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetIsMemberResponse.status)
}

// optional bool yes = 2;
void SetIsMemberResponse::clear_yes() {
  yes_ = false;
}
 bool SetIsMemberResponse::yes() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetIsMemberResponse.yes)
  return yes_;
}
 void SetIsMemberResponse::set_yes(bool value) {
  
  yes_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetIsMemberResponse.yes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetGetAllRequest::kTableNameFieldNumber;
const int SetGetAllRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetGetAllRequest::SetGetAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetGetAllRequest)
}

void SetGetAllRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

SetGetAllRequest::SetGetAllRequest(const SetGetAllRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetGetAllRequest)
}

void SetGetAllRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

SetGetAllRequest::~SetGetAllRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.SetGetAllRequest)
  SharedDtor();
}

void SetGetAllRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void SetGetAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGetAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGetAllRequest_descriptor_;
}

const SetGetAllRequest& SetGetAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetGetAllRequest* SetGetAllRequest::default_instance_ = NULL;

SetGetAllRequest* SetGetAllRequest::New(::google::protobuf::Arena* arena) const {
  SetGetAllRequest* n = new SetGetAllRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetGetAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetGetAllRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool SetGetAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetGetAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetGetAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetGetAllRequest)
  return false;
#undef DO_
}

void SetGetAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetGetAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetGetAllRequest)
}

::google::protobuf::uint8* SetGetAllRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetGetAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetGetAllRequest)
  return target;
}

int SetGetAllRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetGetAllRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGetAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetGetAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetGetAllRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetGetAllRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetGetAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetGetAllRequest)
    MergeFrom(*source);
  }
}

void SetGetAllRequest::MergeFrom(const SetGetAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetGetAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void SetGetAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetGetAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGetAllRequest::CopyFrom(const SetGetAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetGetAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGetAllRequest::IsInitialized() const {

  return true;
}

void SetGetAllRequest::Swap(SetGetAllRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetGetAllRequest::InternalSwap(SetGetAllRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetGetAllRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGetAllRequest_descriptor_;
  metadata.reflection = SetGetAllRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetGetAllRequest

// optional .uranium.common.TableName table_name = 1;
bool SetGetAllRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void SetGetAllRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& SetGetAllRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetGetAllRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* SetGetAllRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetGetAllRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* SetGetAllRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.SetGetAllRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void SetGetAllRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetGetAllRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool SetGetAllRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SetGetAllRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& SetGetAllRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetGetAllRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* SetGetAllRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetGetAllRequest.key)
  return key_;
}
::uranium::api::Key* SetGetAllRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.SetGetAllRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void SetGetAllRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetGetAllRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetGetAllResponse::kStatusFieldNumber;
const int SetGetAllResponse::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetGetAllResponse::SetGetAllResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetGetAllResponse)
}

void SetGetAllResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetGetAllResponse::SetGetAllResponse(const SetGetAllResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetGetAllResponse)
}

void SetGetAllResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

SetGetAllResponse::~SetGetAllResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.SetGetAllResponse)
  SharedDtor();
}

void SetGetAllResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGetAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGetAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGetAllResponse_descriptor_;
}

const SetGetAllResponse& SetGetAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetGetAllResponse* SetGetAllResponse::default_instance_ = NULL;

SetGetAllResponse* SetGetAllResponse::New(::google::protobuf::Arena* arena) const {
  SetGetAllResponse* n = new SetGetAllResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetGetAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetGetAllResponse)
  status_ = 0;
  values_.Clear();
}

bool SetGetAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetGetAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetGetAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetGetAllResponse)
  return false;
#undef DO_
}

void SetGetAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetGetAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .uranium.api.Value values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetGetAllResponse)
}

::google::protobuf::uint8* SetGetAllResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetGetAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .uranium.api.Value values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetGetAllResponse)
  return target;
}

int SetGetAllResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetGetAllResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated .uranium.api.Value values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGetAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetGetAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetGetAllResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetGetAllResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetGetAllResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetGetAllResponse)
    MergeFrom(*source);
  }
}

void SetGetAllResponse::MergeFrom(const SetGetAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetGetAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void SetGetAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetGetAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGetAllResponse::CopyFrom(const SetGetAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetGetAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGetAllResponse::IsInitialized() const {

  return true;
}

void SetGetAllResponse::Swap(SetGetAllResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetGetAllResponse::InternalSwap(SetGetAllResponse* other) {
  std::swap(status_, other->status_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetGetAllResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGetAllResponse_descriptor_;
  metadata.reflection = SetGetAllResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetGetAllResponse

// optional .uranium.common.Status status = 1;
void SetGetAllResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status SetGetAllResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetGetAllResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void SetGetAllResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetGetAllResponse.status)
}

// repeated .uranium.api.Value values = 2;
int SetGetAllResponse::values_size() const {
  return values_.size();
}
void SetGetAllResponse::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& SetGetAllResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.SetGetAllResponse.values)
  return values_.Get(index);
}
::uranium::api::Value* SetGetAllResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.SetGetAllResponse.values)
  return values_.Mutable(index);
}
::uranium::api::Value* SetGetAllResponse::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.SetGetAllResponse.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
SetGetAllResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.SetGetAllResponse.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
SetGetAllResponse::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.SetGetAllResponse.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRemoveRequest::kTableNameFieldNumber;
const int SetRemoveRequest::kKeyFieldNumber;
const int SetRemoveRequest::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRemoveRequest::SetRemoveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetRemoveRequest)
}

void SetRemoveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

SetRemoveRequest::SetRemoveRequest(const SetRemoveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetRemoveRequest)
}

void SetRemoveRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

SetRemoveRequest::~SetRemoveRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.SetRemoveRequest)
  SharedDtor();
}

void SetRemoveRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void SetRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRemoveRequest_descriptor_;
}

const SetRemoveRequest& SetRemoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetRemoveRequest* SetRemoveRequest::default_instance_ = NULL;

SetRemoveRequest* SetRemoveRequest::New(::google::protobuf::Arena* arena) const {
  SetRemoveRequest* n = new SetRemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetRemoveRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
  values_.Clear();
}

bool SetRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetRemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated .uranium.api.Value values = 3;
      case 3: {
        if (tag == 26) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetRemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetRemoveRequest)
  return false;
#undef DO_
}

void SetRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetRemoveRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetRemoveRequest)
}

::google::protobuf::uint8* SetRemoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetRemoveRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // repeated .uranium.api.Value values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetRemoveRequest)
  return target;
}

int SetRemoveRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetRemoveRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // repeated .uranium.api.Value values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetRemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetRemoveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRemoveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetRemoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetRemoveRequest)
    MergeFrom(*source);
  }
}

void SetRemoveRequest::MergeFrom(const SetRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetRemoveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void SetRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRemoveRequest::CopyFrom(const SetRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRemoveRequest::IsInitialized() const {

  return true;
}

void SetRemoveRequest::Swap(SetRemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRemoveRequest::InternalSwap(SetRemoveRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRemoveRequest_descriptor_;
  metadata.reflection = SetRemoveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRemoveRequest

// optional .uranium.common.TableName table_name = 1;
bool SetRemoveRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void SetRemoveRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& SetRemoveRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetRemoveRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* SetRemoveRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetRemoveRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* SetRemoveRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.SetRemoveRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void SetRemoveRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetRemoveRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool SetRemoveRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SetRemoveRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& SetRemoveRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetRemoveRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* SetRemoveRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetRemoveRequest.key)
  return key_;
}
::uranium::api::Key* SetRemoveRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.SetRemoveRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void SetRemoveRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetRemoveRequest.key)
}

// repeated .uranium.api.Value values = 3;
int SetRemoveRequest::values_size() const {
  return values_.size();
}
void SetRemoveRequest::clear_values() {
  values_.Clear();
}
const ::uranium::api::Value& SetRemoveRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:uranium.api.SetRemoveRequest.values)
  return values_.Get(index);
}
::uranium::api::Value* SetRemoveRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.api.SetRemoveRequest.values)
  return values_.Mutable(index);
}
::uranium::api::Value* SetRemoveRequest::add_values() {
  // @@protoc_insertion_point(field_add:uranium.api.SetRemoveRequest.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::api::Value >*
SetRemoveRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:uranium.api.SetRemoveRequest.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::api::Value >&
SetRemoveRequest::values() const {
  // @@protoc_insertion_point(field_list:uranium.api.SetRemoveRequest.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRemoveResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRemoveResponse::SetRemoveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetRemoveResponse)
}

void SetRemoveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetRemoveResponse::SetRemoveResponse(const SetRemoveResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetRemoveResponse)
}

void SetRemoveResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

SetRemoveResponse::~SetRemoveResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.SetRemoveResponse)
  SharedDtor();
}

void SetRemoveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRemoveResponse_descriptor_;
}

const SetRemoveResponse& SetRemoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetRemoveResponse* SetRemoveResponse::default_instance_ = NULL;

SetRemoveResponse* SetRemoveResponse::New(::google::protobuf::Arena* arena) const {
  SetRemoveResponse* n = new SetRemoveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetRemoveResponse)
  status_ = 0;
}

bool SetRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetRemoveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetRemoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetRemoveResponse)
  return false;
#undef DO_
}

void SetRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetRemoveResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetRemoveResponse)
}

::google::protobuf::uint8* SetRemoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetRemoveResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetRemoveResponse)
  return target;
}

int SetRemoveResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetRemoveResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetRemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetRemoveResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRemoveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetRemoveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetRemoveResponse)
    MergeFrom(*source);
  }
}

void SetRemoveResponse::MergeFrom(const SetRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetRemoveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void SetRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRemoveResponse::CopyFrom(const SetRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRemoveResponse::IsInitialized() const {

  return true;
}

void SetRemoveResponse::Swap(SetRemoveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRemoveResponse::InternalSwap(SetRemoveResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRemoveResponse_descriptor_;
  metadata.reflection = SetRemoveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRemoveResponse

// optional .uranium.common.Status status = 1;
void SetRemoveResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status SetRemoveResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetRemoveResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void SetRemoveResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetRemoveResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRemoveAllRequest::kTableNameFieldNumber;
const int SetRemoveAllRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRemoveAllRequest::SetRemoveAllRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetRemoveAllRequest)
}

void SetRemoveAllRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  key_ = const_cast< ::uranium::api::Key*>(&::uranium::api::Key::default_instance());
}

SetRemoveAllRequest::SetRemoveAllRequest(const SetRemoveAllRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetRemoveAllRequest)
}

void SetRemoveAllRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  key_ = NULL;
}

SetRemoveAllRequest::~SetRemoveAllRequest() {
  // @@protoc_insertion_point(destructor:uranium.api.SetRemoveAllRequest)
  SharedDtor();
}

void SetRemoveAllRequest::SharedDtor() {
  if (this != default_instance_) {
    delete table_name_;
    delete key_;
  }
}

void SetRemoveAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRemoveAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRemoveAllRequest_descriptor_;
}

const SetRemoveAllRequest& SetRemoveAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetRemoveAllRequest* SetRemoveAllRequest::default_instance_ = NULL;

SetRemoveAllRequest* SetRemoveAllRequest::New(::google::protobuf::Arena* arena) const {
  SetRemoveAllRequest* n = new SetRemoveAllRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRemoveAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetRemoveAllRequest)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}

bool SetRemoveAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetRemoveAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .uranium.api.Key key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetRemoveAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetRemoveAllRequest)
  return false;
#undef DO_
}

void SetRemoveAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetRemoveAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetRemoveAllRequest)
}

::google::protobuf::uint8* SetRemoveAllRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetRemoveAllRequest)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->key_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetRemoveAllRequest)
  return target;
}

int SetRemoveAllRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetRemoveAllRequest)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  // optional .uranium.api.Key key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRemoveAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetRemoveAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetRemoveAllRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRemoveAllRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetRemoveAllRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetRemoveAllRequest)
    MergeFrom(*source);
  }
}

void SetRemoveAllRequest::MergeFrom(const SetRemoveAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetRemoveAllRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
  if (from.has_key()) {
    mutable_key()->::uranium::api::Key::MergeFrom(from.key());
  }
}

void SetRemoveAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetRemoveAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRemoveAllRequest::CopyFrom(const SetRemoveAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetRemoveAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRemoveAllRequest::IsInitialized() const {

  return true;
}

void SetRemoveAllRequest::Swap(SetRemoveAllRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRemoveAllRequest::InternalSwap(SetRemoveAllRequest* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRemoveAllRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRemoveAllRequest_descriptor_;
  metadata.reflection = SetRemoveAllRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRemoveAllRequest

// optional .uranium.common.TableName table_name = 1;
bool SetRemoveAllRequest::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void SetRemoveAllRequest::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& SetRemoveAllRequest::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetRemoveAllRequest.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* SetRemoveAllRequest::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetRemoveAllRequest.table_name)
  return table_name_;
}
::uranium::common::TableName* SetRemoveAllRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.api.SetRemoveAllRequest.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void SetRemoveAllRequest::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetRemoveAllRequest.table_name)
}

// optional .uranium.api.Key key = 2;
bool SetRemoveAllRequest::has_key() const {
  return !_is_default_instance_ && key_ != NULL;
}
void SetRemoveAllRequest::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::uranium::api::Key& SetRemoveAllRequest::key() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetRemoveAllRequest.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::uranium::api::Key* SetRemoveAllRequest::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::uranium::api::Key;
  }
  // @@protoc_insertion_point(field_mutable:uranium.api.SetRemoveAllRequest.key)
  return key_;
}
::uranium::api::Key* SetRemoveAllRequest::release_key() {
  // @@protoc_insertion_point(field_release:uranium.api.SetRemoveAllRequest.key)
  
  ::uranium::api::Key* temp = key_;
  key_ = NULL;
  return temp;
}
void SetRemoveAllRequest::set_allocated_key(::uranium::api::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.api.SetRemoveAllRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRemoveAllResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRemoveAllResponse::SetRemoveAllResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.api.SetRemoveAllResponse)
}

void SetRemoveAllResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetRemoveAllResponse::SetRemoveAllResponse(const SetRemoveAllResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.api.SetRemoveAllResponse)
}

void SetRemoveAllResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

SetRemoveAllResponse::~SetRemoveAllResponse() {
  // @@protoc_insertion_point(destructor:uranium.api.SetRemoveAllResponse)
  SharedDtor();
}

void SetRemoveAllResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetRemoveAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRemoveAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRemoveAllResponse_descriptor_;
}

const SetRemoveAllResponse& SetRemoveAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_2eproto();
  return *default_instance_;
}

SetRemoveAllResponse* SetRemoveAllResponse::default_instance_ = NULL;

SetRemoveAllResponse* SetRemoveAllResponse::New(::google::protobuf::Arena* arena) const {
  SetRemoveAllResponse* n = new SetRemoveAllResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRemoveAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.api.SetRemoveAllResponse)
  status_ = 0;
}

bool SetRemoveAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.api.SetRemoveAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.api.SetRemoveAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.api.SetRemoveAllResponse)
  return false;
#undef DO_
}

void SetRemoveAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.api.SetRemoveAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.api.SetRemoveAllResponse)
}

::google::protobuf::uint8* SetRemoveAllResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.api.SetRemoveAllResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.api.SetRemoveAllResponse)
  return target;
}

int SetRemoveAllResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.api.SetRemoveAllResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRemoveAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.api.SetRemoveAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetRemoveAllResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRemoveAllResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.api.SetRemoveAllResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.api.SetRemoveAllResponse)
    MergeFrom(*source);
  }
}

void SetRemoveAllResponse::MergeFrom(const SetRemoveAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.api.SetRemoveAllResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void SetRemoveAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.api.SetRemoveAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRemoveAllResponse::CopyFrom(const SetRemoveAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.api.SetRemoveAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRemoveAllResponse::IsInitialized() const {

  return true;
}

void SetRemoveAllResponse::Swap(SetRemoveAllResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRemoveAllResponse::InternalSwap(SetRemoveAllResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRemoveAllResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRemoveAllResponse_descriptor_;
  metadata.reflection = SetRemoveAllResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRemoveAllResponse

// optional .uranium.common.Status status = 1;
void SetRemoveAllResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status SetRemoveAllResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.api.SetRemoveAllResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void SetRemoveAllResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.api.SetRemoveAllResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace uranium

// @@protoc_insertion_point(global_scope)
