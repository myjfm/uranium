// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uranium {
namespace common {

namespace {

const ::google::protobuf::Descriptor* TableName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnValue_reflection_ = NULL;
struct ColumnValueOneofInstance {
  ::google::protobuf::int64 integer_;
  float flt_;
  double dbl_;
  ::google::protobuf::internal::ArenaStringPtr other_;
}* ColumnValue_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ColumnDefination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnDefination_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TableType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ColumnType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  TableName_descriptor_ = file->message_type(0);
  static const int TableName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, name_),
  };
  TableName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableName_descriptor_,
      TableName::default_instance_,
      TableName_offsets_,
      -1,
      -1,
      -1,
      sizeof(TableName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, _is_default_instance_));
  Result_descriptor_ = file->message_type(1);
  static const int Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, message_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      -1,
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _is_default_instance_));
  ColumnName_descriptor_ = file->message_type(2);
  static const int ColumnName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnName, name_),
  };
  ColumnName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColumnName_descriptor_,
      ColumnName::default_instance_,
      ColumnName_offsets_,
      -1,
      -1,
      -1,
      sizeof(ColumnName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnName, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnName, _is_default_instance_));
  ColumnValue_descriptor_ = file->message_type(3);
  static const int ColumnValue_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ColumnValue_default_oneof_instance_, integer_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ColumnValue_default_oneof_instance_, flt_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ColumnValue_default_oneof_instance_, dbl_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ColumnValue_default_oneof_instance_, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, value_),
  };
  ColumnValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColumnValue_descriptor_,
      ColumnValue::default_instance_,
      ColumnValue_offsets_,
      -1,
      -1,
      -1,
      ColumnValue_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, _oneof_case_[0]),
      sizeof(ColumnValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnValue, _is_default_instance_));
  ColumnDefination_descriptor_ = file->message_type(4);
  static const int ColumnDefination_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDefination, column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDefination, column_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDefination, default_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDefination, not_null_),
  };
  ColumnDefination_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ColumnDefination_descriptor_,
      ColumnDefination::default_instance_,
      ColumnDefination_offsets_,
      -1,
      -1,
      -1,
      sizeof(ColumnDefination),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDefination, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnDefination, _is_default_instance_));
  TableType_descriptor_ = file->enum_type(0);
  Status_descriptor_ = file->enum_type(1);
  ColumnType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableName_descriptor_, &TableName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColumnName_descriptor_, &ColumnName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColumnValue_descriptor_, &ColumnValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ColumnDefination_descriptor_, &ColumnDefination::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete TableName::default_instance_;
  delete TableName_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete ColumnName::default_instance_;
  delete ColumnName_reflection_;
  delete ColumnValue::default_instance_;
  delete ColumnValue_default_oneof_instance_;
  delete ColumnValue_reflection_;
  delete ColumnDefination::default_instance_;
  delete ColumnDefination_reflection_;
}

void protobuf_AddDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\016uranium.common\"\031\n\tTableN"
    "ame\022\014\n\004name\030\001 \001(\t\"A\n\006Result\022&\n\006status\030\001 "
    "\001(\0162\026.uranium.common.Status\022\017\n\007message\030\002"
    " \001(\t\"\032\n\nColumnName\022\014\n\004name\030\001 \001(\t\"X\n\013Colu"
    "mnValue\022\021\n\007integer\030\001 \001(\022H\000\022\r\n\003flt\030\002 \001(\002H"
    "\000\022\r\n\003dbl\030\003 \001(\001H\000\022\017\n\005other\030\004 \001(\014H\000B\007\n\005val"
    "ue\"\272\001\n\020ColumnDefination\022/\n\013column_name\030\001"
    " \001(\0132\032.uranium.common.ColumnName\022/\n\013colu"
    "mn_type\030\002 \001(\0162\032.uranium.common.ColumnTyp"
    "e\0222\n\rdefault_value\030\003 \001(\0132\033.uranium.commo"
    "n.ColumnValue\022\020\n\010not_null\030\004 \001(\010*<\n\tTable"
    "Type\022\006\n\002KV\020\000\022\010\n\004LIST\020\001\022\010\n\004HASH\020\002\022\007\n\003SET\020"
    "\003\022\n\n\006SCHEMA\020\004*\246\001\n\006Status\022\006\n\002OK\020\000\022\022\n\016INTE"
    "RNAL_ERROR\020\001\022\023\n\017TABLE_NOT_FOUND\020\002\022\021\n\rKEY"
    "_NOT_FOUND\020\003\022\030\n\024TABLE_ALREADY_EXISTS\020\004\022\026"
    "\n\022KEY_ALREADY_EXISTS\020\005\022\024\n\020INVALID_ARGUME"
    "NT\020\006\022\020\n\014OUT_OF_RANGE\020\007*o\n\nColumnType\022\010\n\004"
    "BYTE\020\000\022\t\n\005SHORT\020\001\022\007\n\003INT\020\002\022\010\n\004LONG\020\003\022\t\n\005"
    "FLOAT\020\004\022\n\n\006DOUBLE\020\005\022\n\n\006STRING\020\006\022\010\n\004DATE\020"
    "\007\022\014\n\010DATETIME\020\010b\006proto3", 783);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  TableName::default_instance_ = new TableName();
  Result::default_instance_ = new Result();
  ColumnName::default_instance_ = new ColumnName();
  ColumnValue::default_instance_ = new ColumnValue();
  ColumnValue_default_oneof_instance_ = new ColumnValueOneofInstance();
  ColumnDefination::default_instance_ = new ColumnDefination();
  TableName::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  ColumnName::default_instance_->InitAsDefaultInstance();
  ColumnValue::default_instance_->InitAsDefaultInstance();
  ColumnDefination::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* TableType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableType_descriptor_;
}
bool TableType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnType_descriptor_;
}
bool ColumnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableName::TableName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.common.TableName)
}

void TableName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TableName::TableName(const TableName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.common.TableName)
}

void TableName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TableName::~TableName() {
  // @@protoc_insertion_point(destructor:uranium.common.TableName)
  SharedDtor();
}

void TableName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TableName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableName_descriptor_;
}

const TableName& TableName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TableName* TableName::default_instance_ = NULL;

TableName* TableName::New(::google::protobuf::Arena* arena) const {
  TableName* n = new TableName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableName::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.common.TableName)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TableName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.common.TableName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uranium.common.TableName.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.common.TableName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.common.TableName)
  return false;
#undef DO_
}

void TableName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.common.TableName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uranium.common.TableName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.common.TableName)
}

::google::protobuf::uint8* TableName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.common.TableName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uranium.common.TableName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.common.TableName)
  return target;
}

int TableName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.common.TableName)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.common.TableName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TableName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.common.TableName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.common.TableName)
    MergeFrom(*source);
  }
}

void TableName::MergeFrom(const TableName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.common.TableName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TableName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.common.TableName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableName::CopyFrom(const TableName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.common.TableName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableName::IsInitialized() const {

  return true;
}

void TableName::Swap(TableName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableName::InternalSwap(TableName* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableName_descriptor_;
  metadata.reflection = TableName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableName

// optional string name = 1;
void TableName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TableName::name() const {
  // @@protoc_insertion_point(field_get:uranium.common.TableName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.common.TableName.name)
}
 void TableName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.common.TableName.name)
}
 void TableName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.common.TableName.name)
}
 ::std::string* TableName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:uranium.common.TableName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TableName::release_name() {
  // @@protoc_insertion_point(field_release:uranium.common.TableName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:uranium.common.TableName.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kStatusFieldNumber;
const int Result::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.common.Result)
}

void Result::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.common.Result)
}

void Result::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:uranium.common.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.common.Result)
  status_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.common.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uranium.common.Result.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.common.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.common.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.common.Result)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uranium.common.Result.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.common.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.common.Result)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uranium.common.Result.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.common.Result)
  return target;
}

int Result::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.common.Result)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.common.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.common.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.common.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.common.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.common.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.common.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(status_, other->status_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// optional .uranium.common.Status status = 1;
void Result::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status Result::status() const {
  // @@protoc_insertion_point(field_get:uranium.common.Result.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void Result::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.Result.status)
}

// optional string message = 2;
void Result::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::message() const {
  // @@protoc_insertion_point(field_get:uranium.common.Result.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.common.Result.message)
}
 void Result::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.common.Result.message)
}
 void Result::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.common.Result.message)
}
 ::std::string* Result::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:uranium.common.Result.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_message() {
  // @@protoc_insertion_point(field_release:uranium.common.Result.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:uranium.common.Result.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnName::ColumnName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.common.ColumnName)
}

void ColumnName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ColumnName::ColumnName(const ColumnName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.common.ColumnName)
}

void ColumnName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ColumnName::~ColumnName() {
  // @@protoc_insertion_point(destructor:uranium.common.ColumnName)
  SharedDtor();
}

void ColumnName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ColumnName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnName_descriptor_;
}

const ColumnName& ColumnName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ColumnName* ColumnName::default_instance_ = NULL;

ColumnName* ColumnName::New(::google::protobuf::Arena* arena) const {
  ColumnName* n = new ColumnName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnName::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.common.ColumnName)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ColumnName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.common.ColumnName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "uranium.common.ColumnName.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.common.ColumnName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.common.ColumnName)
  return false;
#undef DO_
}

void ColumnName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.common.ColumnName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uranium.common.ColumnName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.common.ColumnName)
}

::google::protobuf::uint8* ColumnName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.common.ColumnName)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "uranium.common.ColumnName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.common.ColumnName)
  return target;
}

int ColumnName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.common.ColumnName)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.common.ColumnName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ColumnName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.common.ColumnName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.common.ColumnName)
    MergeFrom(*source);
  }
}

void ColumnName::MergeFrom(const ColumnName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.common.ColumnName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ColumnName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.common.ColumnName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnName::CopyFrom(const ColumnName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.common.ColumnName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnName::IsInitialized() const {

  return true;
}

void ColumnName::Swap(ColumnName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnName::InternalSwap(ColumnName* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnName_descriptor_;
  metadata.reflection = ColumnName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColumnName

// optional string name = 1;
void ColumnName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ColumnName::name() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ColumnName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.common.ColumnName.name)
}
 void ColumnName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.common.ColumnName.name)
}
 void ColumnName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.common.ColumnName.name)
}
 ::std::string* ColumnName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:uranium.common.ColumnName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ColumnName::release_name() {
  // @@protoc_insertion_point(field_release:uranium.common.ColumnName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ColumnName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:uranium.common.ColumnName.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnValue::kIntegerFieldNumber;
const int ColumnValue::kFltFieldNumber;
const int ColumnValue::kDblFieldNumber;
const int ColumnValue::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnValue::ColumnValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.common.ColumnValue)
}

void ColumnValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ColumnValue_default_oneof_instance_->integer_ = GOOGLE_LONGLONG(0);
  ColumnValue_default_oneof_instance_->flt_ = 0;
  ColumnValue_default_oneof_instance_->dbl_ = 0;
  ColumnValue_default_oneof_instance_->other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ColumnValue::ColumnValue(const ColumnValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.common.ColumnValue)
}

void ColumnValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_value();
}

ColumnValue::~ColumnValue() {
  // @@protoc_insertion_point(destructor:uranium.common.ColumnValue)
  SharedDtor();
}

void ColumnValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void ColumnValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnValue_descriptor_;
}

const ColumnValue& ColumnValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ColumnValue* ColumnValue::default_instance_ = NULL;

ColumnValue* ColumnValue::New(::google::protobuf::Arena* arena) const {
  ColumnValue* n = new ColumnValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:uranium.common.ColumnValue)
  switch(value_case()) {
    case kInteger: {
      // No need to clear
      break;
    }
    case kFlt: {
      // No need to clear
      break;
    }
    case kDbl: {
      // No need to clear
      break;
    }
    case kOther: {
      value_.other_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ColumnValue::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.common.ColumnValue)
  clear_value();
}

bool ColumnValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.common.ColumnValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 integer = 1;
      case 1: {
        if (tag == 8) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_.integer_)));
          set_has_integer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_flt;
        break;
      }

      // optional float flt = 2;
      case 2: {
        if (tag == 21) {
         parse_flt:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.flt_)));
          set_has_flt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_dbl;
        break;
      }

      // optional double dbl = 3;
      case 3: {
        if (tag == 25) {
         parse_dbl:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.dbl_)));
          set_has_dbl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_other;
        break;
      }

      // optional bytes other = 4;
      case 4: {
        if (tag == 34) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_other()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.common.ColumnValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.common.ColumnValue)
  return false;
#undef DO_
}

void ColumnValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.common.ColumnValue)
  // optional sint64 integer = 1;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->integer(), output);
  }

  // optional float flt = 2;
  if (has_flt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->flt(), output);
  }

  // optional double dbl = 3;
  if (has_dbl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dbl(), output);
  }

  // optional bytes other = 4;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->other(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.common.ColumnValue)
}

::google::protobuf::uint8* ColumnValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.common.ColumnValue)
  // optional sint64 integer = 1;
  if (has_integer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->integer(), target);
  }

  // optional float flt = 2;
  if (has_flt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->flt(), target);
  }

  // optional double dbl = 3;
  if (has_dbl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dbl(), target);
  }

  // optional bytes other = 4;
  if (has_other()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->other(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.common.ColumnValue)
  return target;
}

int ColumnValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.common.ColumnValue)
  int total_size = 0;

  switch (value_case()) {
    // optional sint64 integer = 1;
    case kInteger: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->integer());
      break;
    }
    // optional float flt = 2;
    case kFlt: {
      total_size += 1 + 4;
      break;
    }
    // optional double dbl = 3;
    case kDbl: {
      total_size += 1 + 8;
      break;
    }
    // optional bytes other = 4;
    case kOther: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->other());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.common.ColumnValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ColumnValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.common.ColumnValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.common.ColumnValue)
    MergeFrom(*source);
  }
}

void ColumnValue::MergeFrom(const ColumnValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.common.ColumnValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.value_case()) {
    case kInteger: {
      set_integer(from.integer());
      break;
    }
    case kFlt: {
      set_flt(from.flt());
      break;
    }
    case kDbl: {
      set_dbl(from.dbl());
      break;
    }
    case kOther: {
      set_other(from.other());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ColumnValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.common.ColumnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnValue::CopyFrom(const ColumnValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.common.ColumnValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnValue::IsInitialized() const {

  return true;
}

void ColumnValue::Swap(ColumnValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnValue::InternalSwap(ColumnValue* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnValue_descriptor_;
  metadata.reflection = ColumnValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColumnValue

// optional sint64 integer = 1;
bool ColumnValue::has_integer() const {
  return value_case() == kInteger;
}
void ColumnValue::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
void ColumnValue::clear_integer() {
  if (has_integer()) {
    value_.integer_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
 ::google::protobuf::int64 ColumnValue::integer() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnValue.integer)
  if (has_integer()) {
    return value_.integer_;
  }
  return GOOGLE_LONGLONG(0);
}
 void ColumnValue::set_integer(::google::protobuf::int64 value) {
  if (!has_integer()) {
    clear_value();
    set_has_integer();
  }
  value_.integer_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.integer)
}

// optional float flt = 2;
bool ColumnValue::has_flt() const {
  return value_case() == kFlt;
}
void ColumnValue::set_has_flt() {
  _oneof_case_[0] = kFlt;
}
void ColumnValue::clear_flt() {
  if (has_flt()) {
    value_.flt_ = 0;
    clear_has_value();
  }
}
 float ColumnValue::flt() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnValue.flt)
  if (has_flt()) {
    return value_.flt_;
  }
  return 0;
}
 void ColumnValue::set_flt(float value) {
  if (!has_flt()) {
    clear_value();
    set_has_flt();
  }
  value_.flt_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.flt)
}

// optional double dbl = 3;
bool ColumnValue::has_dbl() const {
  return value_case() == kDbl;
}
void ColumnValue::set_has_dbl() {
  _oneof_case_[0] = kDbl;
}
void ColumnValue::clear_dbl() {
  if (has_dbl()) {
    value_.dbl_ = 0;
    clear_has_value();
  }
}
 double ColumnValue::dbl() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnValue.dbl)
  if (has_dbl()) {
    return value_.dbl_;
  }
  return 0;
}
 void ColumnValue::set_dbl(double value) {
  if (!has_dbl()) {
    clear_value();
    set_has_dbl();
  }
  value_.dbl_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.dbl)
}

// optional bytes other = 4;
bool ColumnValue::has_other() const {
  return value_case() == kOther;
}
void ColumnValue::set_has_other() {
  _oneof_case_[0] = kOther;
}
void ColumnValue::clear_other() {
  if (has_other()) {
    value_.other_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
 const ::std::string& ColumnValue::other() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnValue.other)
  if (has_other()) {
    return value_.other_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void ColumnValue::set_other(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.other)
  if (!has_other()) {
    clear_value();
    set_has_other();
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.other)
}
 void ColumnValue::set_other(const char* value) {
  if (!has_other()) {
    clear_value();
    set_has_other();
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.common.ColumnValue.other)
}
 void ColumnValue::set_other(const void* value, size_t size) {
  if (!has_other()) {
    clear_value();
    set_has_other();
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.common.ColumnValue.other)
}
 ::std::string* ColumnValue::mutable_other() {
  if (!has_other()) {
    clear_value();
    set_has_other();
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:uranium.common.ColumnValue.other)
  return value_.other_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ColumnValue::release_other() {
  // @@protoc_insertion_point(field_release:uranium.common.ColumnValue.other)
  if (has_other()) {
    clear_has_value();
    return value_.other_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void ColumnValue::set_allocated_other(::std::string* other) {
  if (!has_other()) {
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (other != NULL) {
    set_has_other();
    value_.other_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        other);
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.common.ColumnValue.other)
}

bool ColumnValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void ColumnValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
ColumnValue::ValueCase ColumnValue::value_case() const {
  return ColumnValue::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnDefination::kColumnNameFieldNumber;
const int ColumnDefination::kColumnTypeFieldNumber;
const int ColumnDefination::kDefaultValueFieldNumber;
const int ColumnDefination::kNotNullFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnDefination::ColumnDefination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.common.ColumnDefination)
}

void ColumnDefination::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  column_name_ = const_cast< ::uranium::common::ColumnName*>(&::uranium::common::ColumnName::default_instance());
  default_value_ = const_cast< ::uranium::common::ColumnValue*>(&::uranium::common::ColumnValue::default_instance());
}

ColumnDefination::ColumnDefination(const ColumnDefination& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.common.ColumnDefination)
}

void ColumnDefination::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  column_name_ = NULL;
  column_type_ = 0;
  default_value_ = NULL;
  not_null_ = false;
}

ColumnDefination::~ColumnDefination() {
  // @@protoc_insertion_point(destructor:uranium.common.ColumnDefination)
  SharedDtor();
}

void ColumnDefination::SharedDtor() {
  if (this != default_instance_) {
    delete column_name_;
    delete default_value_;
  }
}

void ColumnDefination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnDefination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnDefination_descriptor_;
}

const ColumnDefination& ColumnDefination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ColumnDefination* ColumnDefination::default_instance_ = NULL;

ColumnDefination* ColumnDefination::New(::google::protobuf::Arena* arena) const {
  ColumnDefination* n = new ColumnDefination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColumnDefination::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.common.ColumnDefination)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ColumnDefination, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ColumnDefination*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(column_type_, not_null_);
  if (GetArenaNoVirtual() == NULL && column_name_ != NULL) delete column_name_;
  column_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && default_value_ != NULL) delete default_value_;
  default_value_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ColumnDefination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.common.ColumnDefination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.ColumnName column_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_column_type;
        break;
      }

      // optional .uranium.common.ColumnType column_type = 2;
      case 2: {
        if (tag == 16) {
         parse_column_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_column_type(static_cast< ::uranium::common::ColumnType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_default_value;
        break;
      }

      // optional .uranium.common.ColumnValue default_value = 3;
      case 3: {
        if (tag == 26) {
         parse_default_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_not_null;
        break;
      }

      // optional bool not_null = 4;
      case 4: {
        if (tag == 32) {
         parse_not_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_null_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.common.ColumnDefination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.common.ColumnDefination)
  return false;
#undef DO_
}

void ColumnDefination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.common.ColumnDefination)
  // optional .uranium.common.ColumnName column_name = 1;
  if (this->has_column_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->column_name_, output);
  }

  // optional .uranium.common.ColumnType column_type = 2;
  if (this->column_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->column_type(), output);
  }

  // optional .uranium.common.ColumnValue default_value = 3;
  if (this->has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->default_value_, output);
  }

  // optional bool not_null = 4;
  if (this->not_null() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->not_null(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.common.ColumnDefination)
}

::google::protobuf::uint8* ColumnDefination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.common.ColumnDefination)
  // optional .uranium.common.ColumnName column_name = 1;
  if (this->has_column_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->column_name_, false, target);
  }

  // optional .uranium.common.ColumnType column_type = 2;
  if (this->column_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->column_type(), target);
  }

  // optional .uranium.common.ColumnValue default_value = 3;
  if (this->has_default_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->default_value_, false, target);
  }

  // optional bool not_null = 4;
  if (this->not_null() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->not_null(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.common.ColumnDefination)
  return target;
}

int ColumnDefination::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.common.ColumnDefination)
  int total_size = 0;

  // optional .uranium.common.ColumnName column_name = 1;
  if (this->has_column_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->column_name_);
  }

  // optional .uranium.common.ColumnType column_type = 2;
  if (this->column_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->column_type());
  }

  // optional .uranium.common.ColumnValue default_value = 3;
  if (this->has_default_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_value_);
  }

  // optional bool not_null = 4;
  if (this->not_null() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnDefination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.common.ColumnDefination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ColumnDefination* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnDefination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.common.ColumnDefination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.common.ColumnDefination)
    MergeFrom(*source);
  }
}

void ColumnDefination::MergeFrom(const ColumnDefination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.common.ColumnDefination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_column_name()) {
    mutable_column_name()->::uranium::common::ColumnName::MergeFrom(from.column_name());
  }
  if (from.column_type() != 0) {
    set_column_type(from.column_type());
  }
  if (from.has_default_value()) {
    mutable_default_value()->::uranium::common::ColumnValue::MergeFrom(from.default_value());
  }
  if (from.not_null() != 0) {
    set_not_null(from.not_null());
  }
}

void ColumnDefination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.common.ColumnDefination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnDefination::CopyFrom(const ColumnDefination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.common.ColumnDefination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnDefination::IsInitialized() const {

  return true;
}

void ColumnDefination::Swap(ColumnDefination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnDefination::InternalSwap(ColumnDefination* other) {
  std::swap(column_name_, other->column_name_);
  std::swap(column_type_, other->column_type_);
  std::swap(default_value_, other->default_value_);
  std::swap(not_null_, other->not_null_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColumnDefination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnDefination_descriptor_;
  metadata.reflection = ColumnDefination_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColumnDefination

// optional .uranium.common.ColumnName column_name = 1;
bool ColumnDefination::has_column_name() const {
  return !_is_default_instance_ && column_name_ != NULL;
}
void ColumnDefination::clear_column_name() {
  if (GetArenaNoVirtual() == NULL && column_name_ != NULL) delete column_name_;
  column_name_ = NULL;
}
const ::uranium::common::ColumnName& ColumnDefination::column_name() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnDefination.column_name)
  return column_name_ != NULL ? *column_name_ : *default_instance_->column_name_;
}
::uranium::common::ColumnName* ColumnDefination::mutable_column_name() {
  
  if (column_name_ == NULL) {
    column_name_ = new ::uranium::common::ColumnName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.common.ColumnDefination.column_name)
  return column_name_;
}
::uranium::common::ColumnName* ColumnDefination::release_column_name() {
  // @@protoc_insertion_point(field_release:uranium.common.ColumnDefination.column_name)
  
  ::uranium::common::ColumnName* temp = column_name_;
  column_name_ = NULL;
  return temp;
}
void ColumnDefination::set_allocated_column_name(::uranium::common::ColumnName* column_name) {
  delete column_name_;
  column_name_ = column_name;
  if (column_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.common.ColumnDefination.column_name)
}

// optional .uranium.common.ColumnType column_type = 2;
void ColumnDefination::clear_column_type() {
  column_type_ = 0;
}
 ::uranium::common::ColumnType ColumnDefination::column_type() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnDefination.column_type)
  return static_cast< ::uranium::common::ColumnType >(column_type_);
}
 void ColumnDefination::set_column_type(::uranium::common::ColumnType value) {
  
  column_type_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnDefination.column_type)
}

// optional .uranium.common.ColumnValue default_value = 3;
bool ColumnDefination::has_default_value() const {
  return !_is_default_instance_ && default_value_ != NULL;
}
void ColumnDefination::clear_default_value() {
  if (GetArenaNoVirtual() == NULL && default_value_ != NULL) delete default_value_;
  default_value_ = NULL;
}
const ::uranium::common::ColumnValue& ColumnDefination::default_value() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnDefination.default_value)
  return default_value_ != NULL ? *default_value_ : *default_instance_->default_value_;
}
::uranium::common::ColumnValue* ColumnDefination::mutable_default_value() {
  
  if (default_value_ == NULL) {
    default_value_ = new ::uranium::common::ColumnValue;
  }
  // @@protoc_insertion_point(field_mutable:uranium.common.ColumnDefination.default_value)
  return default_value_;
}
::uranium::common::ColumnValue* ColumnDefination::release_default_value() {
  // @@protoc_insertion_point(field_release:uranium.common.ColumnDefination.default_value)
  
  ::uranium::common::ColumnValue* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
void ColumnDefination::set_allocated_default_value(::uranium::common::ColumnValue* default_value) {
  delete default_value_;
  default_value_ = default_value;
  if (default_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.common.ColumnDefination.default_value)
}

// optional bool not_null = 4;
void ColumnDefination::clear_not_null() {
  not_null_ = false;
}
 bool ColumnDefination::not_null() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnDefination.not_null)
  return not_null_;
}
 void ColumnDefination::set_not_null(bool value) {
  
  not_null_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnDefination.not_null)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace uranium

// @@protoc_insertion_point(global_scope)
