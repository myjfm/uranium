// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uranium_admin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uranium_admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace uranium {
namespace admin {

namespace {

const ::google::protobuf::Descriptor* TableOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableOptions_reflection_ = NULL;
struct TableOptionsOneofInstance {
  const ::uranium::admin::SchemaTableOptions* schema_table_options_;
  const ::uranium::admin::SchemalessTableOptions* schemaless_table_options_;
}* TableOptions_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SchemaTableOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemaTableOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SchemalessTableOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SchemalessTableOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTableOptionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTableOptionsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StorageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_uranium_5fadmin_2eproto() {
  protobuf_AddDesc_uranium_5fadmin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uranium_admin.proto");
  GOOGLE_CHECK(file != NULL);
  TableOptions_descriptor_ = file->message_type(0);
  static const int TableOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableOptions, table_name_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TableOptions_default_oneof_instance_, schema_table_options_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TableOptions_default_oneof_instance_, schemaless_table_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableOptions, options_),
  };
  TableOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableOptions_descriptor_,
      TableOptions::default_instance_,
      TableOptions_offsets_,
      -1,
      -1,
      -1,
      TableOptions_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableOptions, _oneof_case_[0]),
      sizeof(TableOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableOptions, _is_default_instance_));
  SchemaTableOptions_descriptor_ = file->message_type(1);
  static const int SchemaTableOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaTableOptions, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaTableOptions, columns_),
  };
  SchemaTableOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SchemaTableOptions_descriptor_,
      SchemaTableOptions::default_instance_,
      SchemaTableOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(SchemaTableOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaTableOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemaTableOptions, _is_default_instance_));
  SchemalessTableOptions_descriptor_ = file->message_type(2);
  static const int SchemalessTableOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemalessTableOptions, type_),
  };
  SchemalessTableOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SchemalessTableOptions_descriptor_,
      SchemalessTableOptions::default_instance_,
      SchemalessTableOptions_offsets_,
      -1,
      -1,
      -1,
      sizeof(SchemalessTableOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemalessTableOptions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SchemalessTableOptions, _is_default_instance_));
  GetTableOptionsResponse_descriptor_ = file->message_type(3);
  static const int GetTableOptionsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableOptionsResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableOptionsResponse, options_),
  };
  GetTableOptionsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTableOptionsResponse_descriptor_,
      GetTableOptionsResponse::default_instance_,
      GetTableOptionsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetTableOptionsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableOptionsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTableOptionsResponse, _is_default_instance_));
  StorageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uranium_5fadmin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableOptions_descriptor_, &TableOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SchemaTableOptions_descriptor_, &SchemaTableOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SchemalessTableOptions_descriptor_, &SchemalessTableOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTableOptionsResponse_descriptor_, &GetTableOptionsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uranium_5fadmin_2eproto() {
  delete TableOptions::default_instance_;
  delete TableOptions_default_oneof_instance_;
  delete TableOptions_reflection_;
  delete SchemaTableOptions::default_instance_;
  delete SchemaTableOptions_reflection_;
  delete SchemalessTableOptions::default_instance_;
  delete SchemalessTableOptions_reflection_;
  delete GetTableOptionsResponse::default_instance_;
  delete GetTableOptionsResponse_reflection_;
}

void protobuf_AddDesc_uranium_5fadmin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::uranium::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023uranium_admin.proto\022\ruranium.admin\032\014co"
    "mmon.proto\"\326\001\n\014TableOptions\022-\n\ntable_nam"
    "e\030\001 \001(\0132\031.uranium.common.TableName\022A\n\024sc"
    "hema_table_options\030\002 \001(\0132!.uranium.admin"
    ".SchemaTableOptionsH\000\022I\n\030schemaless_tabl"
    "e_options\030\003 \001(\0132%.uranium.admin.Schemale"
    "ssTableOptionsH\000B\t\n\007options\"q\n\022SchemaTab"
    "leOptions\022(\n\004type\030\001 \001(\0162\032.uranium.admin."
    "StorageType\0221\n\007columns\030\003 \003(\0132 .uranium.c"
    "ommon.ColumnDefination\"B\n\026SchemalessTabl"
    "eOptions\022(\n\004type\030\001 \001(\0162\032.uranium.admin.S"
    "torageType\"o\n\027GetTableOptionsResponse\022&\n"
    "\006status\030\001 \001(\0162\026.uranium.common.Status\022,\n"
    "\007options\030\002 \001(\0132\033.uranium.admin.TableOpti"
    "ons*\?\n\013StorageType\022\010\n\004FLAT\020\000\022\024\n\020COLUMN_S"
    "EPARATED\020\001\022\020\n\014COLUMN_GROUP\020\0022\273\002\n\023Uranium"
    "AdminService\022D\n\013CreateTable\022\033.uranium.ad"
    "min.TableOptions\032\026.uranium.common.Result"
    "\"\000\022D\n\013UpdateTable\022\033.uranium.admin.TableO"
    "ptions\032\026.uranium.common.Result\"\000\022@\n\tDrop"
    "Table\022\031.uranium.common.TableName\032\026.urani"
    "um.common.Result\"\000\022V\n\017GetTableOptions\022\031."
    "uranium.common.TableName\032&.uranium.admin"
    ".GetTableOptionsResponse\"\000b\006proto3", 954);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uranium_admin.proto", &protobuf_RegisterTypes);
  TableOptions::default_instance_ = new TableOptions();
  TableOptions_default_oneof_instance_ = new TableOptionsOneofInstance();
  SchemaTableOptions::default_instance_ = new SchemaTableOptions();
  SchemalessTableOptions::default_instance_ = new SchemalessTableOptions();
  GetTableOptionsResponse::default_instance_ = new GetTableOptionsResponse();
  TableOptions::default_instance_->InitAsDefaultInstance();
  SchemaTableOptions::default_instance_->InitAsDefaultInstance();
  SchemalessTableOptions::default_instance_->InitAsDefaultInstance();
  GetTableOptionsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uranium_5fadmin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uranium_5fadmin_2eproto {
  StaticDescriptorInitializer_uranium_5fadmin_2eproto() {
    protobuf_AddDesc_uranium_5fadmin_2eproto();
  }
} static_descriptor_initializer_uranium_5fadmin_2eproto_;
const ::google::protobuf::EnumDescriptor* StorageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageType_descriptor_;
}
bool StorageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableOptions::kTableNameFieldNumber;
const int TableOptions::kSchemaTableOptionsFieldNumber;
const int TableOptions::kSchemalessTableOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableOptions::TableOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.admin.TableOptions)
}

void TableOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  table_name_ = const_cast< ::uranium::common::TableName*>(&::uranium::common::TableName::default_instance());
  TableOptions_default_oneof_instance_->schema_table_options_ = const_cast< ::uranium::admin::SchemaTableOptions*>(&::uranium::admin::SchemaTableOptions::default_instance());
  TableOptions_default_oneof_instance_->schemaless_table_options_ = const_cast< ::uranium::admin::SchemalessTableOptions*>(&::uranium::admin::SchemalessTableOptions::default_instance());
}

TableOptions::TableOptions(const TableOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.admin.TableOptions)
}

void TableOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  table_name_ = NULL;
  clear_has_options();
}

TableOptions::~TableOptions() {
  // @@protoc_insertion_point(destructor:uranium.admin.TableOptions)
  SharedDtor();
}

void TableOptions::SharedDtor() {
  if (has_options()) {
    clear_options();
  }
  if (this != default_instance_) {
    delete table_name_;
  }
}

void TableOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableOptions_descriptor_;
}

const TableOptions& TableOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_5fadmin_2eproto();
  return *default_instance_;
}

TableOptions* TableOptions::default_instance_ = NULL;

TableOptions* TableOptions::New(::google::protobuf::Arena* arena) const {
  TableOptions* n = new TableOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableOptions::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:uranium.admin.TableOptions)
  switch(options_case()) {
    case kSchemaTableOptions: {
      delete options_.schema_table_options_;
      break;
    }
    case kSchemalessTableOptions: {
      delete options_.schemaless_table_options_;
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONS_NOT_SET;
}


void TableOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.admin.TableOptions)
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
  clear_options();
}

bool TableOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.admin.TableOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.TableName table_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_schema_table_options;
        break;
      }

      // optional .uranium.admin.SchemaTableOptions schema_table_options = 2;
      case 2: {
        if (tag == 18) {
         parse_schema_table_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema_table_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_schemaless_table_options;
        break;
      }

      // optional .uranium.admin.SchemalessTableOptions schemaless_table_options = 3;
      case 3: {
        if (tag == 26) {
         parse_schemaless_table_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schemaless_table_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.admin.TableOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.admin.TableOptions)
  return false;
#undef DO_
}

void TableOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.admin.TableOptions)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_name_, output);
  }

  // optional .uranium.admin.SchemaTableOptions schema_table_options = 2;
  if (has_schema_table_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *options_.schema_table_options_, output);
  }

  // optional .uranium.admin.SchemalessTableOptions schemaless_table_options = 3;
  if (has_schemaless_table_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *options_.schemaless_table_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.admin.TableOptions)
}

::google::protobuf::uint8* TableOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.admin.TableOptions)
  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->table_name_, target);
  }

  // optional .uranium.admin.SchemaTableOptions schema_table_options = 2;
  if (has_schema_table_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *options_.schema_table_options_, target);
  }

  // optional .uranium.admin.SchemalessTableOptions schemaless_table_options = 3;
  if (has_schemaless_table_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *options_.schemaless_table_options_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.admin.TableOptions)
  return target;
}

int TableOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.admin.TableOptions)
  int total_size = 0;

  // optional .uranium.common.TableName table_name = 1;
  if (this->has_table_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_name_);
  }

  switch (options_case()) {
    // optional .uranium.admin.SchemaTableOptions schema_table_options = 2;
    case kSchemaTableOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *options_.schema_table_options_);
      break;
    }
    // optional .uranium.admin.SchemalessTableOptions schemaless_table_options = 3;
    case kSchemalessTableOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *options_.schemaless_table_options_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.admin.TableOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TableOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.admin.TableOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.admin.TableOptions)
    MergeFrom(*source);
  }
}

void TableOptions::MergeFrom(const TableOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.admin.TableOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.options_case()) {
    case kSchemaTableOptions: {
      mutable_schema_table_options()->::uranium::admin::SchemaTableOptions::MergeFrom(from.schema_table_options());
      break;
    }
    case kSchemalessTableOptions: {
      mutable_schemaless_table_options()->::uranium::admin::SchemalessTableOptions::MergeFrom(from.schemaless_table_options());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  if (from.has_table_name()) {
    mutable_table_name()->::uranium::common::TableName::MergeFrom(from.table_name());
  }
}

void TableOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.admin.TableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableOptions::CopyFrom(const TableOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.admin.TableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableOptions::IsInitialized() const {

  return true;
}

void TableOptions::Swap(TableOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableOptions::InternalSwap(TableOptions* other) {
  std::swap(table_name_, other->table_name_);
  std::swap(options_, other->options_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableOptions_descriptor_;
  metadata.reflection = TableOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableOptions

// optional .uranium.common.TableName table_name = 1;
bool TableOptions::has_table_name() const {
  return !_is_default_instance_ && table_name_ != NULL;
}
void TableOptions::clear_table_name() {
  if (GetArenaNoVirtual() == NULL && table_name_ != NULL) delete table_name_;
  table_name_ = NULL;
}
const ::uranium::common::TableName& TableOptions::table_name() const {
  // @@protoc_insertion_point(field_get:uranium.admin.TableOptions.table_name)
  return table_name_ != NULL ? *table_name_ : *default_instance_->table_name_;
}
::uranium::common::TableName* TableOptions::mutable_table_name() {
  
  if (table_name_ == NULL) {
    table_name_ = new ::uranium::common::TableName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.admin.TableOptions.table_name)
  return table_name_;
}
::uranium::common::TableName* TableOptions::release_table_name() {
  // @@protoc_insertion_point(field_release:uranium.admin.TableOptions.table_name)
  
  ::uranium::common::TableName* temp = table_name_;
  table_name_ = NULL;
  return temp;
}
void TableOptions::set_allocated_table_name(::uranium::common::TableName* table_name) {
  delete table_name_;
  table_name_ = table_name;
  if (table_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.admin.TableOptions.table_name)
}

// optional .uranium.admin.SchemaTableOptions schema_table_options = 2;
bool TableOptions::has_schema_table_options() const {
  return options_case() == kSchemaTableOptions;
}
void TableOptions::set_has_schema_table_options() {
  _oneof_case_[0] = kSchemaTableOptions;
}
void TableOptions::clear_schema_table_options() {
  if (has_schema_table_options()) {
    delete options_.schema_table_options_;
    clear_has_options();
  }
}
 const ::uranium::admin::SchemaTableOptions& TableOptions::schema_table_options() const {
  // @@protoc_insertion_point(field_get:uranium.admin.TableOptions.schema_table_options)
  return has_schema_table_options()
      ? *options_.schema_table_options_
      : ::uranium::admin::SchemaTableOptions::default_instance();
}
::uranium::admin::SchemaTableOptions* TableOptions::mutable_schema_table_options() {
  if (!has_schema_table_options()) {
    clear_options();
    set_has_schema_table_options();
    options_.schema_table_options_ = new ::uranium::admin::SchemaTableOptions;
  }
  // @@protoc_insertion_point(field_mutable:uranium.admin.TableOptions.schema_table_options)
  return options_.schema_table_options_;
}
::uranium::admin::SchemaTableOptions* TableOptions::release_schema_table_options() {
  // @@protoc_insertion_point(field_release:uranium.admin.TableOptions.schema_table_options)
  if (has_schema_table_options()) {
    clear_has_options();
    ::uranium::admin::SchemaTableOptions* temp = options_.schema_table_options_;
    options_.schema_table_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TableOptions::set_allocated_schema_table_options(::uranium::admin::SchemaTableOptions* schema_table_options) {
  clear_options();
  if (schema_table_options) {
    set_has_schema_table_options();
    options_.schema_table_options_ = schema_table_options;
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.admin.TableOptions.schema_table_options)
}

// optional .uranium.admin.SchemalessTableOptions schemaless_table_options = 3;
bool TableOptions::has_schemaless_table_options() const {
  return options_case() == kSchemalessTableOptions;
}
void TableOptions::set_has_schemaless_table_options() {
  _oneof_case_[0] = kSchemalessTableOptions;
}
void TableOptions::clear_schemaless_table_options() {
  if (has_schemaless_table_options()) {
    delete options_.schemaless_table_options_;
    clear_has_options();
  }
}
 const ::uranium::admin::SchemalessTableOptions& TableOptions::schemaless_table_options() const {
  // @@protoc_insertion_point(field_get:uranium.admin.TableOptions.schemaless_table_options)
  return has_schemaless_table_options()
      ? *options_.schemaless_table_options_
      : ::uranium::admin::SchemalessTableOptions::default_instance();
}
::uranium::admin::SchemalessTableOptions* TableOptions::mutable_schemaless_table_options() {
  if (!has_schemaless_table_options()) {
    clear_options();
    set_has_schemaless_table_options();
    options_.schemaless_table_options_ = new ::uranium::admin::SchemalessTableOptions;
  }
  // @@protoc_insertion_point(field_mutable:uranium.admin.TableOptions.schemaless_table_options)
  return options_.schemaless_table_options_;
}
::uranium::admin::SchemalessTableOptions* TableOptions::release_schemaless_table_options() {
  // @@protoc_insertion_point(field_release:uranium.admin.TableOptions.schemaless_table_options)
  if (has_schemaless_table_options()) {
    clear_has_options();
    ::uranium::admin::SchemalessTableOptions* temp = options_.schemaless_table_options_;
    options_.schemaless_table_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TableOptions::set_allocated_schemaless_table_options(::uranium::admin::SchemalessTableOptions* schemaless_table_options) {
  clear_options();
  if (schemaless_table_options) {
    set_has_schemaless_table_options();
    options_.schemaless_table_options_ = schemaless_table_options;
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.admin.TableOptions.schemaless_table_options)
}

bool TableOptions::has_options() const {
  return options_case() != OPTIONS_NOT_SET;
}
void TableOptions::clear_has_options() {
  _oneof_case_[0] = OPTIONS_NOT_SET;
}
TableOptions::OptionsCase TableOptions::options_case() const {
  return TableOptions::OptionsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchemaTableOptions::kTypeFieldNumber;
const int SchemaTableOptions::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchemaTableOptions::SchemaTableOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.admin.SchemaTableOptions)
}

void SchemaTableOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SchemaTableOptions::SchemaTableOptions(const SchemaTableOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.admin.SchemaTableOptions)
}

void SchemaTableOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

SchemaTableOptions::~SchemaTableOptions() {
  // @@protoc_insertion_point(destructor:uranium.admin.SchemaTableOptions)
  SharedDtor();
}

void SchemaTableOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemaTableOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemaTableOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemaTableOptions_descriptor_;
}

const SchemaTableOptions& SchemaTableOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_5fadmin_2eproto();
  return *default_instance_;
}

SchemaTableOptions* SchemaTableOptions::default_instance_ = NULL;

SchemaTableOptions* SchemaTableOptions::New(::google::protobuf::Arena* arena) const {
  SchemaTableOptions* n = new SchemaTableOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchemaTableOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.admin.SchemaTableOptions)
  type_ = 0;
  columns_.Clear();
}

bool SchemaTableOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.admin.SchemaTableOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.admin.StorageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::uranium::admin::StorageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_columns;
        break;
      }

      // repeated .uranium.common.ColumnDefination columns = 3;
      case 3: {
        if (tag == 26) {
         parse_columns:
          DO_(input->IncrementRecursionDepth());
         parse_loop_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_columns;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.admin.SchemaTableOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.admin.SchemaTableOptions)
  return false;
#undef DO_
}

void SchemaTableOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.admin.SchemaTableOptions)
  // optional .uranium.admin.StorageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .uranium.common.ColumnDefination columns = 3;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columns(i), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.admin.SchemaTableOptions)
}

::google::protobuf::uint8* SchemaTableOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.admin.SchemaTableOptions)
  // optional .uranium.admin.StorageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .uranium.common.ColumnDefination columns = 3;
  for (unsigned int i = 0, n = this->columns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->columns(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.admin.SchemaTableOptions)
  return target;
}

int SchemaTableOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.admin.SchemaTableOptions)
  int total_size = 0;

  // optional .uranium.admin.StorageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .uranium.common.ColumnDefination columns = 3;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemaTableOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.admin.SchemaTableOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SchemaTableOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SchemaTableOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.admin.SchemaTableOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.admin.SchemaTableOptions)
    MergeFrom(*source);
  }
}

void SchemaTableOptions::MergeFrom(const SchemaTableOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.admin.SchemaTableOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  columns_.MergeFrom(from.columns_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SchemaTableOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.admin.SchemaTableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaTableOptions::CopyFrom(const SchemaTableOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.admin.SchemaTableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaTableOptions::IsInitialized() const {

  return true;
}

void SchemaTableOptions::Swap(SchemaTableOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchemaTableOptions::InternalSwap(SchemaTableOptions* other) {
  std::swap(type_, other->type_);
  columns_.UnsafeArenaSwap(&other->columns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchemaTableOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemaTableOptions_descriptor_;
  metadata.reflection = SchemaTableOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchemaTableOptions

// optional .uranium.admin.StorageType type = 1;
void SchemaTableOptions::clear_type() {
  type_ = 0;
}
 ::uranium::admin::StorageType SchemaTableOptions::type() const {
  // @@protoc_insertion_point(field_get:uranium.admin.SchemaTableOptions.type)
  return static_cast< ::uranium::admin::StorageType >(type_);
}
 void SchemaTableOptions::set_type(::uranium::admin::StorageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:uranium.admin.SchemaTableOptions.type)
}

// repeated .uranium.common.ColumnDefination columns = 3;
int SchemaTableOptions::columns_size() const {
  return columns_.size();
}
void SchemaTableOptions::clear_columns() {
  columns_.Clear();
}
const ::uranium::common::ColumnDefination& SchemaTableOptions::columns(int index) const {
  // @@protoc_insertion_point(field_get:uranium.admin.SchemaTableOptions.columns)
  return columns_.Get(index);
}
::uranium::common::ColumnDefination* SchemaTableOptions::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:uranium.admin.SchemaTableOptions.columns)
  return columns_.Mutable(index);
}
::uranium::common::ColumnDefination* SchemaTableOptions::add_columns() {
  // @@protoc_insertion_point(field_add:uranium.admin.SchemaTableOptions.columns)
  return columns_.Add();
}
::google::protobuf::RepeatedPtrField< ::uranium::common::ColumnDefination >*
SchemaTableOptions::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:uranium.admin.SchemaTableOptions.columns)
  return &columns_;
}
const ::google::protobuf::RepeatedPtrField< ::uranium::common::ColumnDefination >&
SchemaTableOptions::columns() const {
  // @@protoc_insertion_point(field_list:uranium.admin.SchemaTableOptions.columns)
  return columns_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchemalessTableOptions::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchemalessTableOptions::SchemalessTableOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.admin.SchemalessTableOptions)
}

void SchemalessTableOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SchemalessTableOptions::SchemalessTableOptions(const SchemalessTableOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.admin.SchemalessTableOptions)
}

void SchemalessTableOptions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

SchemalessTableOptions::~SchemalessTableOptions() {
  // @@protoc_insertion_point(destructor:uranium.admin.SchemalessTableOptions)
  SharedDtor();
}

void SchemalessTableOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SchemalessTableOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SchemalessTableOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SchemalessTableOptions_descriptor_;
}

const SchemalessTableOptions& SchemalessTableOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_5fadmin_2eproto();
  return *default_instance_;
}

SchemalessTableOptions* SchemalessTableOptions::default_instance_ = NULL;

SchemalessTableOptions* SchemalessTableOptions::New(::google::protobuf::Arena* arena) const {
  SchemalessTableOptions* n = new SchemalessTableOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchemalessTableOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.admin.SchemalessTableOptions)
  type_ = 0;
}

bool SchemalessTableOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.admin.SchemalessTableOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.admin.StorageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::uranium::admin::StorageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.admin.SchemalessTableOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.admin.SchemalessTableOptions)
  return false;
#undef DO_
}

void SchemalessTableOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.admin.SchemalessTableOptions)
  // optional .uranium.admin.StorageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.admin.SchemalessTableOptions)
}

::google::protobuf::uint8* SchemalessTableOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.admin.SchemalessTableOptions)
  // optional .uranium.admin.StorageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.admin.SchemalessTableOptions)
  return target;
}

int SchemalessTableOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.admin.SchemalessTableOptions)
  int total_size = 0;

  // optional .uranium.admin.StorageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchemalessTableOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.admin.SchemalessTableOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SchemalessTableOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SchemalessTableOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.admin.SchemalessTableOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.admin.SchemalessTableOptions)
    MergeFrom(*source);
  }
}

void SchemalessTableOptions::MergeFrom(const SchemalessTableOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.admin.SchemalessTableOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SchemalessTableOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.admin.SchemalessTableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemalessTableOptions::CopyFrom(const SchemalessTableOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.admin.SchemalessTableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemalessTableOptions::IsInitialized() const {

  return true;
}

void SchemalessTableOptions::Swap(SchemalessTableOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchemalessTableOptions::InternalSwap(SchemalessTableOptions* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SchemalessTableOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SchemalessTableOptions_descriptor_;
  metadata.reflection = SchemalessTableOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchemalessTableOptions

// optional .uranium.admin.StorageType type = 1;
void SchemalessTableOptions::clear_type() {
  type_ = 0;
}
 ::uranium::admin::StorageType SchemalessTableOptions::type() const {
  // @@protoc_insertion_point(field_get:uranium.admin.SchemalessTableOptions.type)
  return static_cast< ::uranium::admin::StorageType >(type_);
}
 void SchemalessTableOptions::set_type(::uranium::admin::StorageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:uranium.admin.SchemalessTableOptions.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTableOptionsResponse::kStatusFieldNumber;
const int GetTableOptionsResponse::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTableOptionsResponse::GetTableOptionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:uranium.admin.GetTableOptionsResponse)
}

void GetTableOptionsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  options_ = const_cast< ::uranium::admin::TableOptions*>(&::uranium::admin::TableOptions::default_instance());
}

GetTableOptionsResponse::GetTableOptionsResponse(const GetTableOptionsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:uranium.admin.GetTableOptionsResponse)
}

void GetTableOptionsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  options_ = NULL;
}

GetTableOptionsResponse::~GetTableOptionsResponse() {
  // @@protoc_insertion_point(destructor:uranium.admin.GetTableOptionsResponse)
  SharedDtor();
}

void GetTableOptionsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void GetTableOptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTableOptionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTableOptionsResponse_descriptor_;
}

const GetTableOptionsResponse& GetTableOptionsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uranium_5fadmin_2eproto();
  return *default_instance_;
}

GetTableOptionsResponse* GetTableOptionsResponse::default_instance_ = NULL;

GetTableOptionsResponse* GetTableOptionsResponse::New(::google::protobuf::Arena* arena) const {
  GetTableOptionsResponse* n = new GetTableOptionsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTableOptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uranium.admin.GetTableOptionsResponse)
  status_ = 0;
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}

bool GetTableOptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:uranium.admin.GetTableOptionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .uranium.common.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::uranium::common::Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .uranium.admin.TableOptions options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:uranium.admin.GetTableOptionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:uranium.admin.GetTableOptionsResponse)
  return false;
#undef DO_
}

void GetTableOptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:uranium.admin.GetTableOptionsResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .uranium.admin.TableOptions options = 2;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->options_, output);
  }

  // @@protoc_insertion_point(serialize_end:uranium.admin.GetTableOptionsResponse)
}

::google::protobuf::uint8* GetTableOptionsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:uranium.admin.GetTableOptionsResponse)
  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .uranium.admin.TableOptions options = 2;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->options_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:uranium.admin.GetTableOptionsResponse)
  return target;
}

int GetTableOptionsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:uranium.admin.GetTableOptionsResponse)
  int total_size = 0;

  // optional .uranium.common.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .uranium.admin.TableOptions options = 2;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->options_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTableOptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uranium.admin.GetTableOptionsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetTableOptionsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTableOptionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uranium.admin.GetTableOptionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uranium.admin.GetTableOptionsResponse)
    MergeFrom(*source);
  }
}

void GetTableOptionsResponse::MergeFrom(const GetTableOptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uranium.admin.GetTableOptionsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.has_options()) {
    mutable_options()->::uranium::admin::TableOptions::MergeFrom(from.options());
  }
}

void GetTableOptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uranium.admin.GetTableOptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableOptionsResponse::CopyFrom(const GetTableOptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uranium.admin.GetTableOptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableOptionsResponse::IsInitialized() const {

  return true;
}

void GetTableOptionsResponse::Swap(GetTableOptionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTableOptionsResponse::InternalSwap(GetTableOptionsResponse* other) {
  std::swap(status_, other->status_);
  std::swap(options_, other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTableOptionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTableOptionsResponse_descriptor_;
  metadata.reflection = GetTableOptionsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTableOptionsResponse

// optional .uranium.common.Status status = 1;
void GetTableOptionsResponse::clear_status() {
  status_ = 0;
}
 ::uranium::common::Status GetTableOptionsResponse::status() const {
  // @@protoc_insertion_point(field_get:uranium.admin.GetTableOptionsResponse.status)
  return static_cast< ::uranium::common::Status >(status_);
}
 void GetTableOptionsResponse::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.admin.GetTableOptionsResponse.status)
}

// optional .uranium.admin.TableOptions options = 2;
bool GetTableOptionsResponse::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
void GetTableOptionsResponse::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
const ::uranium::admin::TableOptions& GetTableOptionsResponse::options() const {
  // @@protoc_insertion_point(field_get:uranium.admin.GetTableOptionsResponse.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
::uranium::admin::TableOptions* GetTableOptionsResponse::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::uranium::admin::TableOptions;
  }
  // @@protoc_insertion_point(field_mutable:uranium.admin.GetTableOptionsResponse.options)
  return options_;
}
::uranium::admin::TableOptions* GetTableOptionsResponse::release_options() {
  // @@protoc_insertion_point(field_release:uranium.admin.GetTableOptionsResponse.options)
  
  ::uranium::admin::TableOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void GetTableOptionsResponse::set_allocated_options(::uranium::admin::TableOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.admin.GetTableOptionsResponse.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace uranium

// @@protoc_insertion_point(global_scope)
