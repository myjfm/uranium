// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace uranium {
namespace common {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class ColumnDefination;
class ColumnName;
class ColumnValue;
class Result;
class TableName;

enum TableType {
  KV = 0,
  LIST = 1,
  HASH = 2,
  SET = 3,
  SCHEMA = 4,
  TableType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TableType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TableType_IsValid(int value);
const TableType TableType_MIN = KV;
const TableType TableType_MAX = SCHEMA;
const int TableType_ARRAYSIZE = TableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TableType_descriptor();
inline const ::std::string& TableType_Name(TableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TableType_descriptor(), value);
}
inline bool TableType_Parse(
    const ::std::string& name, TableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TableType>(
    TableType_descriptor(), name, value);
}
enum Status {
  OK = 0,
  INTERNAL_ERROR = 1,
  TABLE_NOT_FOUND = 2,
  KEY_NOT_FOUND = 3,
  TABLE_ALREADY_EXISTS = 4,
  KEY_ALREADY_EXISTS = 5,
  INVALID_ARGUMENT = 6,
  OUT_OF_RANGE = 7,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_IsValid(int value);
const Status Status_MIN = OK;
const Status Status_MAX = OUT_OF_RANGE;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum ColumnType {
  BYTE = 0,
  SHORT = 1,
  INT = 2,
  LONG = 3,
  FLOAT = 4,
  DOUBLE = 5,
  STRING = 6,
  DATE = 7,
  DATETIME = 8,
  ColumnType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ColumnType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ColumnType_IsValid(int value);
const ColumnType ColumnType_MIN = BYTE;
const ColumnType ColumnType_MAX = DATETIME;
const int ColumnType_ARRAYSIZE = ColumnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColumnType_descriptor();
inline const ::std::string& ColumnType_Name(ColumnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColumnType_descriptor(), value);
}
inline bool ColumnType_Parse(
    const ::std::string& name, ColumnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColumnType>(
    ColumnType_descriptor(), name, value);
}
// ===================================================================

class TableName : public ::google::protobuf::Message {
 public:
  TableName();
  virtual ~TableName();

  TableName(const TableName& from);

  inline TableName& operator=(const TableName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableName& default_instance();

  void Swap(TableName* other);

  // implements Message ----------------------------------------------

  inline TableName* New() const { return New(NULL); }

  TableName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableName& from);
  void MergeFrom(const TableName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TableName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:uranium.common.TableName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static TableName* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  inline Result* New() const { return New(NULL); }

  Result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .uranium.common.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::uranium::common::Status status() const;
  void set_status(::uranium::common::Status value);

  // optional string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:uranium.common.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// -------------------------------------------------------------------

class ColumnName : public ::google::protobuf::Message {
 public:
  ColumnName();
  virtual ~ColumnName();

  ColumnName(const ColumnName& from);

  inline ColumnName& operator=(const ColumnName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnName& default_instance();

  void Swap(ColumnName* other);

  // implements Message ----------------------------------------------

  inline ColumnName* New() const { return New(NULL); }

  ColumnName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnName& from);
  void MergeFrom(const ColumnName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColumnName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:uranium.common.ColumnName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ColumnName* default_instance_;
};
// -------------------------------------------------------------------

class ColumnValue : public ::google::protobuf::Message {
 public:
  ColumnValue();
  virtual ~ColumnValue();

  ColumnValue(const ColumnValue& from);

  inline ColumnValue& operator=(const ColumnValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnValue& default_instance();

  enum ValueCase {
    kInteger = 1,
    kFlt = 2,
    kDbl = 3,
    kOther = 4,
    VALUE_NOT_SET = 0,
  };

  void Swap(ColumnValue* other);

  // implements Message ----------------------------------------------

  inline ColumnValue* New() const { return New(NULL); }

  ColumnValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnValue& from);
  void MergeFrom(const ColumnValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColumnValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 integer = 1;
  private:
  bool has_integer() const;
  public:
  void clear_integer();
  static const int kIntegerFieldNumber = 1;
  ::google::protobuf::int64 integer() const;
  void set_integer(::google::protobuf::int64 value);

  // optional float flt = 2;
  private:
  bool has_flt() const;
  public:
  void clear_flt();
  static const int kFltFieldNumber = 2;
  float flt() const;
  void set_flt(float value);

  // optional double dbl = 3;
  private:
  bool has_dbl() const;
  public:
  void clear_dbl();
  static const int kDblFieldNumber = 3;
  double dbl() const;
  void set_dbl(double value);

  // optional bytes other = 4;
  private:
  bool has_other() const;
  public:
  void clear_other();
  static const int kOtherFieldNumber = 4;
  const ::std::string& other() const;
  void set_other(const ::std::string& value);
  void set_other(const char* value);
  void set_other(const void* value, size_t size);
  ::std::string* mutable_other();
  ::std::string* release_other();
  void set_allocated_other(::std::string* other);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:uranium.common.ColumnValue)
 private:
  inline void set_has_integer();
  inline void set_has_flt();
  inline void set_has_dbl();
  inline void set_has_other();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int64 integer_;
    float flt_;
    double dbl_;
    ::google::protobuf::internal::ArenaStringPtr other_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ColumnValue* default_instance_;
};
// -------------------------------------------------------------------

class ColumnDefination : public ::google::protobuf::Message {
 public:
  ColumnDefination();
  virtual ~ColumnDefination();

  ColumnDefination(const ColumnDefination& from);

  inline ColumnDefination& operator=(const ColumnDefination& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnDefination& default_instance();

  void Swap(ColumnDefination* other);

  // implements Message ----------------------------------------------

  inline ColumnDefination* New() const { return New(NULL); }

  ColumnDefination* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnDefination& from);
  void MergeFrom(const ColumnDefination& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColumnDefination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .uranium.common.ColumnName column_name = 1;
  bool has_column_name() const;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 1;
  const ::uranium::common::ColumnName& column_name() const;
  ::uranium::common::ColumnName* mutable_column_name();
  ::uranium::common::ColumnName* release_column_name();
  void set_allocated_column_name(::uranium::common::ColumnName* column_name);

  // optional .uranium.common.ColumnType column_type = 2;
  void clear_column_type();
  static const int kColumnTypeFieldNumber = 2;
  ::uranium::common::ColumnType column_type() const;
  void set_column_type(::uranium::common::ColumnType value);

  // optional .uranium.common.ColumnValue default_value = 3;
  bool has_default_value() const;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 3;
  const ::uranium::common::ColumnValue& default_value() const;
  ::uranium::common::ColumnValue* mutable_default_value();
  ::uranium::common::ColumnValue* release_default_value();
  void set_allocated_default_value(::uranium::common::ColumnValue* default_value);

  // optional bool not_null = 4;
  void clear_not_null();
  static const int kNotNullFieldNumber = 4;
  bool not_null() const;
  void set_not_null(bool value);

  // @@protoc_insertion_point(class_scope:uranium.common.ColumnDefination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::uranium::common::ColumnName* column_name_;
  ::uranium::common::ColumnValue* default_value_;
  int column_type_;
  bool not_null_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static ColumnDefination* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TableName

// optional string name = 1;
inline void TableName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TableName::name() const {
  // @@protoc_insertion_point(field_get:uranium.common.TableName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.common.TableName.name)
}
inline void TableName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.common.TableName.name)
}
inline void TableName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.common.TableName.name)
}
inline ::std::string* TableName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:uranium.common.TableName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableName::release_name() {
  // @@protoc_insertion_point(field_release:uranium.common.TableName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:uranium.common.TableName.name)
}

// -------------------------------------------------------------------

// Result

// optional .uranium.common.Status status = 1;
inline void Result::clear_status() {
  status_ = 0;
}
inline ::uranium::common::Status Result::status() const {
  // @@protoc_insertion_point(field_get:uranium.common.Result.status)
  return static_cast< ::uranium::common::Status >(status_);
}
inline void Result::set_status(::uranium::common::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.Result.status)
}

// optional string message = 2;
inline void Result::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::message() const {
  // @@protoc_insertion_point(field_get:uranium.common.Result.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.common.Result.message)
}
inline void Result::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.common.Result.message)
}
inline void Result::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.common.Result.message)
}
inline ::std::string* Result::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:uranium.common.Result.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_message() {
  // @@protoc_insertion_point(field_release:uranium.common.Result.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:uranium.common.Result.message)
}

// -------------------------------------------------------------------

// ColumnName

// optional string name = 1;
inline void ColumnName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnName::name() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.common.ColumnName.name)
}
inline void ColumnName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.common.ColumnName.name)
}
inline void ColumnName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.common.ColumnName.name)
}
inline ::std::string* ColumnName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:uranium.common.ColumnName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnName::release_name() {
  // @@protoc_insertion_point(field_release:uranium.common.ColumnName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:uranium.common.ColumnName.name)
}

// -------------------------------------------------------------------

// ColumnValue

// optional sint64 integer = 1;
inline bool ColumnValue::has_integer() const {
  return value_case() == kInteger;
}
inline void ColumnValue::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void ColumnValue::clear_integer() {
  if (has_integer()) {
    value_.integer_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 ColumnValue::integer() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnValue.integer)
  if (has_integer()) {
    return value_.integer_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void ColumnValue::set_integer(::google::protobuf::int64 value) {
  if (!has_integer()) {
    clear_value();
    set_has_integer();
  }
  value_.integer_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.integer)
}

// optional float flt = 2;
inline bool ColumnValue::has_flt() const {
  return value_case() == kFlt;
}
inline void ColumnValue::set_has_flt() {
  _oneof_case_[0] = kFlt;
}
inline void ColumnValue::clear_flt() {
  if (has_flt()) {
    value_.flt_ = 0;
    clear_has_value();
  }
}
inline float ColumnValue::flt() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnValue.flt)
  if (has_flt()) {
    return value_.flt_;
  }
  return 0;
}
inline void ColumnValue::set_flt(float value) {
  if (!has_flt()) {
    clear_value();
    set_has_flt();
  }
  value_.flt_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.flt)
}

// optional double dbl = 3;
inline bool ColumnValue::has_dbl() const {
  return value_case() == kDbl;
}
inline void ColumnValue::set_has_dbl() {
  _oneof_case_[0] = kDbl;
}
inline void ColumnValue::clear_dbl() {
  if (has_dbl()) {
    value_.dbl_ = 0;
    clear_has_value();
  }
}
inline double ColumnValue::dbl() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnValue.dbl)
  if (has_dbl()) {
    return value_.dbl_;
  }
  return 0;
}
inline void ColumnValue::set_dbl(double value) {
  if (!has_dbl()) {
    clear_value();
    set_has_dbl();
  }
  value_.dbl_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.dbl)
}

// optional bytes other = 4;
inline bool ColumnValue::has_other() const {
  return value_case() == kOther;
}
inline void ColumnValue::set_has_other() {
  _oneof_case_[0] = kOther;
}
inline void ColumnValue::clear_other() {
  if (has_other()) {
    value_.other_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& ColumnValue::other() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnValue.other)
  if (has_other()) {
    return value_.other_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnValue::set_other(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.other)
  if (!has_other()) {
    clear_value();
    set_has_other();
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:uranium.common.ColumnValue.other)
}
inline void ColumnValue::set_other(const char* value) {
  if (!has_other()) {
    clear_value();
    set_has_other();
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:uranium.common.ColumnValue.other)
}
inline void ColumnValue::set_other(const void* value, size_t size) {
  if (!has_other()) {
    clear_value();
    set_has_other();
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.other_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:uranium.common.ColumnValue.other)
}
inline ::std::string* ColumnValue::mutable_other() {
  if (!has_other()) {
    clear_value();
    set_has_other();
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:uranium.common.ColumnValue.other)
  return value_.other_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnValue::release_other() {
  // @@protoc_insertion_point(field_release:uranium.common.ColumnValue.other)
  if (has_other()) {
    clear_has_value();
    return value_.other_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ColumnValue::set_allocated_other(::std::string* other) {
  if (!has_other()) {
    value_.other_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (other != NULL) {
    set_has_other();
    value_.other_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        other);
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.common.ColumnValue.other)
}

inline bool ColumnValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ColumnValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ColumnValue::ValueCase ColumnValue::value_case() const {
  return ColumnValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ColumnDefination

// optional .uranium.common.ColumnName column_name = 1;
inline bool ColumnDefination::has_column_name() const {
  return !_is_default_instance_ && column_name_ != NULL;
}
inline void ColumnDefination::clear_column_name() {
  if (GetArenaNoVirtual() == NULL && column_name_ != NULL) delete column_name_;
  column_name_ = NULL;
}
inline const ::uranium::common::ColumnName& ColumnDefination::column_name() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnDefination.column_name)
  return column_name_ != NULL ? *column_name_ : *default_instance_->column_name_;
}
inline ::uranium::common::ColumnName* ColumnDefination::mutable_column_name() {
  
  if (column_name_ == NULL) {
    column_name_ = new ::uranium::common::ColumnName;
  }
  // @@protoc_insertion_point(field_mutable:uranium.common.ColumnDefination.column_name)
  return column_name_;
}
inline ::uranium::common::ColumnName* ColumnDefination::release_column_name() {
  // @@protoc_insertion_point(field_release:uranium.common.ColumnDefination.column_name)
  
  ::uranium::common::ColumnName* temp = column_name_;
  column_name_ = NULL;
  return temp;
}
inline void ColumnDefination::set_allocated_column_name(::uranium::common::ColumnName* column_name) {
  delete column_name_;
  column_name_ = column_name;
  if (column_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.common.ColumnDefination.column_name)
}

// optional .uranium.common.ColumnType column_type = 2;
inline void ColumnDefination::clear_column_type() {
  column_type_ = 0;
}
inline ::uranium::common::ColumnType ColumnDefination::column_type() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnDefination.column_type)
  return static_cast< ::uranium::common::ColumnType >(column_type_);
}
inline void ColumnDefination::set_column_type(::uranium::common::ColumnType value) {
  
  column_type_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnDefination.column_type)
}

// optional .uranium.common.ColumnValue default_value = 3;
inline bool ColumnDefination::has_default_value() const {
  return !_is_default_instance_ && default_value_ != NULL;
}
inline void ColumnDefination::clear_default_value() {
  if (GetArenaNoVirtual() == NULL && default_value_ != NULL) delete default_value_;
  default_value_ = NULL;
}
inline const ::uranium::common::ColumnValue& ColumnDefination::default_value() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnDefination.default_value)
  return default_value_ != NULL ? *default_value_ : *default_instance_->default_value_;
}
inline ::uranium::common::ColumnValue* ColumnDefination::mutable_default_value() {
  
  if (default_value_ == NULL) {
    default_value_ = new ::uranium::common::ColumnValue;
  }
  // @@protoc_insertion_point(field_mutable:uranium.common.ColumnDefination.default_value)
  return default_value_;
}
inline ::uranium::common::ColumnValue* ColumnDefination::release_default_value() {
  // @@protoc_insertion_point(field_release:uranium.common.ColumnDefination.default_value)
  
  ::uranium::common::ColumnValue* temp = default_value_;
  default_value_ = NULL;
  return temp;
}
inline void ColumnDefination::set_allocated_default_value(::uranium::common::ColumnValue* default_value) {
  delete default_value_;
  default_value_ = default_value;
  if (default_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:uranium.common.ColumnDefination.default_value)
}

// optional bool not_null = 4;
inline void ColumnDefination::clear_not_null() {
  not_null_ = false;
}
inline bool ColumnDefination::not_null() const {
  // @@protoc_insertion_point(field_get:uranium.common.ColumnDefination.not_null)
  return not_null_;
}
inline void ColumnDefination::set_not_null(bool value) {
  
  not_null_ = value;
  // @@protoc_insertion_point(field_set:uranium.common.ColumnDefination.not_null)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace uranium

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::uranium::common::TableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uranium::common::TableType>() {
  return ::uranium::common::TableType_descriptor();
}
template <> struct is_proto_enum< ::uranium::common::Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uranium::common::Status>() {
  return ::uranium::common::Status_descriptor();
}
template <> struct is_proto_enum< ::uranium::common::ColumnType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uranium::common::ColumnType>() {
  return ::uranium::common::ColumnType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
