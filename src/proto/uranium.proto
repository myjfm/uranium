syntax = "proto3";

package uranium.api;

import "common.proto";

////// interfaces for k-v pair data structure
service UraniumKVService {
  // get the value of a key
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the key does not yet exist.
  rpc KVGet (KVGetRequest) returns (KVGetResponse) {}
  // set the value of a key
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc KVSet (KVSetRequest) returns (KVSetResponse) {}
  // remove the value of a key, equal to set empty value of a key
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc KVRemove (KVRemoveRequest) returns (KVRemoveResponse) {}
}

////// interfaces for list data structure
service UraniumListService {
  // Insert all the specified values at the head of the list stored at key.
  // First the first value, then the second value, and one by one.
  // If key does not exist, it is created as empty list before performing the
  // push operations.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc ListLPush (ListLPushRequest) returns (ListLPushResponse) {}
  // Removes and returns the first element of the list stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when key does not yet exist.
  rpc ListLPop (ListLPopRequest) returns (ListLPopResponse) {}
  // append one or multiple values to a list
  // insert all the specified values at the tail of the list stored at key.
  // If key does not exist, it is created as empty list before performing the
  // push operation.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc ListRPush (ListRPushRequest) returns (ListRPushResponse) {}
  // Removes and returns the last element of the list stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when key does not yet exist.
  rpc ListRPop (ListRPopRequest) returns (ListRPopResponse) {}
  // Inserts value at the head of the list stored at key, only if key already
  // exists and holds a list. In contrary to ListLPush, no operation will be
  // performed when key does not yet exist.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc ListLPushX (ListLPushXRequest) returns (ListLPushXResponse) {}
  // Inserts value at the tail of the list stored at key, only if key already
  // exists and holds a list. In contrary to ListRPush, no operation will be
  // performed when key does not yet exist.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc ListRPushX (ListRPushXRequest) returns (ListRPushXResponse) {}
  // Returns the element at index index in the list stored at key. The index
  // is zero-based, so 0 means the first element, 1 the second element and
  // so on. Negative indices can be used to designate elements starting at the
  // tail of the list. Here, -1 means the last element, -2 means the penultimate
  // and so forth. When the value at key is not a list or index is out of range,
  // an error is returned.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when key does not yet exist.
  // OUT_OF_RANGE error is returned when index is out of range.
  rpc ListIndex (ListIndexRequest) returns (ListIndexResponse) {}
  // Set the list element at index to value.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when key does not yet exist.
  // OUT_OF_RANGE error is return for out of range indexes.
  rpc ListSet (ListSetRequest) returns (ListSetResponse) {}
  // Returns the specified elements of the list stored at key. The offsets start
  // and stop are zero-based indexes, with 0 being the first element of the
  // list (the head of the list), 1 being the next element and so on.
  // These offsets can also be negative numbers indicating offsets starting at
  // the end of the list. For example, -1 is the last element of the list,
  // -2 the penultimate, and so on.
  // If start is larger than the end of the list, out of range error is
  // produced. If stop is larger than the actual end of the list, we will treat
  // it like the last element of the list. If start is larger than stop, out of
  // range is produced.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when key does not yet exist.
  // OUT_OF_RANGE error is returned when out of range.
  rpc ListRange (ListRangeRequest) returns (ListRangeResponse) {}
  // Returns the length of the list stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when key does not yet exist.
  rpc ListLength (ListLengthRequest) returns (ListLengthResponse) {}
  // Remove the whole list.
  // It will not produce an error if the key does not exist.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when key does not yet exist.
  rpc ListRemoveAll (ListRemoveAllRequest) returns (ListRemoveAllResponse) {}
}

////// interfaces for hash data structure
service UraniumHashService {
  // Returns the values associated with the specified fields in the hash stored
  // at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the field does not yet exist.
  rpc HashGet (HashGetRequest) returns (HashGetResponse) {}
  // Returns all fields and values of the hash stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the field does not yet exist.
  rpc HashGetAll (HashGetAllRequest) returns (HashGetAllResponse) {}
  // Returns all fields of the hash stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the field does not yet exist.
  rpc HashGetAllFields (HashGetAllFieldsRequest) returns (HashGetAllFieldsResponse) {}
  // Returns all values in the hash stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the field does not yet exist.
  rpc HashGetAllValues (HashGetAllValuesRequest) returns (HashGetAllValuesResponse) {}
  // Returns the number of fields contained in the hash stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the field does not yet exist.
  rpc HashLength (HashLengthRequest) returns (HashLengthResponse) {}
  // Sets field in the hash stored at key to value. If key does not exist, a new
  // key holding a hash is created. If field already exists in the hash, it is
  // overwritten.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc HashSet (HashSetRequest) returns (HashSetResponse) {}
  // Sets field in the hash stored at key to value, only if field does not yet
  // exist. If key does not exist, a new key holding a hash is created.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // FIELD_ALREADY_EXISTS error is returned when the field already exists.
  rpc HashSetX (HashSetXRequest) returns (HashSetXResponse) {}
  // Removes the specified fields from the hash stored at key. Specified fields
  // that do not exist within this hash are ignored.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the key does not exist.
  rpc HashRemove (HashRemoveRequest) returns (HashRemoveResponse) {}
  // Returns if field is an existing field in the hash stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the key does not exist.
  rpc HashExists (HashExistsRequest) returns (HashExistsResponse) {}
  // Remove the whole hash.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the key does not exist.
  rpc HashRemoveAll (HashRemoveAllRequest) returns (HashRemoveAllResponse) {}
}

////// interfaces for set data structure
service UraniumSetService {
  // Add the specified members to the set stored at key. Specified members that
  // are already a member of this set are ignored. If key does not exist, a new
  // set is created before adding the specified members.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc SetAdd(SetAddRequest) returns (SetAddResponse) {}
  // Returns the set cardinality (number of elements) of the set stored at key.
  // If key does not exist, it is interpreted as an empty set and 0 is returned.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  rpc SetLength(SetLengthRequest) returns (SetLengthResponse) {}
  // Returns if member is a member of the set stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the key does not exist.
  rpc SetIsMember(SetIsMemberRequest) returns (SetIsMemberResponse) {}
  // Returns all the members of the set value stored at key.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the key does not exist.
  rpc SetGetAll(SetGetAllRequest) returns (SetGetAllResponse) {}
  // Remove the specified members from the set stored at key. Specified members
  // that are not a member of this set are ignored.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the key does not exist.
  rpc SetRemove(SetRemoveRequest) returns (SetRemoveResponse) {}
  // Remove the whole set.
  // TABLE_NOT_FOUND error is returned when the table does not yet exist.
  // KEY_NOT_FOUND error is returned when the key does not exist.
  rpc SetRemoveAll(SetRemoveAllRequest) returns (SetRemoveAllResponse) {}
}

service UraniumSchemaService {
  // TODO
}

message Key {
  bytes key = 1;
}
message Value {
  bytes value = 1;
}
message KeyValue {
  Key key     = 1;
  Value value = 2;
}
message Field {
  bytes field = 1;
}
message FieldValue {
  Field key   = 1;
  Value value = 2;
}

////// request definitions of k-v structure
message KVGetRequest {
  common.TableName table_name = 1;
  repeated Key keys           = 2;
}
message KVGetResponse {
  common.Result result  = 1;
  repeated KeyValue kvs = 2;
}

message KVSetRequest {
  common.TableName table_name = 1;
  repeated KeyValue kvs       = 2;
}
message KVSetResponse {
  common.Result result = 1;
}

message KVRemoveRequest {
  common.TableName table_name = 1;
  repeated Key keys           = 2;
}
message KVRemoveResponse {
  common.Result result = 1;
}

////// request definitions of list structure
message ListLPushRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated Value values       = 3;
}
message ListLPushResponse {
  common.Result result = 1;
}

message ListLPopRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message ListLPopResponse {
  common.Result result  = 1;
  Value value           = 2;
}

message ListRPushRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated Value values       = 3;
}
message ListRPushResponse {
  common.Result result = 1;
}

message ListRPopRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message ListRPopResponse {
  common.Result result  = 1;
  Value value           = 2;
}

message ListLPushXRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated Value values       = 3;
}
message ListLPushXResponse {
  common.Result result = 1;
}

message ListRPushXRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated Value values       = 3;
}
message ListRPushXResponse {
  common.Result result = 1;
}

message ListIndexRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  int64 index                 = 3;
}
message ListIndexResponse {
  common.Result result  = 1;
  Value value           = 2;
}

message ListSetRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  int64 index                 = 3;
  Value value                 = 4;
}
message ListSetResponse {
  common.Result result = 1;
}

message ListRangeRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  int64 start                 = 3;
  int64 end                   = 4;
}
message ListRangeResponse {
  common.Result result  = 1;
  repeated Value values = 2;
}

message ListLengthRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message ListLengthResponse {
  common.Result result  = 1;
  int64 length          = 2;
}

message ListRemoveAllRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message ListRemoveAllResponse {
  common.Result result = 1;
}

////// request definitions of Hash structure
message HashGetRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated Field fields       = 3;
}
message HashGetResponse {
  common.Result result    = 1;
  repeated FieldValue fvs = 2;
}

message HashGetAllRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message HashGetAllResponse {
  common.Result result    = 1;
  repeated FieldValue fvs = 2;
}

message HashGetAllFieldsRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message HashGetAllFieldsResponse {
  common.Result result  = 1;
  repeated Field fields = 2;
}

message HashGetAllValuesRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message HashGetAllValuesResponse {
  common.Result result  = 1;
  repeated Value values = 2;
}

message HashLengthRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message HashLengthResponse {
  common.Result result  = 1;
  int64 length          = 2;
}

message HashSetRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated FieldValue fvs     = 3;
}
message HashSetResponse {
  common.Result result = 1;
}

message HashSetXRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  FieldValue fv               = 3;
}
message HashSetXResponse {
  common.Result result = 1;
}

message HashRemoveRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated Field fields       = 3;
}
message HashRemoveResponse {
  common.Result result = 1;
}

message HashExistsRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  Field field                 = 3;
}
message HashExistsResponse {
  common.Result result  = 1;
  bool exists           = 2;
}

message HashRemoveAllRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message HashRemoveAllResponse {
  common.Result result = 1;
}

////// request definitions of set structure
message SetAddRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated Value values       = 3;
}
message SetAddResponse {
  common.Result result = 1;
}

message SetLengthRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message SetLengthResponse {
  common.Result result  = 1;
  int64 length          = 2;
}

message SetIsMemberRequest {
  common.Status status  = 1;
  Key key               = 2;
  Value value           = 3;
}
message SetIsMemberResponse {
  common.Result result  = 1;
  bool yes              = 2;
}

message SetGetAllRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message SetGetAllResponse {
  common.Result result  = 1;
  repeated Value values = 2;
}

message SetRemoveRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
  repeated Value values       = 3;
}
message SetRemoveResponse {
  common.Result result = 1;
}

message SetRemoveAllRequest {
  common.TableName table_name = 1;
  Key key                     = 2;
}
message SetRemoveAllResponse {
  common.Result result = 1;
}

