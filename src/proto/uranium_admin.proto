// Copyright (c) 2016, myjfm(mwxjmmyjfm@gmail.com).  All rights reserved.
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.
//
syntax = "proto3";
package uranium.admin;
import "common.proto";

service UraniumAdminService {
  rpc CreateTable(TableOptions) returns (common.Result) {}
  rpc UpdateTable(TableOptions) returns (common.Result) {}
  rpc DropTable(DropTableRequest) returns (common.Result) {}
  rpc GetTableOptions(GetTableOptionsRequest) returns(GetTableOptionsResponse) {}
}

message TableOptions {
  common.TableName table_name               = 1;
  common.TableType table_type               = 2;
  CommonTableOptions common_table_options   = 3;
  oneof options {
    KVTableOptions kv_table_options         = 4;
    ListTableOptions list_table_options     = 5;
    HashTableOptions hash_table_options     = 6;
    SetTableOptions set_table_options       = 7;
    SchemaTableOptions schema_table_options = 8;
  }
}

enum StorageType {
  FLAT              = 0;
  COLUMN_SEPARATED  = 1;  // currently not supported
  COLUMN_GROUP      = 2;  // currently not supported
}

enum RocksTableType {
  BLOCK_BASED = 0;
  // for in memory database,
  // you could use this type of table to obtain high performance like redis
  PLAIN       = 1;
}

message CommonTableOptions {
  RocksTableType rocks_table_type = 1;  // [default = BLOCK_BASED]
  int32 num_levels                = 2;  // [default = 3]
  int32 max_flush_threads         = 3;  // [default = 2]
  int32 max_compaction_threads    = 4;  // [default = 2]
  int64 mem_table_memory          = 5;  // [default = 1048576]
  int64 mem_table_num             = 6;  // [default = 2]
  int64 lru_cache_size            = 7;  // [default = 10485760]
  string plain_encoding_type      = 8;  // [default = "plain"] only used for PLAIN table type
  int32 fixed_prefix_transform    = 9;  // [default = 8] only used for PLAIN table type
}

message KVTableOptions {
  StorageType type = 1;
}

message ListTableOptions {
  StorageType type = 1;
}

message HashTableOptions {
  StorageType type = 1;
}

message SetTableOptions {
  StorageType type = 1;
}

message SchemaTableOptions {
  StorageType type                          = 1;
  repeated common.ColumnDefination columns  = 2;
}

message DropTableRequest {
  common.TableName table_name = 1;
  common.TableType table_type = 2;
}

message GetTableOptionsRequest {
  common.TableName table_name = 1;
  common.TableType table_type = 2;
}
message GetTableOptionsResponse {
  common.Result result = 1;
  TableOptions options = 2;
}

